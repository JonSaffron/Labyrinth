current monster data 400 to 7bf
-------------------------------
400 to 4bf		-- room number - FF indicates this is a free slot, FE indicates this is a template
4c0 to 57f		-- if egg then points towards template monster
					otherwise controls behaviour
					type of movement in lower 3 bits
						0 still, 1 left/right, 2 up/down, 3 placid, 4 full pursuit,
						5 attracted, 6 cautious, 7 rolling around
					bit 3 set indicates that the monster stays in the same room
					bit 4 set (when 3 isn't) indicates that the monster can move between rooms (usually set upon meeting player - the active flag)
					bit 5 set (when 3 isn't) indicates that when the monster moves rooms, it follows the player, otherwise it moves randomly
					bit 6 set indicates that the monster will shoot back having been shot
					bit 7 set indicates that the monster will shoot at the player
580 to 63f		-- tile number (position in room) (not used if template) &FF indicates random position 
640 to 6ff		-- energy (not used if template)
700 to 7bf		-- monster type
					if bit 7 set then this is an egg and the first 7 bits are a counter before hatching
					otherwise controls type and behaviour
						lowest 4 bits
							0 forcefield, 1 thresher, 2 thresher cyan, 
							3 rotafloater, 4 rotafloater cyan,
							5 green killer cube, 6 red flitterbug, 7 cyan flitterbug,
							8 red killer cube, 9 diamond demon, a flitterbug brown,
							b tiger moth, c butterfly, d joker, e crazy crawler, f deathcube
						bit 4 set indicates that the monster will split into other monsters when hit/upon death
						bit 5 clear indicates that the monster lays mushrooms when the player fires
						bit 6 set indicates that the monster lays eggs
						bit 7 set indicates that the monster is currently an egg

0840			-- sound data
					initial frequency
					initial volume
					control 
						top nibble: 0=no change, 1=add freq adj, 2=eor freq adj, 3=eor then add freq adj, else=random
						low nibble: 1=hold vol then fade out, 2=hold vol then fade up, 3=infinite, 4=hold, 5=rise and fall
					volume adjustment
					frequency adjustment

08c0 to 08c3	-- current channel frequency
08c4 to 08c7	-- current channel volume
08c8 to 08cb	-- channel control
08cd			-- sound on/off (&10 or 0)
08ce			-- temp storage of A
08cf			-- temp storage of X
08d0 to 08d3	-- channel volume adjustment
08d4 to 08d7	-- channel frequency adjustment

08d9			-- countdown timer before decrementing player energy

08e0-08ef		-- sprites to use for wall and floor per level
					Level	Wall		Floor
					1		1A			18
					2		1A			15
					3		16			15
					4L		17			19
					4U		17			19
					5		1C			1B
					6		1E			1D
					7		1F			19

900 to AFF		-- code

0b00 to 0b9f	-- map of current room

0ba0 to 0ba5	-- temporary storage when generating room layout
  0ba0			-- top and bottom rows
  0ba1			-- 2nd and penultimate rows
  0ba2			-- first and last column
  0ba3			-- 3rd, 4th, 7th and 8th rows
  0ba4			-- centre shape
  0ba5			-- exits (up is lowest 2 bits, down next, then right, left is highest bits. 
							0 indicates no exit, 1 a small exit, 2 is not used, 3 is large gap)

0ba6			-- 2 for world 1, 0 for 2nd world	

0bb0 to 0bbf	-- used during room generation

0bc0			-- current horizontal scroll position for moving left/right between 0 and 63
0bc1			-- current vertical scroll position for moving up/down between 0 and 19
0bc2			-- number of lives left
0bc3			-- 0 normally, 1 when being bounced backward by block
0bc4			-- holds direction
0bc5			-- row number during room generation, calculation result during fruit population
0bc6			-- current room being shown. 
0bc7			-- firing flag to enforce one shot per key press
0bc8			-- counter of shots before decrementing energy
0bc9			-- 0 if there's nothing in the recent monster list, &FF if there is
0bca			-- used as a counter during iteration of recent monster list

0bcc			-- last room number
0bcd			-- highest level achieved within 1st world, or FF in other worlds
0bce			-- countdown until monsters can move rooms. Starts at 5 and moves to FF
0bcf			-- 0 for keyboard input, &FF for joystick input (18e0 and 18e1 have details)

0bd0 - 0bd3		-- internal key number for directions left, right, up and down)
0bd4			-- internal key number for fire
bd5 bd6 bd7		-- score

bd9 bda bdb		-- ticks since start of game. bd9 is incremented every time the game loop has covered all animation slots

bdc				-- delay until game's main loop ends

0be0			-- 16 byte list of 2 byte data structures about monsters met in past rooms
					one byte is the monster id, the other is the delay remaining before monster changes rooms

0bf0-0bff		-- list of crystals
					1st byte is the room, 2nd byte is the tile number

0c00 to 0cff	-- room occupant information (16 slots of 16 bytes each)
					the player is always the first slot
	offset 0	-- type of object (0 slot is empty, 1 is monster, 4 crystal, 5 player whilst alive, 6 player inactive/dead, fe block, ff shot)
	offset 1	-- current tile number
	offset 2	-- previous/future tile number?
	offset 3	-- position between tiles (between 0 and 3)
	offset 4	-- direction (0 left, 1 right, 2 up, 3 down, 4 still)
	offset 5	-- contents of tile being occupied
	offset 6	-- when a monster, this is the monster id
				   for a shot, this is 1 for a player shot, 2 for a player or monster rebound, or x0 for a monster shot (indicating the animation slot that spawned the shot)
				   for the boulder, this is 3
	offset 7	-- toggle flag with &FF indicating moving at double speed, 0 at normal speed
	offset 8	-- not really used
	offset 9	-- the base index of the animation to show
	offset A	-- count of frames in animation
	offset B	-- time to show each frame
	offset C	-- current frame index into animation
	offset D	-- count remaining until frame changes
	offset E	-- energy					
	offset F	-- < 80 then counter to hatching, 
					80 static, 81 full chase, 82 patrol, 83 random, 84 cautious - pursuit,
					85 not used, 86 aggressive, 87 cautious afraid, 88 rolling

	-- static object data

0e00 to 0e7f	-- room containing static object or FF if empty (0e7f is for boulder)
0e80 to 0eff	-- tile number of static object or FF if not set/undefined (0eff is for boulder)
0f00 to 0f7f	-- type of object (12 wall, 20 free tile, 5a apple, 13 block)
0f80 to 0fff	-- energy of static object

1890			-- start of array of data structure that describes how to animate the monsters
	offset 0	-- index of animation (goes to 0c09, x)
	offset 1	-- frames in animation (goes to 0c0a, x)
	offset 2	-- &FF where on alternate frames the monster will move at double speed (0c07, x)
	offset 3	-- time to show each animation frame (0c0b, x)

No.	Base 	Total	Flitter	Time/	Name				Index
    Index	Frames	Flag	frame						Decimal
0	2A		2		No		3		ForceField			42
1	2C		2		No		3		thresher brown		44
2	2E		2		No		4		thresher cyan		46
3	30		3		No		2		rotafloater brown	48
4	3D		3		Yes		2		rotafloater cyan	61
5	33		2		No		3		killercube green	51
6	35		2		Yes		4		flitterbug red		53
7	37		2		Yes		4		flitterbug cyan		55
8	39		2		No		3		killercube red		57
9	3B		2		Yes		4		diamond demon		59
10	44		2		Yes		4		flitterbug brown	68
11	46		2		No		4		tiger moth			70
12	48		2		Yes		3		butterfly			72
13	4A		2		Yes		4		joker				74
14	42		2		No		3		crazy crawler		66
15	40		2		No		3		deathcube			64


18d0 - 18df		-- start of table with 6845 register adjustments (works backwards)
				R0 Nht	81	Horizontal total register (normally 3f) total display + non-displayed character time units minus 1
				R3		28	Sync width register (normally 4 in lower bit for horizontal, normally 2 in higher bit for vertical)
				R1 Nhd	40	Horizontal displayed register (normally 40) number of displayed characters per line
				R2		5a	Horizontal sync position register (normally 31) positioning on screen
				R6 Nvd	14	Vertical displayed register (normally 20) number of displayed character rows
				R7		1e	Vertical sync position register (normally 22)
				Rb		00	Cursor end register
				Rb		00

Effectively running in a mode 5 screen setup modified to have 256 pixels horizontally, and 160 pixels vertically, and rendered in the usual 4 colours

18e0 - 18e1		-- joystick input information

38bb - 38c2		-- start room numbers per level: 0 34 8 1c/1c 6b 47 73

-- room data

3e00 - 3e7f		-- controls line up of top and bottom rows
3e80 - 3eff		-- controls 2nd and penultimate lines
3f00 - 3f7f		-- controls line up of first and last column
3f80 - 3fff		-- controls 3rd, 4th, 7th and 8th rows
4000 - 407f		-- controls centre shape
4080 - 40ff		-- controls exits:
						up is bits 0 & 1 with 00 = no gap, 10 = 2 tiles wide, 11 = 4 tiles wide
						down is bits 2 & 3 with 00 = no gap, 10 = 2 tiles wide, 11 = 4 tiles wide
						right is bits 4 & 5 with 00 = no gap, 10 = 2 tiles wide, 11 = 4 tiles wide
						left is bits 6 & 7 with 00 = no gap, 10 = 2 tiles wide, 11 = 4 tiles wide

4420-442f		-- scores per crystal (in decimal)
4430-4437		-- start energy per level
4438-443f		-- energy from crystal

57c0-57ff		-- monster data for world 2 in sets of four bytes
					first byte is movement/behaviour
					second byte is type
					third is energy
					fourth is not used

0: 27 24 6E		cyan rotafloater,	rolling,		follows player,										110
1: A3 69 32		diamond demon,		placid,			follows player, shoots, lays eggs,					50
2: 25 26 64		red flitterbug,		attracted,		follows player,										100
3: 25 42 78		cyan thresher,		attracted,		follows player, lays eggs & mushrooms,				120
4: A7 28 96		red killer cube,	rolling,		follows player, shoots,								150
5: 25 66 6E		red flitterbug,		attracted,		follows player, lays eggs,							110
6: A3 69 32		diamond demon,		placid,			follows player, shoots, lays eggs,					50
7: 25 2E 28		crazy crawler,		attracted,		follows player,										40
8: 26 27 96		cyan flitterbug,	cautious,		follows player,										150
9: 45 0B 78		tiger moth,			attracted,		moves rooms,	shoots once shot, lays mushrooms,	120
A: 25 3A A0		brown flitterbug,	attracted,		follows player, splits,								160
B: 25 7A A0		brown flitterbug,	attracted,		follows player, splits, lays eggs,					160
C: A4 6C 78		butterfly,			full pursuit,	follows player, shoots, lays eggs,					120
D: A6 7D 78		joker,				cautious,		follows player, shoots, splits, lays eggs,			120
E: 25 2E 28		crazy crawler,		attracted,		follows player,										40
F: 26 02 64		cyan thresher,		cautious,		follows player, lays mushrooms,						100

5800			-- start of screen memory

memory mapping as follows:
Each sprite is 16 x 16 pixels and occupies 64 bytes
The first 16x16 sprite in the top-left corner is located at the following memory locations:
5800	5808	5810	5818	5820	5828	5830	5838
5801	5809	5811	5819	
5802	580a	5812	581a
5803	580b	
5804	580c
5805	580d
5806	580e
5807	580f	5817	581f	5827	582f	5837	583f
5a00	5a08	5a10	5a18	5a20	5a28	5a30	5a38
5a01
5a02
5a03
5a04
5a05
5a06
5a07	5a0f	5a17	5a1f	5a27	5a2f	5a37	5a3f

sounds

bounce block (17)
collect crystal (c, d)
collision with monster (6 + 0)
egg injured (11 + 7)
energy rise (2)
finish world (10 with overlap)
monster dies (b + 0)
monster enters (f)
monster hatches (5)
monster injured (7, b)
monster lays egg (e + e)
	monster lays mushroom (e)
	monster leaves (12)
monster shoots (9)
new level (16)
player dies (1, 13, 14, 15)
player injured (4)
player movement (a)
player shoots (8)
shot bounces (3)
	spawn diamon demon (18)
start new life (43)
static object injured (b)

	-- channel 0 
00		-- bang (05 0F 01 05 00)
01		-- background ticking upon death - jointly played (03 0F 01 82 00)
02		-- energy rise buzz (02 08 05 01 00)
03		-- shot bounce (02 0F 01 01 00)
04		-- clang eat mushroom/getting shot (05 0F 21 02 01)
05		-- hatch from egg (05 00 02 00 00)
	-- channels 1 to 3
06		-- poo downward slide high (collided with monster, played with bang) (32 0B 11 14 01)
07		-- poo downward slide low (shot monster without killing it - played with high pip) (C8 0C 11 0A 01)
08		-- player fire (10 0F 11 01 FF)
09		-- enemy fire (08 0D 11 00 03)
0a		-- player movement (30 07 04 00 00)
0b		-- high pip - shoot static object or other shot or injure monster/egg (played with shot) (0A 0F 14 01 00)
0c		-- get crystal - jointly played (C8 0F 31 32 F2)
0d		-- get crystal - jointly played (C9 0F 31 32 F2)
0e		-- lay mushroom/egg (played in duplicate for egg) (50 0F 31 00 F2)
0f		-- monster enters room (14 0A 14 01 FF)
10		-- finish world (FE 0F 11 C8 F3)
11		-- shot egg (played with high pip) (64 0B 11 0A 01)
12		-- monster leaves room - in inaccessible code (14 0A 14 01 01)
13		-- death slide - jointly played (32 0D 11 5A 01)
14		-- death slide - jointly played (34 0D 11 58 02)
15		-- death slide - jointly played (36 0D 11 35 03)
16		-- enter new level (FE 0F 11 11 F8)
17		-- bounce block (32 0B 11 00 FD)
18		-- spawn new diamond demon 26 0F 31 2D 0D
43		-- start new life (FF FE 0F 11 C8)


		-- retrieve data about specified room into 0BA0 - 0BA5
		-- on entry, A is the room number

0900 A8        TAY                      
0901 B9 00 3E  LDA 3E00,Y               -- controls line up of top and bottom rows
0904 8D A0 0B  STA 0BA0                 
0907 B9 80 3E  LDA 3E80,Y               -- controls 2nd and penultimate lines
090A 8D A1 0B  STA 0BA1                 
090D B9 00 3F  LDA 3F00,Y               -- controls line up of first and last column
0910 8D A2 0B  STA 0BA2                 
0913 B9 80 3F  LDA 3F80,Y               -- controls 3rd, 4th, 7th and 8th rows
0916 8D A3 0B  STA 0BA3                 
0919 B9 00 40  LDA 4000,Y               -- controls centre shape
091C 8D A4 0B  STA 0BA4                 

091F AD A6 0B  LDA 0BA6                 -- get world number
0922 F0 07     BEQ 092B                 -- branch if 2nd world
0924 B9 80 40  LDA 4080,Y               -- get exits for world 1
0927 8D A5 0B  STA 0BA5                 -- set exits
092A 60        RTS                      

092B B9 01 0D  LDA 0D01,Y               -- get exits for world 2
092E 4C 27 09  JMP 0927                 

		-- generate room layout
		-- on entry, 0BC6 contains the room number

0931 AD C6 0B  LDA 0BC6                 -- get current room
0934 20 00 09  JSR 0900                 -- get room data
0937 A9 09     LDA #09                  -- initialise loop counter for row number
0939 8D C5 0B  STA 0BC5                 

093C 20 E6 17  JSR 17E6                 -- generate row of room
093F AD C5 0B  LDA 0BC5                 -- get row number
0942 0A        ASL A                    
0943 0A        ASL A                    
0944 0A        ASL A                    
0945 0A        ASL A                    -- multiply row number by 16 to get start tile number
0946 18        CLC                      
0947 69 0F     ADC #0F                  -- calculate tile number at end of row
0949 AA        TAX                      
094A A0 0F     LDY #0F                  -- initialise loop counter for cell within row

094C B9 B0 0B  LDA 0BB0,Y               -- get tile for the cell Y in row 0BC5
094F 9D 00 0B  STA 0B00,X               -- copy room data to B00
0952 CA        DEX                      
0953 88        DEY                      
0954 10 F6     BPL 094C                 -- loop for next cell

0956 CE C5 0B  DEC 0BC5                 -- set previous row
0959 10 E1     BPL 093C                 -- loop for next row

095B 60        RTS                      

		-- draw the top level sprite for the specified tile
		-- on entry A is the tile number to draw

095C 85 88     STA 88                   
095E A0 00     LDY #00                  -- initialise loop counter
0960 B9 00 0C  LDA 0C00,Y               -- get occupant slot status
0963 F0 07     BEQ 096C                 -- if zero, then continue loop
0965 A5 88     LDA 88                   
0967 D9 01 0C  CMP 0C01,Y               -- get occupant's tile number
096A F0 1B     BEQ 0987                 -- if equal then branch to draw animation frame
096C 98        TYA                      
096D 18        CLC                      
096E 69 10     ADC #10                  -- move loop counter on
0970 A8        TAY                      
0971 D0 ED     BNE 0960                 -- continue loop

		-- no animation found at that tile, so draw static object

0973 A4 88     LDY 88                   -- restore tile number
0975 B9 00 0B  LDA 0B00,Y               -- get the tile contents
0978 48        PHA                      
0979 20 23 1C  JSR 1C23                 -- get address of sprite data
097C 68        PLA                      
097D C9 13     CMP #13                  -- 12 and below is wall
097F B0 03     BCS 0984                 -- branch if not wall
0981 4C 38 1D  JMP 1D38                 -- draw wall to screen
0984 4C 39 1C  JMP 1C39                 -- draw non-wall sprite to screen

0987 B9 09 0C  LDA 0C09,Y               -- get current frame of animation
098A 20 23 1C  JSR 1C23                 -- get address of sprite data
098D 4C 39 1C  JMP 1C39                 -- draw sprite to screen

		-- draw screen for moving down. Next room scrolls up from the bottom of the screen.

0990 A9 24     LDA #24                  -- always draw sprites...
0992 85 86     STA 86                   -- ...on row 36
0994 A2 00     LDX #00                  -- initialise loop counter

0996 86 88     STX 88                   
0998 20 61 13  JSR 1361                 -- scroll up two lines by adjusting screen start address
099B 20 50 1D  JSR 1D50                 -- process playing sounds
099E A6 88     LDX 88                   

09A0 8A        TXA                      
09A1 29 0F     AND #0F                  -- get low nibble of loop counter for x co-ordinate
09A3 0A        ASL A                    -- double it
09A4 0A        ASL A                    -- double it again
09A5 85 85     STA 85                   -- store x co-ordinate
09A7 8A        TXA                      -- set tile number to draw
09A8 20 5C 09  JSR 095C                 -- draw top level sprite at tile number, at 85 and 86
09AB E8        INX                      
09AC 8A        TXA                      
09AD 29 0F     AND #0F                  
09AF D0 EF     BNE 09A0                 -- loop to draw next tile

09B1 8A        TXA                      
09B2 C9 A0     CMP #A0                  
09B4 D0 E0     BNE 0996                 -- loop to scroll next line
09B6 60        RTS                      

		-- draw screen for moving up. Next room scrolls down from the top of the screen.

09B7 A9 00     LDA #00                  
09B9 85 86     STA 86                   
09BB A2 9F     LDX #9F                  -- initialise loop counter

09BD 86 88     STX 88                   
09BF 20 67 13  JSR 1367                 -- scroll screen up
09C2 20 50 1D  JSR 1D50                 -- process playing sounds
09C5 A6 88     LDX 88                   
09C7 8A        TXA                      
09C8 29 0F     AND #0F                  
09CA 0A        ASL A                    
09CB 0A        ASL A                    
09CC 85 85     STA 85                   
09CE 8A        TXA                      
09CF 20 5C 09  JSR 095C                 -- draw tile
09D2 CA        DEX                      
09D3 8A        TXA                      
09D4 29 0F     AND #0F                  
09D6 C9 0F     CMP #0F                  
09D8 D0 ED     BNE 09C7                 -- same row, continue loop

09DA 8A        TXA                      
09DB C9 FF     CMP #FF                  
09DD D0 DE     BNE 09BD                 
09DF 60        RTS                      

		-- draw screen for moving right. Next room scrolls in moving from the right to the left.

09E0 A9 3C     LDA #3C                  
09E2 85 85     STA 85                   
09E4 A2 00     LDX #00                  

09E6 86 88     STX 88                   
09E8 20 73 13  JSR 1373                 
09EB 20 50 1D  JSR 1D50                 
09EE A6 88     LDX 88                   
09F0 8A        TXA                      
09F1 29 F0     AND #F0                  
09F3 4A        LSR A                    
09F4 4A        LSR A                    
09F5 85 86     STA 86                   
09F7 8A        TXA                      
09F8 20 5C 09  JSR 095C                 
09FB 8A        TXA                      
09FC 18        CLC                      
09FD 69 10     ADC #10                  
09FF AA        TAX                      
0A00 C9 A0     CMP #A0                  
0A02 90 EC     BCC 09F0                 

0A04 29 0F     AND #0F                  
0A06 18        CLC                      
0A07 69 01     ADC #01                  
0A09 29 0F     AND #0F                  
0A0B AA        TAX                      
0A0C D0 D8     BNE 09E6                 
0A0E 60        RTS                      

		-- draw screen for moving left. Next room scrolls in moving from the left to the right.

0A0F A9 00     LDA #00                  
0A11 85 85     STA 85                   
0A13 A2 9F     LDX #9F                  

0A15 86 88     STX 88                   
0A17 20 6D 13  JSR 136D                 
0A1A 20 50 1D  JSR 1D50                 
0A1D A6 88     LDX 88                   
0A1F 8A        TXA                      
0A20 29 F0     AND #F0                  
0A22 4A        LSR A                    
0A23 4A        LSR A                    
0A24 85 86     STA 86                   
0A26 8A        TXA                      
0A27 20 5C 09  JSR 095C                 
0A2A 8A        TXA                      
0A2B 38        SEC                      
0A2C E9 10     SBC #10                  
0A2E AA        TAX                      
0A2F C9 A0     CMP #A0                  
0A31 90 EC     BCC 0A1F                 

0A33 18        CLC                      
0A34 69 9F     ADC #9F                  
0A36 AA        TAX                      
0A37 C9 8F     CMP #8F                  
0A39 D0 DA     BNE 0A15                 
0A3B 60        RTS                      

		-- analyse keyboard/joystick input

0A3C A5 7D     LDA 7D                   -- get keyboard delay
0A3E F0 03     BEQ 0A43                 
0A40 C6 7D     DEC 7D                   
0A42 60        RTS                      

0A43 A5 8C     LDA 8C                   -- get last key pressed
0A45 F0 03     BEQ 0A4A                 -- if zero nothing pressed, branch
0A47 20 5C 0A  JSR 0A5C                 -- match key/input to direction - no return if successful
0A4A A5 8D     LDA 8D                   -- get first key pressed
0A4C F0 03     BEQ 0A51                 -- if zero nothing pressed, branch
0A4E 20 5C 0A  JSR 0A5C                 -- match key/input to direction - no return if successful

0A51 A9 04     LDA #04                  
0A53 8D C4 0B  STA 0BC4                 -- set direction to still
0A56 A9 00     LDA #00                  
0A58 8D 0A 0C  STA 0C0A                 -- set count of animation frames to 0 (prevents animation)
0A5B 60        RTS                      

0A5C A0 03     LDY #03                  -- initialise loop counter
0A5E D9 D0 0B  CMP 0BD0,Y               -- is the key pressed one of the direction keys?
0A61 F0 04     BEQ 0A67                 -- branch if matched
0A63 88        DEY                      -- decrement loop counter
0A64 10 F8     BPL 0A5E                 -- continue loop
0A66 60        RTS                      -- no match found

0A67 C4 7E     CPY 7E                   -- is the direction the same as before?
0A69 F0 0B     BEQ 0A76                 -- branch if so
0A6B A9 0F     LDA #0F                  
0A6D 85 7D     STA 7D                   -- set keyboard delay 
0A6F A9 00     LDA #00                  
0A71 8D 0A 0C  STA 0C0A                 -- set count of animation frames to 0 (prevents animation)
0A74 F0 08     BEQ 0A7E                 -- always jump

0A76 A9 01     LDA #01                  
0A78 8D 0A 0C  STA 0C0A                 -- set count of animation frames to 1 (enables animation)
0A7B 8C C4 0B  STY 0BC4                 

0A7E 84 7E     STY 7E                   
0A80 98        TYA                      
0A81 0A        ASL A                    -- double it
0A82 18        CLC                      
0A83 69 22     ADC #22                  -- add &22 to get sprite number
0A85 8D 09 0C  STA 0C09                 -- set base animation sprite
0A88 68        PLA                      -- discard return address
0A89 68        PLA                      -- discard return address
0A8A 60        RTS                      -- return 

		-- send a byte to the sound chip

0A8B 48        PHA                      
0A8C A9 FF     LDA #FF                  
0A8E 78        SEI                      
0A8F 8D 43 FE  STA FE43                 
0A92 68        PLA                      
0A93 8D 41 FE  STA FE41                 
0A96 A9 00     LDA #00                  
0A98 8D 40 FE  STA FE40                 
0A9B 18        CLC                      
0A9C 69 00     ADC #00                  
0A9E 69 00     ADC #00                  
0AA0 A9 08     LDA #08                  
0AA2 8D 40 FE  STA FE40                 
0AA5 60        RTS                      
0AA6 EA        NOP                      

		-- Turns channel number into part of code to send to sound chip
		-- On entry, Y is the channel number
		-- On exit, A is the byte code, and &70 also has a copy

0AA7 98        TYA                      
0AA8 49 03     EOR #03                  
0AAA 0A        ASL A                    
0AAB 0A        ASL A                    
0AAC 0A        ASL A                    
0AAD 0A        ASL A                    
0AAE 0A        ASL A                    
0AAF 85 70     STA 70                   
0AB1 60        RTS                      

		-- Set sound frequency
		-- On entry, Y is the channel number

0AB2 20 A7 0A  JSR 0AA7                 -- turn channel number into number to output to sound chip
0AB5 98        TYA                      
0AB6 F0 16     BEQ 0ACE                 -- is it channel 0 then branch

			-- channels 1 to 3

0AB8 B9 C0 08  LDA 08C0,Y               -- get frequency data
0ABB 29 03     AND #03                  -- clear all but bits 0 and 1
0ABD 0A        ASL A                    -- shift left
0ABE 0A        ASL A                    -- shift left
0ABF 05 70     ORA 70                   -- merge with channel 
0AC1 09 80     ORA #80                  -- set bit 7
0AC3 20 F3 0A  JSR 0AF3                 -- send a byte to the sound chip
0AC6 B9 C0 08  LDA 08C0,Y               -- get frequency data
0AC9 4A        LSR A                    -- shift right
0ACA 4A        LSR A                    -- shift right
0ACB 4C F3 0A  JMP 0AF3                 -- send a byte to the sound chip

0ACE B9 C0 08  LDA 08C0,Y               -- get data
0AD1 05 70     ORA 70                   -- OR with channel code 
0AD3 09 80     ORA #80                  -- set bit 7
0AD5 4C F3 0A  JMP 0AF3                 -- send byte setting noise type to the sound chip

		-- Set sound volume
		-- On entry, Y is the channel number

0AD8 B9 C4 08  LDA 08C4,Y               -- get volume data
0ADB 48        PHA                      
0ADC 20 A7 0A  JSR 0AA7                 
0ADF 68        PLA                      
0AE0 29 0F     AND #0F                  
0AE2 38        SEC                      
0AE3 ED CD 08  SBC 08CD                 -- get sound enabled flag
0AE6 10 02     BPL 0AEA                 -- is enabled?
0AE8 A9 00     LDA #00                  -- set volume to 0

0AEA 49 0F     EOR #0F                  
0AEC 09 90     ORA #90                  
0AEE 05 70     ORA 70                   
0AF0 4C F3 0A  JMP 0AF3                 -- send a byte to the sound chip

0AF3 20 8B 0A  JSR 0A8B                 -- send a byte to the sound chip
0AF6 58        CLI                      
0AF7 60        RTS                      

		-- calculate the address of screen memory
		-- on entry X and Y indicate the logical co-ordinates required (x 0->63, y 0->19)
		-- 0BC0 and 0BC1 indicate the current offset due to hardware scrolling
		-- on exit 70 and 71 indicate the absolute memory address between &5800 and &7FFF
		-- each movement along X is an increase in 8 bytes, each movement along Y is an increase in 0x200 bytes

1100 8A        TXA                      
1101 18        CLC                      
1102 6D C0 0B  ADC 0BC0                 -- add X co-ord to current offset
1105 48        PHA                      
1106 10 04     BPL 110C                 -- result 0 or more? It always is.
1108 A9 FF     LDA #FF                  -- not used
110A D0 02     BNE 110E                 
110C A9 00     LDA #00                  
110E 85 71     STA 71                   
1110 68        PLA                      
1111 85 70     STA 70                   

1113 06 70     ASL 70                   
1115 26 71     ROL 71                   
1117 06 70     ASL 70                   
1119 26 71     ROL 71                   
111B 06 70     ASL 70                   
111D 26 71     ROL 71                   

111F 98        TYA                      
1120 18        CLC                      
1121 6D C1 0B  ADC 0BC1                 
1124 0A        ASL A                    
1125 18        CLC                      
1126 69 58     ADC #58                  -- &5800 is the start of screen memory for mode 5
1128 18        CLC                      
1129 65 71     ADC 71                   
112B 30 07     BMI 1134                 -- is high byte of address over &7F
112D C9 58     CMP #58                  
112F 90 09     BCC 113A                 
1131 85 71     STA 71                   
1133 60        RTS                      

1134 38        SEC                      -- reduce high byte of address to be between 58 and 7F
1135 E9 28     SBC #28                  
1137 85 71     STA 71                   
1139 60        RTS                      

113A 18        CLC                      -- increase high byte of address to be between 58 and 7F
113B 69 28     ADC #28                  
113D 85 71     STA 71                   
113F 60        RTS                      

		-- Set screen start address

1140 A2 00     LDX #00                  
1142 A0 00     LDY #00                  
1144 20 00 11  JSR 1100                 
1147 46 71     LSR 71                   -- halve 71 (carry gets bit 0)
1149 66 70     ROR 70                   -- halve 70 (carry flag goes to bit 7)
114B 46 71     LSR 71                   -- halve 71 (carry gets bit 0)
114D 66 70     ROR 70                   -- halve 70 (carry flag goes to bit 7)
114F 46 71     LSR 71                   -- halve 71 (carry gets bit 0)
1151 66 70     ROR 70                   -- halve 70 (carry flag goes to bit 7)
1153 78        SEI                      
1154 A9 0C     LDA #0C                  -- 6845 R12
1156 8D 00 FE  STA FE00                 -- high order of screen start address (6 bits)
1159 A5 71     LDA 71                   
115B 8D 01 FE  STA FE01                 -- write new value
115E A9 0D     LDA #0D                  -- 6845 R13
1160 8D 00 FE  STA FE00                 -- low order of screen start address (8 bits)
1163 A5 70     LDA 70                   
1165 8D 01 FE  STA FE01                 -- write new value
1168 58        CLI                      
1169 60        RTS                      

		-- for scrolling a new room down from the top of the screen

116A AD C1 0B  LDA 0BC1                 -- reduce high order value by 2
116D 38        SEC                      
116E E9 02     SBC #02                  
1170 8D C1 0B  STA 0BC1                 

		-- for scrolling a new room up from bottom of the screen

1173 AD C1 0B  LDA 0BC1                 -- increment high order value
1176 18        CLC                      
1177 69 01     ADC #01                  
1179 8D C1 0B  STA 0BC1                 
117C 30 0D     BMI 118B                 -- branch if result negative

117E C9 14     CMP #14                  
1180 90 06     BCC 1188                 -- okay

1182 38        SEC                      -- subtract 20 from the high order value
1183 E9 14     SBC #14                  
1185 8D C1 0B  STA 0BC1                 
1188 4C 40 11  JMP 1140                 -- set screen start address

118B 18        CLC                      -- add 20 to the high order value
118C 69 14     ADC #14                  
118E 8D C1 0B  STA 0BC1                 
1191 4C 88 11  JMP 1188                 

		-- for scrolling a new room in from left to right

1194 AD C0 0B  LDA 0BC0                 
1197 38        SEC                      
1198 E9 04     SBC #04                  
119A 8D C0 0B  STA 0BC0                 

		-- for scrolling a new room in from right to left

119D AD C0 0B  LDA 0BC0                 
11A0 18        CLC                      
11A1 69 02     ADC #02                  
11A3 8D C0 0B  STA 0BC0                 
11A6 48        PHA                      
11A7 29 3F     AND #3F                  
11A9 8D C0 0B  STA 0BC0                 -- horizontal offset is between 0 and 63
11AC 68        PLA                      
11AD 30 BB     BMI 116A                 -- gone negative so scroll down too
11AF C9 40     CMP #40                  
11B1 B0 C0     BCS 1173                 -- gone over so scroll up
11B3 4C 40 11  JMP 1140                 

		-- draw wall tile

11B6 98        TYA                      
11B7 4A        LSR A                    
11B8 A8        TAY                      
11B9 20 00 11  JSR 1100                 
11BC A5 72     LDA 72                   
11BE 48        PHA                      
11BF A5 80     LDA 80                   
11C1 48        PHA                      
11C2 A5 82     LDA 82                   
11C4 48        PHA                      
11C5 A9 04     LDA #04                  
11C7 85 77     STA 77                   
11C9 A2 00     LDX #00                  
11CB A0 00     LDY #00                  
11CD A9 10     LDA #10                  
11CF 85 78     STA 78                   
11D1 A1 72     LDA (72,X)               
11D3 D0 04     BNE 11D9                 
11D5 A1 82     LDA (82,X)               
11D7 D0 02     BNE 11DB                 
11D9 21 80     AND (80,X)               
11DB 91 70     STA (70),Y               
11DD E6 72     INC 72                   
11DF E6 80     INC 80                   
11E1 E6 82     INC 82                   
11E3 C8        INY                      
11E4 98        TYA                      
11E5 29 07     AND #07                  
11E7 D0 0E     BNE 11F7                 
11E9 A8        TAY                      
11EA E6 71     INC 71                   
11EC E6 71     INC 71                   
11EE 10 07     BPL 11F7                 
11F0 A5 71     LDA 71                   
11F2 38        SEC                      
11F3 E9 28     SBC #28                  
11F5 85 71     STA 71                   
11F7 C6 78     DEC 78                   
11F9 D0 D6     BNE 11D1                 
11FB A5 70     LDA 70                   
11FD 38        SEC                      
11FE E9 F8     SBC #F8                  
1200 85 70     STA 70                   
1202 A5 71     LDA 71                   
1204 E9 03     SBC #03                  
1206 C9 58     CMP #58                  
1208 B0 03     BCS 120D                 
120A 18        CLC                      
120B 69 28     ADC #28                  
120D 85 71     STA 71                   
120F C6 77     DEC 77                   
1211 D0 B8     BNE 11CB                 
1213 68        PLA                      
1214 85 82     STA 82                   
1216 68        PLA                      
1217 85 80     STA 80                   
1219 68        PLA                      
121A 85 72     STA 72                   
121C 60        RTS                      

		-- draw non-wall sprite to screen

121D 20 9C 12  JSR 129C                 
1220 98        TYA                      
1221 48        PHA                      
1222 4A        LSR A                    
1223 A8        TAY                      
1224 20 00 11  JSR 1100                 
1227 68        PLA                      
1228 0A        ASL A                    
1229 0A        ASL A                    
122A 29 04     AND #04                  
122C 85 76     STA 76                   
122E A5 72     LDA 72                   
1230 48        PHA                      
1231 A9 04     LDA #04                  
1233 85 77     STA 77                   
1235 A2 00     LDX #00                  
1237 A4 76     LDY 76                   
1239 A9 10     LDA #10                  
123B 85 78     STA 78                   
123D A1 72     LDA (72,X)               
123F D0 02     BNE 1243                 
1241 A1 74     LDA (74,X)               
1243 91 70     STA (70),Y               
1245 E6 72     INC 72                   
1247 E6 74     INC 74                   
1249 C8        INY                      
124A 98        TYA                      
124B 29 07     AND #07                  
124D D0 0E     BNE 125D                 
124F A8        TAY                      
1250 E6 71     INC 71                   
1252 E6 71     INC 71                   
1254 10 07     BPL 125D                 
1256 A5 71     LDA 71                   
1258 38        SEC                      
1259 E9 28     SBC #28                  
125B 85 71     STA 71                   
125D A5 74     LDA 74                   
125F 29 0F     AND #0F                  
1261 D0 07     BNE 126A                 
1263 A5 74     LDA 74                   
1265 38        SEC                      
1266 E9 10     SBC #10                  
1268 85 74     STA 74                   
126A C6 78     DEC 78                   
126C D0 CF     BNE 123D                 
126E A5 70     LDA 70                   
1270 38        SEC                      
1271 E9 F8     SBC #F8                  
1273 85 70     STA 70                   
1275 A5 71     LDA 71                   
1277 E9 03     SBC #03                  
1279 C9 58     CMP #58                  
127B B0 03     BCS 1280                 
127D 18        CLC                      
127E 69 28     ADC #28                  
1280 85 71     STA 71                   
1282 A5 74     LDA 74                   
1284 18        CLC                      
1285 69 10     ADC #10                  
1287 85 74     STA 74                   
1289 29 30     AND #30                  
128B D0 07     BNE 1294                 
128D A5 74     LDA 74                   
128F 38        SEC                      
1290 E9 40     SBC #40                  
1292 85 74     STA 74                   
1294 C6 77     DEC 77                   
1296 D0 9F     BNE 1237                 
1298 68        PLA                      
1299 85 72     STA 72                   
129B 60        RTS                      

		-- ???

129C 8A        TXA                      
129D 29 03     AND #03                  -- mask out lowest two bits
129F 0A        ASL A                    
12A0 0A        ASL A                    
12A1 0A        ASL A                    
12A2 0A        ASL A                    -- multiply by 16
12A3 85 74     STA 74                   

12A5 98        TYA                      
12A6 29 03     AND #03                  -- mask out lowest two bits
12A8 0A        ASL A                    
12A9 0A        ASL A                    -- multiply by 4
12AA 18        CLC                      
12AB 65 82     ADC 82                   
12AD 65 74     ADC 74                   
12AF 85 74     STA 74                   
12B1 A5 83     LDA 83                   
12B3 85 75     STA 75                   
12B5 60        RTS                      

		-- draw sprite with offset column (left or right of tile)

12B6 20 9C 12  JSR 129C                 
12B9 A5 7A     LDA 7A                   
12BB 85 7C     STA 7C                   
12BD 98        TYA                      
12BE 48        PHA                      
12BF 4A        LSR A                    
12C0 A8        TAY                      
12C1 20 00 11  JSR 1100                 
12C4 68        PLA                      
12C5 0A        ASL A                    
12C6 0A        ASL A                    
12C7 29 04     AND #04                  
12C9 A8        TAY                      
12CA A9 10     LDA #10                  
12CC 85 78     STA 78                   
12CE A2 00     LDX #00                  
12D0 A5 74     LDA 74                   
12D2 29 3F     AND #3F                  
12D4 05 79     ORA 79                   
12D6 85 7B     STA 7B                   
12D8 A1 7B     LDA (7B,X)               
12DA D0 02     BNE 12DE                 
12DC A1 74     LDA (74,X)               
12DE 91 70     STA (70),Y               
12E0 E6 74     INC 74                   
12E2 C8        INY                      
12E3 98        TYA                      
12E4 29 07     AND #07                  
12E6 D0 0E     BNE 12F6                 
12E8 A8        TAY                      
12E9 E6 71     INC 71                   
12EB E6 71     INC 71                   
12ED 10 07     BPL 12F6                 
12EF A5 71     LDA 71                   
12F1 38        SEC                      
12F2 E9 28     SBC #28                  
12F4 85 71     STA 71                   
12F6 A5 74     LDA 74                   
12F8 29 0F     AND #0F                  
12FA D0 07     BNE 1303                 
12FC A5 74     LDA 74                   
12FE 38        SEC                      
12FF E9 10     SBC #10                  
1301 85 74     STA 74                   
1303 C6 78     DEC 78                   
1305 D0 C9     BNE 12D0                 
1307 60        RTS                      

		-- draw sprite with offset row (up or down of tile)

1308 20 9C 12  JSR 129C                 
130B A5 7A     LDA 7A                   
130D 85 7C     STA 7C                   
130F 98        TYA                      
1310 48        PHA                      
1311 4A        LSR A                    
1312 A8        TAY                      
1313 20 00 11  JSR 1100                 
1316 68        PLA                      
1317 0A        ASL A                    
1318 0A        ASL A                    
1319 29 04     AND #04                  
131B 18        CLC                      
131C 65 70     ADC 70                   
131E 85 70     STA 70                   
1320 A2 04     LDX #04                  
1322 A5 74     LDA 74                   
1324 29 3F     AND #3F                  
1326 05 79     ORA 79                   
1328 85 7B     STA 7B                   
132A A0 03     LDY #03                  
132C B1 7B     LDA (7B),Y               
132E D0 02     BNE 1332                 
1330 B1 74     LDA (74),Y               
1332 91 70     STA (70),Y               
1334 88        DEY                      
1335 10 F5     BPL 132C                 
1337 A5 70     LDA 70                   
1339 18        CLC                      
133A 69 08     ADC #08                  
133C 85 70     STA 70                   
133E 90 0B     BCC 134B                 
1340 E6 71     INC 71                   
1342 10 07     BPL 134B                 
1344 A5 71     LDA 71                   
1346 38        SEC                      
1347 E9 28     SBC #28                  
1349 85 71     STA 71                   
134B A5 74     LDA 74                   
134D 18        CLC                      
134E 69 10     ADC #10                  
1350 85 74     STA 74                   
1352 29 30     AND #30                  
1354 D0 07     BNE 135D                 
1356 A5 74     LDA 74                   
1358 38        SEC                      
1359 E9 40     SBC #40                  
135B 85 74     STA 74                   
135D CA        DEX                      
135E D0 C2     BNE 1322                 
1360 60        RTS                      

		-- scrolling for moving down

1361 20 73 11  JSR 1173                 
1364 4C 73 11  JMP 1173                 

		-- scrolling for moving up

1367 20 6A 11  JSR 116A                 
136A 4C 6A 11  JMP 116A                 

		-- scrolling for moving left

136D 20 94 11  JSR 1194                 
1370 4C 94 11  JMP 1194                 

		-- scrolling for moving right

1373 20 9D 11  JSR 119D                 
1376 4C 9D 11  JMP 119D                 

		-- ???

1379 A5 70     LDA 70                   
137B 38        SEC                      
137C E9 F8     SBC #F8                  
137E 85 00     STA 00                   
1380 85 73     STA 73                   
1382 A9 00     LDA #00                  
1384 85 72     STA 72                   
1386 46 73     LSR 73                   
1388 66 72     ROR 72                   
138A 46 73     LSR 73                   
138C 66 72     ROR 72                   
138E A5 73     LDA 73                   
1390 18        CLC                      
1391 69 3F     ADC #3F                  
1393 85 73     STA 73                   
1395 60        RTS                      
1396 8D 07 0C  STA 0C07                 
1399 98        TYA                      
139A 0A        ASL A                    
139B 0A        ASL A                    
139C 0A        ASL A                    
139D 0A        ASL A                    
139E 18        CLC                      
139F 6D 07 0C  ADC 0C07                 
13A2 AA        TAX                      
13A3 60        RTS                      
13A4 98        TYA                      
13A5 48        PHA                      
13A6 8A        TXA                      
13A7 48        PHA                      
13A8 AD 09 0C  LDA 0C09                 
13AB 0A        ASL A                    
13AC 0A        ASL A                    
13AD AA        TAX                      
13AE AD 0A 0C  LDA 0C0A                 
13B1 0A        ASL A                    
13B2 0A        ASL A                    
13B3 A8        TAY                      
13B4 20 B6 11  JSR 11B6                 
13B7 68        PLA                      
13B8 AA        TAX                      
13B9 68        PLA                      
13BA A8        TAY                      
13BB 60        RTS                      
13BC A9 0F     LDA #0F                  
13BE 8D 09 0C  STA 0C09                 
13C1 20 96 13  JSR 1396                 
13C4 BD 00 0B  LDA 0B00,X               
13C7 20 80 13  JSR 1380                 
13CA 20 A4 13  JSR 13A4                 
13CD CA        DEX                      
13CE CE 09 0C  DEC 0C09                 
13D1 10 F1     BPL 13C4                 
13D3 60        RTS                      

		-- clear out BB0 to BBF area with &20

13D4 A2 0F     LDX #0F                  
13D6 A9 20     LDA #20                  
13D8 9D B0 0B  STA 0BB0,X               
13DB CA        DEX                      
13DC 10 FA     BPL 13D8                 
13DE 60        RTS                      

13DF 9D B0 0B  STA 0BB0,X               
13E2 45 71     EOR 71                   
13E4 CA        DEX                      
13E5 E4 70     CPX 70                   
13E7 D0 F6     BNE 13DF                 
13E9 60        RTS                      

13EA 8D B4 0B  STA 0BB4                 
13ED 8D BC 0B  STA 0BBC                 
13F0 45 71     EOR 71                   
13F2 8D B3 0B  STA 0BB3                 
13F5 8D BB 0B  STA 0BBB                 
13F8 60        RTS                      

13F9 F0 1A     BEQ 1415                 
13FB A2 20     LDX #20                  
13FD 8E B7 0B  STX 0BB7                 
1400 C9 02     CMP #02                  
1402 90 11     BCC 1415                 
1404 A2 20     LDX #20                  
1406 8E B8 0B  STX 0BB8                 
1409 C9 03     CMP #03                  
140B D0 08     BNE 1415                 
140D A2 20     LDX #20                  
140F 8E B9 0B  STX 0BB9                 
1412 8E B6 0B  STX 0BB6                 
1415 60        RTS                      

1416 AD A2 0B  LDA 0BA2                 
1419 29 08     AND #08                  
141B F0 4C     BEQ 1469                 
141D AD A2 0B  LDA 0BA2                 
1420 29 07     AND #07                  
1422 0A        ASL A                    
1423 0A        ASL A                    
1424 A8        TAY                      
1425 B9 38 18  LDA 1838,Y               
1428 8D B0 0B  STA 0BB0                 
142B B9 39 18  LDA 1839,Y               
142E 8D BF 0B  STA 0BBF                 
1431 60        RTS                      
1432 AD A2 0B  LDA 0BA2                 
1435 29 08     AND #08                  
1437 F0 30     BEQ 1469                 
1439 AD A2 0B  LDA 0BA2                 
143C 29 07     AND #07                  
143E 0A        ASL A                    
143F 0A        ASL A                    
1440 A8        TAY                      
1441 B9 3A 18  LDA 183A,Y               
1444 8D B0 0B  STA 0BB0                 
1447 B9 3B 18  LDA 183B,Y               
144A 8D BF 0B  STA 0BBF                 
144D 60        RTS                      
144E AD A2 0B  LDA 0BA2                 
1451 29 80     AND #80                  
1453 F0 14     BEQ 1469                 
1455 AD A2 0B  LDA 0BA2                 
1458 29 70     AND #70                  
145A 4A        LSR A                    
145B 4A        LSR A                    
145C A8        TAY                      
145D B9 3A 18  LDA 183A,Y               
1460 8D B1 0B  STA 0BB1                 
1463 B9 3B 18  LDA 183B,Y               
1466 8D BE 0B  STA 0BBE                 
1469 60        RTS                      
146A AD A2 0B  LDA 0BA2                 
146D 29 80     AND #80                  
146F F0 F8     BEQ 1469                 
1471 AD A2 0B  LDA 0BA2                 
1474 29 70     AND #70                  
1476 4A        LSR A                    
1477 4A        LSR A                    
1478 A8        TAY                      
1479 B9 38 18  LDA 1838,Y               
147C 8D B1 0B  STA 0BB1                 
147F B9 39 18  LDA 1839,Y               
1482 8D BE 0B  STA 0BBE                 
1485 60        RTS                      
1486 F0 E1     BEQ 1469                 
1488 0A        ASL A                    
1489 A8        TAY                      
148A B9 58 18  LDA 1858,Y               
148D 8D B7 0B  STA 0BB7                 
1490 B9 59 18  LDA 1859,Y               
1493 8D B8 0B  STA 0BB8                 
1496 60        RTS                      
1497 F0 D0     BEQ 1469                 
1499 0A        ASL A                    
149A A8        TAY                      
149B B9 60 18  LDA 1860,Y               
149E 8D B7 0B  STA 0BB7                 
14A1 B9 61 18  LDA 1861,Y               
14A4 8D B8 0B  STA 0BB8                 
14A7 60        RTS                      
14A8 48        PHA                      
14A9 A2 06     LDX #06                  
14AB A9 01     LDA #01                  
14AD 85 70     STA 70                   
14AF D0 07     BNE 14B8                 
14B1 48        PHA                      
14B2 A2 0D     LDX #0D                  
14B4 A9 08     LDA #08                  
14B6 85 70     STA 70                   
14B8 A9 00     LDA #00                  
14BA 85 71     STA 71                   
14BC 68        PLA                      
14BD F0 06     BEQ 14C5                 
14BF 18        CLC                      
14C0 69 11     ADC #11                  
14C2 20 DF 13  JSR 13DF                 
14C5 60        RTS                      
14C6 A2 0B     LDX #0B                  
14C8 A9 03     LDA #03                  
14CA 85 70     STA 70                   
14CC A9 00     LDA #00                  
14CE 85 71     STA 71                   
14D0 A9 12     LDA #12                  
14D2 4C DF 13  JMP 13DF                 
14D5 A9 12     LDA #12                  
14D7 8D BB 0B  STA 0BBB                 
14DA 8D B4 0B  STA 0BB4                 
14DD 60        RTS                      
14DE F0 E5     BEQ 14C5                 
14E0 C9 C0     CMP #C0                  
14E2 F0 F1     BEQ 14D5                 
14E4 D0 E0     BNE 14C6                 
14E6 F0 DD     BEQ 14C5                 
14E8 C9 40     CMP #40                  
14EA F0 DA     BEQ 14C6                 
14EC D0 E7     BNE 14D5                 
14EE F0 D5     BEQ 14C5                 
14F0 D0 D4     BNE 14C6                 
14F2 C9 C0     CMP #C0                  
14F4 D0 CF     BNE 14C5                 
14F6 A9 20     LDA #20                  
14F8 9D B0 0B  STA 0BB0,X               
14FB 9D B1 0B  STA 0BB1,X               
14FE 60        RTS                      
14FF F0 C4     BEQ 14C5                 
1501 A9 20     LDA #20                  
1503 9D B0 0B  STA 0BB0,X               
1506 9D B1 0B  STA 0BB1,X               
1509 60        RTS                      
150A F0 B9     BEQ 14C5                 
150C C9 40     CMP #40                  
150E F0 B5     BEQ 14C5                 
1510 A9 20     LDA #20                  
1512 9D B0 0B  STA 0BB0,X               
1515 9D B1 0B  STA 0BB1,X               
1518 60        RTS                      
1519 F0 EF     BEQ 150A                 
151B 0A        ASL A                    
151C A8        TAY                      
151D B9 58 18  LDA 1858,Y               
1520 8D B2 0B  STA 0BB2                 
1523 8D B9 0B  STA 0BB9                 
1526 B9 59 18  LDA 1859,Y               
1529 8D B6 0B  STA 0BB6                 
152C 8D BD 0B  STA 0BBD                 
152F A2 02     LDX #02                  
1531 A9 12     LDA #12                  
1533 9D B3 0B  STA 0BB3,X               
1536 9D BA 0B  STA 0BBA,X               
1539 CA        DEX                      
153A 10 F7     BPL 1533                 
153C 60        RTS                      
153D F0 CB     BEQ 150A                 
153F 0A        ASL A                    
1540 A8        TAY                      
1541 B9 60 18  LDA 1860,Y               
1544 8D B2 0B  STA 0BB2                 
1547 8D B9 0B  STA 0BB9                 
154A B9 61 18  LDA 1861,Y               
154D 8D B6 0B  STA 0BB6                 
1550 8D BD 0B  STA 0BBD                 
1553 10 DA     BPL 152F                 

		-- indexed entry point 0

1555 20 D4 13  JSR 13D4                 
1558 A9 FF     LDA #FF                  
155A 85 70     STA 70                   
155C A2 0F     LDX #0F                  
155E AD A0 0B  LDA 0BA0                 
1561 29 08     AND #08                  
1563 F0 22     BEQ 1587                 
1565 AD A0 0B  LDA 0BA0                 
1568 29 70     AND #70                  
156A 4A        LSR A                    
156B 4A        LSR A                    
156C 4A        LSR A                    
156D A8        TAY                      
156E B9 21 18  LDA 1821,Y               
1571 85 71     STA 71                   
1573 B9 20 18  LDA 1820,Y               
1576 20 DF 13  JSR 13DF                 
1579 2C A0 0B  BIT 0BA0                 
157C 10 09     BPL 1587                 
157E A9 00     LDA #00                  
1580 85 71     STA 71                   
1582 A9 12     LDA #12                  
1584 20 EA 13  JSR 13EA                 
1587 AD A0 0B  LDA 0BA0                 
158A 29 04     AND #04                  
158C F0 12     BEQ 15A0                 
158E AD A0 0B  LDA 0BA0                 
1591 29 03     AND #03                  
1593 A8        TAY                      
1594 B9 30 18  LDA 1830,Y               
1597 8D B0 0B  STA 0BB0                 
159A B9 34 18  LDA 1834,Y               
159D 8D BF 0B  STA 0BBF                 
15A0 AD A5 0B  LDA 0BA5                 
15A3 29 03     AND #03                  
15A5 4C F9 13  JMP 13F9                 

		-- indexed entry point 1

15A8 20 D4 13  JSR 13D4                 
15AB A9 FF     LDA #FF                  
15AD 85 70     STA 70                   
15AF A2 0F     LDX #0F                  
15B1 AD A1 0B  LDA 0BA1                 
15B4 29 08     AND #08                  
15B6 F0 1F     BEQ 15D7                 
15B8 AD A1 0B  LDA 0BA1                 
15BB 29 70     AND #70                  
15BD 4A        LSR A                    
15BE 4A        LSR A                    
15BF 4A        LSR A                    
15C0 A8        TAY                      
15C1 B9 21 18  LDA 1821,Y               
15C4 85 71     STA 71                   
15C6 B9 20 18  LDA 1820,Y               
15C9 2C A1 0B  BIT 0BA1                 
15CC 30 06     BMI 15D4                 
15CE 20 DF 13  JSR 13DF                 
15D1 4C D7 15  JMP 15D7                 
15D4 20 EA 13  JSR 13EA                 
15D7 AD A1 0B  LDA 0BA1                 
15DA 29 04     AND #04                  
15DC F0 12     BEQ 15F0                 
15DE AD A1 0B  LDA 0BA1                 
15E1 29 03     AND #03                  
15E3 A8        TAY                      
15E4 B9 30 18  LDA 1830,Y               
15E7 8D B1 0B  STA 0BB1                 
15EA B9 34 18  LDA 1834,Y               
15ED 8D BE 0B  STA 0BBE                 
15F0 AD A5 0B  LDA 0BA5                 
15F3 29 03     AND #03                  
15F5 20 F9 13  JSR 13F9                 
15F8 4C 16 14  JMP 1416                 

		-- indexed entry point 2

15FB 20 D4 13  JSR 13D4                 
15FE 20 32 14  JSR 1432                 
1601 20 4E 14  JSR 144E                 
1604 AD A4 0B  LDA 0BA4                 
1607 4A        LSR A                    
1608 4A        LSR A                    
1609 29 03     AND #03                  
160B 20 86 14  JSR 1486                 
160E AD A3 0B  LDA 0BA3                 
1611 29 03     AND #03                  
1613 20 A8 14  JSR 14A8                 
1616 AD A3 0B  LDA 0BA3                 
1619 4A        LSR A                    
161A 4A        LSR A                    
161B 29 03     AND #03                  
161D 20 B1 14  JSR 14B1                 
1620 AD A4 0B  LDA 0BA4                 
1623 29 C0     AND #C0                  
1625 4C DE 14  JMP 14DE                 

		-- indexed entry point 3

1628 20 D4 13  JSR 13D4                 
162B 20 16 14  JSR 1416                 
162E 20 6A 14  JSR 146A                 
1631 AD A4 0B  LDA 0BA4                 
1634 4A        LSR A                    
1635 4A        LSR A                    
1636 29 03     AND #03                  
1638 20 97 14  JSR 1497                 
163B AD A3 0B  LDA 0BA3                 
163E 29 03     AND #03                  
1640 20 A8 14  JSR 14A8                 
1643 AD A3 0B  LDA 0BA3                 
1646 4A        LSR A                    
1647 4A        LSR A                    
1648 29 03     AND #03                  
164A 20 B1 14  JSR 14B1                 
164D AD A4 0B  LDA 0BA4                 
1650 29 C0     AND #C0                  
1652 20 E6 14  JSR 14E6                 
1655 A2 00     LDX #00                  
1657 AD A5 0B  LDA 0BA5                 
165A 29 C0     AND #C0                  
165C 20 F2 14  JSR 14F2                 
165F A2 0E     LDX #0E                  
1661 AD A5 0B  LDA 0BA5                 
1664 0A        ASL A                    
1665 0A        ASL A                    
1666 29 C0     AND #C0                  
1668 4C F2 14  JMP 14F2                 

		 -- indexed entry point 4

166B 20 D4 13  JSR 13D4                 
166E 20 32 14  JSR 1432                 
1671 20 4E 14  JSR 144E                 
1674 AD A4 0B  LDA 0BA4                 
1677 29 03     AND #03                  
1679 20 19 15  JSR 1519                 
167C AD A4 0B  LDA 0BA4                 
167F 4A        LSR A                    
1680 4A        LSR A                    
1681 4A        LSR A                    
1682 4A        LSR A                    
1683 29 03     AND #03                  
1685 20 86 14  JSR 1486                 
1688 AD A4 0B  LDA 0BA4                 
168B 29 C0     AND #C0                  
168D 20 E6 14  JSR 14E6                 
1690 A2 00     LDX #00                  
1692 AD A5 0B  LDA 0BA5                 
1695 29 C0     AND #C0                  
1697 20 FF 14  JSR 14FF                 
169A A2 0E     LDX #0E                  
169C AD A5 0B  LDA 0BA5                 
169F 0A        ASL A                    
16A0 0A        ASL A                    
16A1 29 C0     AND #C0                  
16A3 4C FF 14  JMP 14FF                 

		-- indexed entry point 5

16A6 20 D4 13  JSR 13D4                 
16A9 20 16 14  JSR 1416                 
16AC 20 6A 14  JSR 146A                 
16AF AD A4 0B  LDA 0BA4                 
16B2 29 03     AND #03                  
16B4 20 3D 15  JSR 153D                 
16B7 AD A4 0B  LDA 0BA4                 
16BA 4A        LSR A                    
16BB 4A        LSR A                    
16BC 4A        LSR A                    
16BD 4A        LSR A                    
16BE 29 03     AND #03                  
16C0 20 97 14  JSR 1497                 
16C3 AD A4 0B  LDA 0BA4                 
16C6 29 C0     AND #C0                  
16C8 20 E6 14  JSR 14E6                 
16CB A2 00     LDX #00                  
16CD AD A5 0B  LDA 0BA5                 
16D0 29 C0     AND #C0                  
16D2 20 0A 15  JSR 150A                 
16D5 A2 0E     LDX #0E                  
16D7 AD A5 0B  LDA 0BA5                 
16DA 0A        ASL A                    
16DB 0A        ASL A                    
16DC 29 C0     AND #C0                  
16DE 4C 0A 15  JMP 150A                 

		-- indexed entry point 6

16E1 20 D4 13  JSR 13D4                 
16E4 20 32 14  JSR 1432                 
16E7 20 4E 14  JSR 144E                 
16EA AD A4 0B  LDA 0BA4                 
16ED 4A        LSR A                    
16EE 4A        LSR A                    
16EF 29 03     AND #03                  
16F1 20 86 14  JSR 1486                 
16F4 AD A3 0B  LDA 0BA3                 
16F7 4A        LSR A                    
16F8 4A        LSR A                    
16F9 4A        LSR A                    
16FA 4A        LSR A                    
16FB 48        PHA                      
16FC 29 03     AND #03                  
16FE 20 A8 14  JSR 14A8                 
1701 68        PLA                      
1702 4A        LSR A                    
1703 4A        LSR A                    
1704 29 03     AND #03                  
1706 20 B1 14  JSR 14B1                 
1709 4C 4D 16  JMP 164D                 
		
		-- indexed entry point 7

170C 20 D4 13  JSR 13D4                 
170F 20 16 14  JSR 1416                 
1712 20 6A 14  JSR 146A                 
1715 AD A4 0B  LDA 0BA4                 
1718 4A        LSR A                    
1719 4A        LSR A                    
171A 29 03     AND #03                  
171C 20 97 14  JSR 1497                 
171F AD A3 0B  LDA 0BA3                 
1722 4A        LSR A                    
1723 4A        LSR A                    
1724 4A        LSR A                    
1725 4A        LSR A                    
1726 48        PHA                      
1727 29 03     AND #03                  
1729 20 A8 14  JSR 14A8                 
172C 68        PLA                      
172D 4A        LSR A                    
172E 4A        LSR A                    
172F 29 03     AND #03                  
1731 20 B1 14  JSR 14B1                 
1734 AD A4 0B  LDA 0BA4                 
1737 29 C0     AND #C0                  
1739 4C EE 14  JMP 14EE                 

		-- indexed entry point 8

173C 20 D4 13  JSR 13D4                 
173F A9 FF     LDA #FF                  
1741 85 70     STA 70                   
1743 A2 0F     LDX #0F                  
1745 AD A1 0B  LDA 0BA1                 
1748 29 08     AND #08                  
174A F0 1F     BEQ 176B                 
174C AD A1 0B  LDA 0BA1                 
174F 29 70     AND #70                  
1751 4A        LSR A                    
1752 4A        LSR A                    
1753 4A        LSR A                    
1754 A8        TAY                      
1755 B9 69 18  LDA 1869,Y               
1758 85 71     STA 71                   
175A B9 68 18  LDA 1868,Y               
175D 2C A1 0B  BIT 0BA1                 
1760 30 06     BMI 1768                 
1762 20 DF 13  JSR 13DF                 
1765 4C 6B 17  JMP 176B                 
1768 20 EA 13  JSR 13EA                 
176B AD A1 0B  LDA 0BA1                 
176E 29 04     AND #04                  
1770 F0 12     BEQ 1784                 
1772 AD A1 0B  LDA 0BA1                 
1775 29 03     AND #03                  
1777 A8        TAY                      
1778 B9 78 18  LDA 1878,Y               
177B 8D B1 0B  STA 0BB1                 
177E B9 7C 18  LDA 187C,Y               
1781 8D BE 0B  STA 0BBE                 
1784 AD A5 0B  LDA 0BA5                 
1787 4A        LSR A                    
1788 4A        LSR A                    
1789 29 03     AND #03                  
178B 20 F9 13  JSR 13F9                 
178E 4C 32 14  JMP 1432                 

		-- indexed entry point 9

1791 20 D4 13  JSR 13D4                 -- set bb0 to bbf to &20
1794 A9 FF     LDA #FF                  
1796 85 70     STA 70                   
1798 A2 0F     LDX #0F                  
179A AD A0 0B  LDA 0BA0                 -- get what to do with top & bottom lines of room
179D 29 08     AND #08                  
179F F0 22     BEQ 17C3                 -- branch if bit 3 not set
17A1 AD A0 0B  LDA 0BA0                 
17A4 29 70     AND #70                  -- get bits 4 5 and 6
17A6 4A        LSR A                    
17A7 4A        LSR A                    
17A8 4A        LSR A                    
17A9 A8        TAY                      
17AA B9 69 18  LDA 1869,Y               
17AD 85 71     STA 71                   
17AF B9 68 18  LDA 1868,Y               
17B2 20 DF 13  JSR 13DF                 
17B5 2C A0 0B  BIT 0BA0                 
17B8 10 09     BPL 17C3                 
17BA A9 00     LDA #00                  
17BC 85 71     STA 71                   
17BE A9 12     LDA #12                  
17C0 20 EA 13  JSR 13EA                 
17C3 AD A0 0B  LDA 0BA0                 
17C6 29 04     AND #04                  
17C8 F0 12     BEQ 17DC                 
17CA AD A0 0B  LDA 0BA0                 
17CD 29 03     AND #03                  
17CF A8        TAY                      
17D0 B9 78 18  LDA 1878,Y               
17D3 8D B0 0B  STA 0BB0                 
17D6 B9 7C 18  LDA 187C,Y               
17D9 8D BF 0B  STA 0BBF                 
17DC AD A5 0B  LDA 0BA5                 
17DF 4A        LSR A                    
17E0 4A        LSR A                    
17E1 29 03     AND #03                  
17E3 4C F9 13  JMP 13F9                 

		-- Generate a row of a room by calling one of the 10 routines above
		-- on entry 0BC5 indicates the row number

17E6 AD C5 0B  LDA 0BC5                 -- get row number
17E9 0A        ASL A                    -- double it
17EA A8        TAY                      
17EB B9 00 18  LDA 1800,Y               -- get address of respective routine
17EE 85 70     STA 70                   
17F0 B9 01 18  LDA 1801,Y               
17F3 85 71     STA 71                   
17F5 6C 70 00  JMP (0070)               -- jump to routine


1890 to 18e1 assorted data documented at the top of this document


		-- update animation frame for monster
		-- on entry, X is the index into C00 identifying the monster to update

1900 A9 FF     LDA #FF                  
1902 85 88     STA 88                   
1904 85 89     STA 89                   
1906 DE 0D 0C  DEC 0C0D,X               -- decrement count until animation frame needs to change
1909 10 11     BPL 191C                 -- if not there yet, branch onwards
190B BD 0B 0C  LDA 0C0B,X               -- get time to show each frame
190E 9D 0D 0C  STA 0C0D,X               -- reset counter
1911 DE 0C 0C  DEC 0C0C,X               -- decrement index of frame being shown
1914 10 06     BPL 191C                 -- not yet out of range so branch over
1916 BD 0A 0C  LDA 0C0A,X               -- get number of frames in animation
1919 9D 0C 0C  STA 0C0C,X               -- reset current frame being shown

191C BD 0F 0C  LDA 0C0F,X               -- get monster movement (egg = <80)
191F C9 80     CMP #80                 
1921 B0 53     BCS 1976                 -- jump to move monster
1923 DE 0F 0C  DEC 0C0F,X               -- decrement delay counter
1926 10 4E     BPL 1976                 -- always jump to move monster (will never be negative)

		-- draw background tiles behind monster/player

1928 A9 00     LDA #00                  
192A 9D 00 0C  STA 0C00,X               -- reset monster slot
192D BD 01 0C  LDA 0C01,X               -- get tile number
1930 20 83 1C  JSR 1C83                 -- seperate into x & y
1933 BD 03 0C  LDA 0C03,X               -- get position between frames
1936 F0 2C     BEQ 1964                 -- if zero, then positioned dead on frame so branch over
1938 EA        NOP                      
1939 EA        NOP                      
193A BD 04 0C  LDA 0C04,X               -- get direction
193D 49 01     EOR #01                  -- reverse it
193F BC 03 0C  LDY 0C03,X               -- get position between frames
1942 C0 03     CPY #03                  -- compare with 3
1944 90 03     BCC 1949                 -- when 2 or less then branch over next line
1946 20 67 1C  JSR 1C67                 -- adjust x & y to get the tile we're moving away from

1949 20 90 1C  JSR 1C90                 -- combine x & y back to tile number
194C 48        PHA                      -- save tile number
194D A8        TAY                      
194E 20 9D 1C  JSR 1C9D                 -- get screen co-ordinates for tile
1951 B9 00 0B  LDA 0B00,Y               -- get contents of room at tile position
1954 20 23 1C  JSR 1C23                 -- get sprite index to render
1957 20 39 1C  JSR 1C39                 -- draw sprite to screen

195A 68        PLA                      -- restore tile number (could be previous tile, could be current tile)
195B 20 83 1C  JSR 1C83                 -- seperate into x & y
195E BD 04 0C  LDA 0C04,X               -- get direction
1961 20 67 1C  JSR 1C67                 -- adjust x & y according to the direction of travel
1964 20 90 1C  JSR 1C90                 -- combine x & y back to a tile number
1967 48        PHA                      -- save the tile number
1968 A8        TAY                      
1969 B9 00 0B  LDA 0B00,Y               -- get the room contents for that tile
196C 20 23 1C  JSR 1C23                 -- get the sprite index into &73
196F 68        PLA                      -- get back tile number
1970 20 9D 1C  JSR 1C9D                 -- get screen co-ordinates for the tile
1973 4C 39 1C  JMP 1C39                 -- draw sprite to screen

		-- move monster

1976 BD 07 0C  LDA 0C07,X               -- get flag for double speed movement
1979 30 08     BMI 1983                 -- branch if currently negative
197B DE 08 0C  DEC 0C08,X               -- set to &FF
197E 30 6C     BMI 19EC                 -- always JUMP 

1980 4C 48 1B  JMP 1B48                 

		-- move monster at double speed

1983 BD 04 0C  LDA 0C04,X               -- get current direction
1986 C9 04     CMP #04                  -- is it static?
1988 F0 F6     BEQ 1980                 -- yes, so branch and jump
198A 20 E1 1C  JSR 1CE1                 -- calculate which sprite to render
198D BD 03 0C  LDA 0C03,X               -- get position between tiles
1990 D0 32     BNE 19C4                 -- not zero (i.e. not dead on tile) then branch
1992 A9 02     LDA #02                  -- set position to mid-point between tiles
1994 9D 03 0C  STA 0C03,X               -- store position
1997 BC 01 0C  LDY 0C01,X               -- get current tile number
199A EA        NOP                      
199B EA        NOP                      
199C EA        NOP                      
199D 98        TYA                      
199E 20 83 1C  JSR 1C83                 -- seperate out tile number into x & y
19A1 BD 04 0C  LDA 0C04,X               -- get direction
19A4 20 67 1C  JSR 1C67                 -- update tile number according to direction
19A7 20 90 1C  JSR 1C90                 -- combine x & y back to tile number
19AA 9D 02 0C  STA 0C02,X               -- store new tile number
19AD 20 9D 1C  JSR 1C9D                 -- get screen position for tile
19B0 BD 04 0C  LDA 0C04,X               -- get direction
19B3 49 01     EOR #01                  -- reverse it
19B5 20 67 1C  JSR 1C67                 -- update co-ordinate with direction
19B8 20 67 1C  JSR 1C67                 -- update co-ordinate with direction
19BB 20 39 1C  JSR 1C39                 -- draw sprite to screen
19BE 20 DE 19  JSR 19DE                 -- draw sprite to screen with offset
19C1 4C FF 19  JMP 19FF                 

19C4 BC 01 0C  LDY 0C01,X               -- get current tile
19C7 BD 02 0C  LDA 0C02,X               -- get tile moving towards
19CA 9D 01 0C  STA 0C01,X               -- update current tile number
19CD 20 9D 1C  JSR 1C9D                 -- get screen position for tile
19D0 20 39 1C  JSR 1C39                 -- draw sprite to screen
19D3 20 DE 19  JSR 19DE                 -- draw sprite to screen with offset
19D6 20 01 1C  JSR 1C01                 -- reset position between tiles to 0
19D9 4C FF 19  JMP 19FF                 
19DC EA        NOP                      
19DD EA        NOP                      

19DE 20 AC 1C  JSR 1CAC                 -- calculate position with offset and draw sprite
19E1 BD 04 0C  LDA 0C04,X               -- get direction
19E4 49 01     EOR #01                  -- reverse it
19E6 20 67 1C  JSR 1C67                 -- adjust co-ordinates according to direction
19E9 4C AC 1C  JMP 1CAC                 -- calculate position with offset and draw sprite

		-- move monster at normal speed

19EC BD 07 0C  LDA 0C07,X               -- get 0
19EF 9D 08 0C  STA 0C08,X               -- store 0
19F2 BD 04 0C  LDA 0C04,X               -- get current direction
19F5 C9 04     CMP #04                  -- is it static?
19F7 B0 87     BCS 1980                 -- yes, so branch
19F9 20 E1 1C  JSR 1CE1                 -- calculate which animation frame to show
19FC 20 7B 1B  JSR 1B7B                 -- update sprite position and draw it

19FF 20 1F 1B  JSR 1B1F                 -- is there someone else occupying the same tile?
1A02 BD 0F 0C  LDA 0C0F,X               -- get monster movement type
1A05 C9 80     CMP #80                  -- is it egg (< 80) or monster?
1A07 B0 0B     BCS 1A14                 -- if monster so branch to determine which direction to go in

1A09 BD 03 0C  LDA 0C03,X               -- get position between tiles
1A0C D0 05     BNE 1A13                 -- return if between tiles
1A0E A9 04     LDA #04                  -- set
1A10 9D 04 0C  STA 0C04,X               -- direction is still
1A13 60        RTS                      

		-- Determine which direction monster should move in
		-- on entry, X identifies the monster slot

1A14 BD 03 0C  LDA 0C03,X               
1A17 D0 FA     BNE 1A13                 
1A19 BD 0F 0C  LDA 0C0F,X               -- get movement type
1A1C 29 0F     AND #0F                  -- mask to get only the lower bits which identify the current type of movement
1A1E F0 F3     BEQ 1A13                 -- if zero (static), then return

1A20 C9 01     CMP #01                  
1A22 D0 0E     BNE 1A32                 

		-- 81 full chase

1A24 20 5F 1A  JSR 1A5F                 -- determine which direction in order to get closer to player
1A27 20 90 1C  JSR 1C90                 -- combine column/x & row/y in &85 and &86 to tile number
1A2A CD 01 0C  CMP 0C01                 -- compare the potential tile number to player's current tile number
1A2D D0 E4     BNE 1A13                 -- not equal, so direction confirmed: return
1A2F 4C EE 1A  JMP 1AEE                 -- alter direction by right angle, and test movement before returning

1A32 C9 02     CMP #02                  
1A34 D0 12     BNE 1A48                 

		-- 82 patrol

1A36 BD 01 0C  LDA 0C01,X               -- get current tile number
1A39 20 EB 1C  JSR 1CEB                 -- get contents of next tile according to current direction
1A3C C9 20     CMP #20                  
1A3E B0 D3     BCS 1A13                 -- okay, so return
1A40 BD 04 0C  LDA 0C04,X               
1A43 49 01     EOR #01                  -- reverse direction
1A45 4C F3 1A  JMP 1AF3                 -- jump to test and update routine

1A48 C9 03     CMP #03                  
1A4A D0 08     BNE 1A54                 

		-- 83 random direction

1A4C 20 80 1E  JSR 1E80                 -- get random number
1A4F 29 03     AND #03                  -- first 2 bits (result = 0 to 3)
1A51 4C F3 1A  JMP 1AF3                 -- jump to test and update routine

1A54 C9 04     CMP #04                  
1A56 D0 4B     BNE 1AA3                 

		-- 84 cautious in pursuit
		-- falls through into basic pursuit routine

1A58 20 80 1E  JSR 1E80                 -- get random number
1A5B 29 07     AND #07                  -- first 3 bits (result = 0 to 7)
1A5D F0 ED     BEQ 1A4C                 -- if zero, then jump to random direction

		-- subroutine for determining the direction that brings the monster closer to the player
		-- on entry, X identifies the animation slot
		-- on exit, 0C04,X will contain the direction to move in (or 4 if no move possible)
		--			&85 contains what would be the new column/x, &86 contains what would be the new row/y

1A5F BD 01 0C  LDA 0C01,X               -- get monster's current tile number
1A62 20 83 1C  JSR 1C83                 -- put column/x into &85, row/y into &86

		-- check horizontal difference in position first

1A65 AD 01 0C  LDA 0C01                 -- get player's current tile
1A68 29 0F     AND #0F                  -- extract just the column/x
1A6A 38        SEC                      
1A6B E5 85     SBC 85                   -- subtract monster column/x
1A6D F0 1C     BEQ 1A8B                 -- if equal then branch to look at vertical difference instead
1A6F A9 00     LDA #00                  -- default direction is left
1A71 90 02     BCC 1A75                 -- subtraction led to a minus number, so keep left as the result
1A73 A9 01     LDA #01                  -- direction is actually right
1A75 9D 04 0C  STA 0C04,X               -- store new left or right direction
1A78 20 EE 1C  JSR 1CEE                 -- get contents of what would be the new position for the monster
1A7B C9 20     CMP #20                  
1A7D 90 0C     BCC 1A8B                 -- less then 20 is a wall, in which case branch to look at vertical difference instead
1A7F B0 1F     BCS 1AA0                 -- jump to test and update routine
1A81 EA        NOP                      
1A82 EA        NOP                      
1A83 EA        NOP                      
1A84 EA        NOP                      
1A85 EA        NOP                      
1A86 EA        NOP                      
1A87 EA        NOP                      
1A88 EA        NOP                      
1A89 EA        NOP                      
1A8A EA        NOP                      

		-- check vertical difference in position second

1A8B AD 01 0C  LDA 0C01                 -- get player's current tile
1A8E 29 F0     AND #F0                  -- extract just the row/y
1A90 4A        LSR A                    
1A91 4A        LSR A                    
1A92 4A        LSR A                    
1A93 4A        LSR A                    -- shift down to bits 0 to 3
1A94 38        SEC                      
1A95 E5 86     SBC 86                   -- subtract the monster's row/y
1A97 A9 02     LDA #02                  -- default direction is up
1A99 90 02     BCC 1A9D                 -- subtraction led to a minus number, so keep up as the result
1A9B A9 03     LDA #03                  -- direction is actually down
1A9D 9D 04 0C  STA 0C04,X               -- store new direction
1AA0 4C F6 1A  JMP 1AF6                 -- jump to test and update routine

1AA3 C9 05     CMP #05                  
1AA5 D0 1C     BNE 1AC3                 

		-- 85 not used

1AA7 AD C4 0B  LDA 0BC4                 -- get player direction
1AAA 9D 04 0C  STA 0C04,X               -- store as monster direction
1AAD BD 01 0C  LDA 0C01,X               -- get monster tile
1AB0 20 EB 1C  JSR 1CEB                 -- get contents of tile
1AB3 85 89     STA 89                   
1AB5 C9 13     CMP #13                  
1AB7 B0 09     BCS 1AC2                 -- 13 or more then return
1AB9 EA        NOP                      
1ABA EA        NOP                      
1ABB EA        NOP                      
1ABC EA        NOP                      
1ABD A9 04     LDA #04                  
1ABF 9D 04 0C  STA 0C04,X               -- set direction to still
1AC2 60        RTS                      

1AC3 C9 06     CMP #06                  
1AC5 D0 07     BNE 1ACE                 

		-- 86 semi aggressive

1AC7 20 80 1E  JSR 1E80                 -- get random number
1ACA 30 80     BMI 1A4C                 -- if -ve then goto random direction routine
1ACC 10 91     BPL 1A5F                 -- jump to pursue player

1ACE C9 07     CMP #07                  
1AD0 D0 12     BNE 1AE4                 

		-- 87 cautious and afraid

1AD2 20 80 1E  JSR 1E80                 -- get random number
1AD5 29 03     AND #03                  -- first 2 bits (result = 0 to 3)
1AD7 F0 15     BEQ 1AEE                 -- if zero, jump to alter direction
1AD9 20 5F 1A  JSR 1A5F                 -- call pursue player routine
1ADC BD 04 0C  LDA 0C04,X               -- get resultant direction chosen
1ADF 49 01     EOR #01                  -- reverse it
1AE1 4C F3 1A  JMP 1AF3                 -- jump to test and update routine

		-- 88 rolling

1AE4 20 80 1E  JSR 1E80                 -- get random number
1AE7 29 07     AND #07                  -- first 3 bits (result = 0 to 7)
1AE9 F0 03     BEQ 1AEE                 -- if zero, then alter direction
1AEB 4C 36 1A  JMP 1A36                 -- jump to patrol routine

		-- alter direction left->up, right->down, up->left, down->right
		-- fall through to confirm and update move to something possible

1AEE BD 04 0C  LDA 0C04,X               
1AF1 49 02     EOR #02                  

		-- test if move is possible, update to next if not
		-- on entry, X identifies the animation slot
		--			 A identifies the intended direction
		-- on exit, 0C04,X will be updated with a possible direction or 4 if no direction possible
		-- effectively, a monster will not move into a wall or the boulder

1AF3 9D 04 0C  STA 0C04,X               

		-- alternative entry point

1AF6 BD 04 0C  LDA 0C04,X               -- get direction of travel
1AF9 85 71     STA 71                   -- store the current direction

1AFB 9D 04 0C  STA 0C04,X				-- loop start - store the current direction being examined
1AFE BD 01 0C  LDA 0C01,X               -- get subject's current tile position
1B01 20 EB 1C  JSR 1CEB                 -- get contents of new tile position
1B04 85 89     STA 89                   
1B06 C9 1F     CMP #1F                  -- #1F is the off-screen status value
1B08 F0 04     BEQ 1B0E                 -- if offscreen then no move possible, branch to increment loop
1B0A C9 14     CMP #14                  
1B0C B0 10     BCS 1B1E                 -- 14 or more means we can move so RTS
1B0E BC 04 0C  LDY 0C04,X               -- get current direction
1B11 C8        INY                      -- increment direction (order is left, right, up, down)
1B12 98        TYA                      
1B13 29 03     AND #03                  -- keep direction to 0 to 3
1B15 C5 71     CMP 71                   -- are we back at the originally selected direction?
1B17 D0 E2     BNE 1AFB                 -- loop back round to examine the next direction

1B19 A9 04     LDA #04                  
1B1B 9D 04 0C  STA 0C04,X               -- store direction 4 (static) as direction
1B1E 60        RTS                      

		-- determine if there is another sprite occupying the same ground
		-- on entry, X is the animation slot of the shot
		-- on exit, &84 is the number of the slot at the same position and &88 is 0

1B1F 86 84     STX 84                   
1B21 A0 00     LDY #00                  -- initialise loop counter
1B23 B9 00 0C  LDA 0C00,Y               -- get state of player/monster slot
1B26 F0 11     BEQ 1B39                 -- continue loop if not in use
1B28 C4 84     CPY 84                   
1B2A F0 0D     BEQ 1B39                 -- continue loop if currently dealing with that slot
1B2C BD 01 0C  LDA 0C01,X               -- get the position for the occupant of the slot we're currently dealing with
1B2F D9 01 0C  CMP 0C01,Y               -- compare to the position of the occupant of the loop slot
1B32 F0 0D     BEQ 1B41                 -- found it to be the same, so branch
1B34 D9 02 0C  CMP 0C02,Y               -- compare to the position where the occupant of the loop is moving toward
1B37 F0 08     BEQ 1B41                 -- found it to be the same, so branch

1B39 98        TYA                      -- continue loop
1B3A 18        CLC                      
1B3B 69 10     ADC #10                  
1B3D A8        TAY                      
1B3E D0 E3     BNE 1B23                 
1B40 60        RTS                      

1B41 84 84     STY 84                   -- store matching slot number
1B43 A9 00     LDA #00                  
1B45 85 88     STA 88                   -- set return state that someone/thing has been found
1B47 60        RTS                      



1B48 20 E1 1C  JSR 1CE1                 
1B4B BD 01 0C  LDA 0C01,X               
1B4E 20 9D 1C  JSR 1C9D                 
1B51 BC 03 0C  LDY 0C03,X               
1B54 BD 04 0C  LDA 0C04,X               
1B57 C0 00     CPY #00                  
1B59 F0 1A     BEQ 1B75                 
1B5B C0 01     CPY #01                  
1B5D D0 03     BNE 1B62                 
1B5F 20 67 1C  JSR 1C67                 
1B62 C0 02     CPY #02                  
1B64 D0 06     BNE 1B6C                 
1B66 20 67 1C  JSR 1C67                 
1B69 20 67 1C  JSR 1C67                 
1B6C C0 03     CPY #03                  
1B6E D0 05     BNE 1B75                 
1B70 49 01     EOR #01                  
1B72 20 67 1C  JSR 1C67                 
1B75 20 39 1C  JSR 1C39                 
1B78 4C FF 19  JMP 19FF                 

		-- update position between tiles (for normal movement) and draw sprite

1B7B FE 03 0C  INC 0C03,X               
1B7E BD 03 0C  LDA 0C03,X               
1B81 C9 01     CMP #01                  
1B83 F0 0D     BEQ 1B92                 
1B85 C9 02     CMP #02                  
1B87 F0 22     BEQ 1BAB                 
1B89 C9 03     CMP #03                  
1B8B F0 47     BEQ 1BD4                 
1B8D C9 04     CMP #04                  
1B8F F0 61     BEQ 1BF2                 
1B91 60        RTS                      

1B92 BD 01 0C  LDA 0C01,X               
1B95 9D 02 0C  STA 0C02,X               
1B98 9D 05 0C  STA 0C05,X               
1B9B A8        TAY                      
1B9C 20 9D 1C  JSR 1C9D                 
1B9F BD 04 0C  LDA 0C04,X               
1BA2 20 67 1C  JSR 1C67                 
1BA5 20 39 1C  JSR 1C39                 
1BA8 4C AC 1C  JMP 1CAC                 

1BAB BD 01 0C  LDA 0C01,X               
1BAE A8        TAY                      
1BAF 20 9D 1C  JSR 1C9D                 
1BB2 BD 04 0C  LDA 0C04,X               
1BB5 20 67 1C  JSR 1C67                 
1BB8 20 67 1C  JSR 1C67                 
1BBB 20 39 1C  JSR 1C39                 
1BBE 20 AC 1C  JSR 1CAC                 
1BC1 BD 01 0C  LDA 0C01,X               
1BC4 20 83 1C  JSR 1C83                 
1BC7 BD 04 0C  LDA 0C04,X               
1BCA 20 67 1C  JSR 1C67                 
1BCD 20 90 1C  JSR 1C90                 
1BD0 9D 02 0C  STA 0C02,X               
1BD3 60        RTS                      

1BD4 BD 02 0C  LDA 0C02,X               
1BD7 20 9D 1C  JSR 1C9D                 
1BDA BD 04 0C  LDA 0C04,X               
1BDD 49 01     EOR #01                  
1BDF 20 67 1C  JSR 1C67                 
1BE2 20 39 1C  JSR 1C39                 
1BE5 BC 05 0C  LDY 0C05,X               
1BE8 20 AC 1C  JSR 1CAC                 
1BEB BD 02 0C  LDA 0C02,X               
1BEE 9D 01 0C  STA 0C01,X               
1BF1 60        RTS                      

1BF2 BC 05 0C  LDY 0C05,X               
1BF5 BD 01 0C  LDA 0C01,X               
1BF8 20 9D 1C  JSR 1C9D                 
1BFB 20 39 1C  JSR 1C39                 
1BFE 20 AC 1C  JSR 1CAC                 

		-- reset position between tiles

1C01 A9 00     LDA #00                  
1C03 9D 03 0C  STA 0C03,X               
1C06 EA        NOP                      
1C07 EA        NOP                      
1C08 EA        NOP                      
1C09 EA        NOP                      
1C0A EA        NOP                      
1C0B EA        NOP                      
1C0C 60        RTS                      

		-- calculate background sprite number

1C0D 85 7A     STA 7A                   
1C0F A9 00     LDA #00                  
1C11 85 79     STA 79                   
1C13 46 7A     LSR 7A                   
1C15 66 79     ROR 79                   
1C17 46 7A     LSR 7A                   
1C19 66 79     ROR 79                   
1C1B A5 7A     LDA 7A                   
1C1D 18        CLC                      
1C1E 69 3F     ADC #3F                  
1C20 85 7A     STA 7A                   
1C22 60        RTS                      

		-- Get address for the specified sprite (from &3f00 onwards. Each sprite occupies 64 bytes)
		-- On entry, A is the sprite index
		-- On exit, &72 and &73 are set. &72 is low byte, &73 is high byte.

1C23 85 73     STA 73                   -- store sprite index in &73 (high byte of result)
1C25 A9 00     LDA #00                  -- initialise for low byte
1C27 85 72     STA 72                   -- store 0 in &72 (low byte of result)

1C29 46 73     LSR 73                   -- halve 73 (bit 0 to carry)
1C2B 66 72     ROR 72                   -- carry goes to bit 7
1C2D 46 73     LSR 73                   -- halve 73 (bit 0 to carry)
1C2F 66 72     ROR 72                   -- carry goes to bit 7

1C31 A5 73     LDA 73                   -- load high byte
1C33 18        CLC                      
1C34 69 3F     ADC #3F                  -- add &3f for start of data
1C36 85 73     STA 73                   
1C38 60        RTS                      

		-- draw non-wall sprite to screen

1C39 98        TYA                      
1C3A 48        PHA                      
1C3B 8A        TXA                      
1C3C 48        PHA                      
1C3D A6 85     LDX 85                   
1C3F A4 86     LDY 86                   
1C41 20 1D 12  JSR 121D                 
1C44 68        PLA                      
1C45 AA        TAX                      
1C46 68        PLA                      
1C47 A8        TAY                      
1C48 60        RTS                      

		-- update column for offset position and draw sprite to screen

1C49 86 87     STX 87                   
1C4B AA        TAX                      
1C4C 98        TYA                      
1C4D 48        PHA                      
1C4E A4 86     LDY 86                   
1C50 20 B6 12  JSR 12B6                 
1C53 68        PLA                      
1C54 A8        TAY                      
1C55 A6 87     LDX 87                   
1C57 60        RTS                      

		-- update row for offset position and draw sprite to screen

1C58 84 87     STY 87                   
1C5A A8        TAY                      
1C5B 8A        TXA                      
1C5C 48        PHA                      
1C5D A6 85     LDX 85                   
1C5F 20 08 13  JSR 1308                 
1C62 68        PLA                      
1C63 AA        TAX                      
1C64 A4 87     LDY 87                   
1C66 60        RTS                      

	-- adjust row and column according to chosen direction
	-- on entry, A is the direction (0 left, 1 right, 3 down)
	--		&85 is the current column, &86 the current row

1C67 C9 00     CMP #00                  -- left
1C69 D0 03     BNE 1C6E                 
1C6B C6 85     DEC 85                   
1C6D 60        RTS                      

1C6E C9 01     CMP #01                  -- right
1C70 D0 03     BNE 1C75                 
1C72 E6 85     INC 85                   
1C74 60        RTS                      

1C75 C9 02     CMP #02                  -- up
1C77 D0 03     BNE 1C7C                 
1C79 C6 86     DEC 86                   
1C7B 60        RTS                      

1C7C C9 03     CMP #03                  -- down
1C7E D0 02     BNE 1C82                 
1C80 E6 86     INC 86                   
1C82 60        RTS                      

		-- separate out tile position, low nibble to &85 (columm/x), high nibble to &86 (row/y)
		-- on entry A is the tile position
		
1C83 48        PHA                      
1C84 29 0F     AND #0F                  
1C86 85 85     STA 85                   -- store column
1C88 68        PLA                      
1C89 4A        LSR A                    
1C8A 4A        LSR A                    
1C8B 4A        LSR A                    
1C8C 4A        LSR A                    
1C8D 85 86     STA 86                   -- store row
1C8F 60        RTS                      

		-- combine seperated x & y position, from column in &85 and row in &86 to A
		
1C90 A5 85     LDA 85                   -- get column
1C92 85 70     STA 70                   
1C94 A5 86     LDA 86                   -- get row
1C96 0A        ASL A                    
1C97 0A        ASL A                    
1C98 0A        ASL A                    
1C99 0A        ASL A                    
1C9A 05 70     ORA 70                   -- combine
1C9C 60        RTS                      

		-- get screen position for specified tile number
		-- on entry, A is the tile number
		-- on exit, 85 is the column (X), 86 is the row (Y)

1C9D 48        PHA                      
1C9E 29 0F     AND #0F                  -- get lowest nibble (x co-ordinate)
1CA0 0A        ASL A                    -- double it
1CA1 0A        ASL A                    -- double it again (each tile has 4 positions)
1CA2 85 85     STA 85                   -- store x co-ordinate
1CA4 68        PLA                      
1CA5 29 F0     AND #F0                  -- get highest nibble (y co-ordinate)
1CA7 4A        LSR A                    -- halve it
1CA8 4A        LSR A                    -- halve it again (each tile has 4 positions)
1CA9 85 86     STA 86                   -- store y co-ordinate
1CAB 60        RTS                      

		-- calculate offset position and draw sprite

1CAC B9 00 0B  LDA 0B00,Y               -- get contents of tile Y
1CAF 20 0D 1C  JSR 1C0D                 -- calculate background sprite number
1CB2 BD 04 0C  LDA 0C04,X               -- get direction

1CB5 C9 00     CMP #00                  -- is it left?
1CB7 D0 08     BNE 1CC1                 -- nope, branch to next bit

1CB9 A5 85     LDA 85                   -- get column position
1CBB 18        CLC                      
1CBC 69 04     ADC #04                  -- add 4
1CBE 4C 49 1C  JMP 1C49                 -- draw sprite

1CC1 C9 01     CMP #01                  -- is it right?
1CC3 D0 08     BNE 1CCD                 -- nope, branch to next bit

1CC5 A5 85     LDA 85                   -- get column position
1CC7 38        SEC                      
1CC8 E9 01     SBC #01                  -- subtract 1
1CCA 4C 49 1C  JMP 1C49                 -- draw sprite

1CCD C9 02     CMP #02                  -- is it up?
1CCF D0 08     BNE 1CD9                 -- nope, branch to next bit

1CD1 A5 86     LDA 86                   -- get row
1CD3 18        CLC                      
1CD4 69 04     ADC #04                  -- add 4
1CD6 4C 58 1C  JMP 1C58                 -- draw sprite

1CD9 A5 86     LDA 86                   -- get row
1CDB 38        SEC                      
1CDC E9 01     SBC #01                  -- subtract 1
1CDE 4C 58 1C  JMP 1C58                 -- draw sprite

		-- calculate current frame of animation to show
		-- on entry, X is the monster slot

1CE1 BD 09 0C  LDA 0C09,X               -- get base index of animation
1CE4 18        CLC                      
1CE5 7D 0C 0C  ADC 0C0C,X               -- add current frame index
1CE8 4C 23 1C  JMP 1C23                 -- calculate sprite index

		-- get contents of tile according to direction
		-- on entry, X is the animation slot
		--			 A is the current tile number
		-- on exit, returns the tile contents in A
		--          the new column/x will be in &85, the new row/y will be in &86

1CEB 20 83 1C  JSR 1C83                 -- put column/x into &85, row/y into &86

		-- alternative entry point

1CEE BD 04 0C  LDA 0C04,X               -- get direction of travel

		-- alternative entry point

1CF1 20 67 1C  JSR 1C67                 -- adjust row in &86 and column in &85 according to direction A
1CF4 20 90 1C  JSR 1C90                 -- combine row & column in &85/&86 into A
1CF7 A8        TAY                      
1CF8 B9 00 0B  LDA 0B00,Y               -- get the contents of the tile
1CFB A4 85     LDY 85                   -- get column
1CFD 30 0D     BMI 1D0C                 -- less than 0 then branch
1CFF C0 10     CPY #10                  
1D01 B0 09     BCS 1D0C                 -- 16 or more then branch
1D03 A4 86     LDY 86                   -- get row
1D05 30 05     BMI 1D0C                 -- less than 0 then branch
1D07 C0 0A     CPY #0A                  
1D09 B0 01     BCS 1D0C                 -- 10 or more than branch
1D0B 60        RTS                      

1D0C A9 1F     LDA #1F                  -- return value indicating off-screen
1D0E 60        RTS                      

		-- initialise monster slot

1D0F 20 01 1C  JSR 1C01                 
1D12 A9 00     LDA #00                  
1D14 9D 08 0C  STA 0C08,X               -- unused?
1D17 9D 0C 0C  STA 0C0C,X               -- current frame index
1D1A 9D 0D 0C  STA 0C0D,X               -- count until next frame change
1D1D BD 01 0C  LDA 0C01,X               
1D20 9D 02 0C  STA 0C02,X               -- copy current tile to previous
1D23 60        RTS                      

1D24 00        BRK                      
1D25 EA        NOP                      
1D26 9D 00 0C  STA 0C00,X               
1D29 BD 01 0C  LDA 0C01,X               
1D2C 20 9D 1C  JSR 1C9D                 
1D2F BD 05 0C  LDA 0C05,X               
1D32 20 23 1C  JSR 1C23                 
1D35 4C 39 1C  JMP 1C39                 

		-- draw wall tile

1D38 98        TYA                      
1D39 48        PHA                      
1D3A 8A        TXA                      
1D3B 48        PHA                      
1D3C A6 85     LDX 85                   
1D3E A4 86     LDY 86                   
1D40 20 B6 11  JSR 11B6                 
1D43 68        PLA                      
1D44 AA        TAX                      
1D45 68        PLA                      
1D46 A8        TAY                      
1D47 60        RTS                      

		-- process playing sounds
		
1D50 A0 03     LDY #03					-- initialise loop counter
1D52 B9 C8 08  LDA 08C8,Y               -- get data
1D55 F0 03     BEQ 1D5A                 -- branch if not in use
1D57 20 6C 1D  JSR 1D6C                 -- process
1D5A 88        DEY                      -- decrement counter
1D5B 10 F5     BPL 1D52                 -- loop
1D5D 60        RTS                      -- return

		-- reset sound channel
		-- On entry, Y is the channel to reset

1D5E A9 00     LDA #00                  
1D60 99 C4 08  STA 08C4,Y               -- set current volume to 0
1D63 99 C8 08  STA 08C8,Y               -- set control flag to 0
1D66 4C D8 0A  JMP 0AD8                 -- set sound volume

1D69 EA        NOP                      
1D6A EA        NOP                      
1D6B EA        NOP                      

		-- deal with channel of sound
		-- On entry, Y is channel, A is data in 08C8,Y

1D6C 48        PHA                      
1D6D 29 F0     AND #F0                  -- extract top 4 bits
1D6F 4A        LSR A                    -- shift right to bits 0 to 3
1D70 4A        LSR A                    
1D71 4A        LSR A                    
1D72 4A        LSR A                    
1D73 20 DD 1D  JSR 1DDD                 -- update frequency
1D76 68        PLA                      -- restore data
1D77 29 0F     AND #0F                  -- extract bottom 4 bits

1D79 C9 01     CMP #01                  -- is it 1?
1D7B D0 19     BNE 1D96                 -- nope, so branch

1D7D B9 D0 08  LDA 08D0,Y               -- get volume adjustment
1D80 F0 03     BEQ 1D85                 -- zero? then branch
1D82 4C C3 1D  JMP 1DC3                 -- not zero - jump

1D85 B9 C4 08  LDA 08C4,Y               -- get current volume
1D88 38        SEC                      
1D89 E9 01     SBC #01                  -- decrement
1D8B 99 C4 08  STA 08C4,Y               -- store new volume
1D8E D0 03     BNE 1D93                 -- not yet zero so branch
1D90 4C 5E 1D  JMP 1D5E                 -- reset channel
1D93 4C D8 0A  JMP 0AD8                 -- set volume

1D96 C9 02     CMP #02                  -- is it 2?
1D98 D0 18     BNE 1DB2                 -- nope, so branch

1D9A B9 D0 08  LDA 08D0,Y               -- get volume adjustment
1D9D F0 03     BEQ 1DA2                 -- zero, so branch over jump
1D9F 4C C3 1D  JMP 1DC3                 -- jump to decrement volume adjustment

1DA2 B9 C4 08  LDA 08C4,Y               -- get current volume
1DA5 18        CLC                      
1DA6 69 01     ADC #01                  -- increment
1DA8 99 C4 08  STA 08C4,Y               -- store new volume
1DAB C9 10     CMP #10                  -- is it beyond maximum?
1DAD D0 E4     BNE 1D93                 -- nope, so jump to set new volume
1DAF 4C 5E 1D  JMP 1D5E                 -- reset channel

1DB2 C9 03     CMP #03                  -- is it 3?
1DB4 D0 01     BNE 1DB7                 -- nope, so branch
1DB6 60        RTS                      

1DB7 C9 04     CMP #04                  -- is it 4?
1DB9 D0 0F     BNE 1DCA                 -- nope, so branch

1DBB B9 D0 08  LDA 08D0,Y               -- get volume adjustment
1DBE D0 03     BNE 1DC3                 -- not zero so jump to decrement adjustment
1DC0 4C 5E 1D  JMP 1D5E                 -- reset channel

1DC3 38        SEC                      -- decrement volume adjustment
1DC4 E9 01     SBC #01                  
1DC6 99 D0 08  STA 08D0,Y               -- store new volume adjustment
1DC9 60        RTS                      

1DCA B9 C4 08  LDA 08C4,Y               -- control nibble not 0 to 4
1DCD C9 0F     CMP #0F                  -- is current volume max?
1DCF D0 05     BNE 1DD6                 -- nope, so branch

1DD1 A9 00     LDA #00                  -- set volume adjustment to 0
1DD3 99 D0 08  STA 08D0,Y               
1DD6 B9 D0 08  LDA 08D0,Y               
1DD9 D0 C7     BNE 1DA2                 -- jump to raise volume
1DDB F0 A8     BEQ 1D85                 -- jump to fade volume

		-- update and set sound frequency

1DDD F0 EA     BEQ 1DC9                 - on zero then RTS

1DDF C9 01     CMP #01                  
1DE1 D0 0D     BNE 1DF0                 

1DE3 B9 C0 08  LDA 08C0,Y               -- add set amount to frequency
1DE6 18        CLC                      
1DE7 79 D4 08  ADC 08D4,Y               
1DEA 99 C0 08  STA 08C0,Y               
1DED 4C B2 0A  JMP 0AB2                 -- set sound frequency

1DF0 C9 02     CMP #02                  
1DF2 D0 0C     BNE 1E00                 

1DF4 B9 C0 08  LDA 08C0,Y               -- eor frequency by set amount
1DF7 59 D4 08  EOR 08D4,Y               
1DFA 99 C0 08  STA 08C0,Y               
1DFD 4C B2 0A  JMP 0AB2                 -- set sound frequency

1E00 C9 03     CMP #03                  
1E02 D0 10     BNE 1E14                 

1E04 B9 C0 08  LDA 08C0,Y               -- eor then add set amount to frequency
1E07 59 D4 08  EOR 08D4,Y               
1E0A 18        CLC                      
1E0B 79 D4 08  ADC 08D4,Y               
1E0E 99 C0 08  STA 08C0,Y               
1E11 4C B2 0A  JMP 0AB2                 -- set sound frequency

1E14 AD 44 FE  LDA FE44                 -- get sysvia t1 low order counter
1E17 99 C0 08  STA 08C0,Y               --	(set to random number really)
1E1A 4C B2 0A  JMP 0AB2                 -- set sound frequency

		-- play a new sound effect

1E1D 8D CE 08  STA 08CE                 
1E20 8E CF 08  STX 08CF                 
1E23 C9 06     CMP #06                  
1E25 B0 04     BCS 1E2B                 -- branch when 6 or more
1E27 A0 00     LDY #00                  -- set channel 0
1E29 F0 15     BEQ 1E40                 -- jump

1E2B A0 03     LDY #03                  -- try to locate a free channel
1E2D B9 C8 08  LDA 08C8,Y               
1E30 F0 0E     BEQ 1E40                 
1E32 88        DEY                      
1E33 D0 F8     BNE 1E2D                 

1E35 CE D8 08  DEC 08D8                 -- rotate to use a different channel number
1E38 AD D8 08  LDA 08D8                 
1E3B 29 03     AND #03                  
1E3D F0 F6     BEQ 1E35                 -- don't use channel 0!
1E3F A8        TAY                      

1E40 8C D8 08  STY 08D8                 -- store last channel used
1E43 AD CE 08  LDA 08CE                 -- get sound number
1E46 0A        ASL A                    -- multiply by 5
1E47 0A        ASL A                    
1E48 18        CLC                      
1E49 6D CE 08  ADC 08CE                 
1E4C AA        TAX                      
1E4D BD 40 08  LDA 0840,X               -- get initial frequency 
1E50 99 C0 08  STA 08C0,Y               
1E53 BD 41 08  LDA 0841,X               -- get initial volume
1E56 99 C4 08  STA 08C4,Y               
1E59 BD 42 08  LDA 0842,X               -- get control 
1E5C 99 C8 08  STA 08C8,Y               
1E5F BD 43 08  LDA 0843,X               -- get adjustment to volume
1E62 99 D0 08  STA 08D0,Y               
1E65 BD 44 08  LDA 0844,X               -- get adjustment to frequency
1E68 99 D4 08  STA 08D4,Y               
1E6B AE CF 08  LDX 08CF                 -- restore x
1E6E 20 B2 0A  JSR 0AB2                 -- set frequency
1E71 4C D8 0A  JMP 0AD8                 -- set volume

		-- looks like unused code

1E74 99 D4 08  STA 08D4,Y               
1E77 AE CF 08  LDX 08CF                 
1E7A 20 B2 0A  JSR 0AB2                 
1E7D 4C D8 00  JMP 00D8                 

		-- generate random number

1E80 E6 8B     INC 8B                   
1E82 A5 8B     LDA 8B                   
1E84 2A        ROL A                    
1E85 65 8B     ADC 8B                   
1E87 4D 44 FE  EOR FE44                 
1E8A 85 8B     STA 8B                   
1E8C 60        RTS                      

		-- wait for next vertical sync, add a little delay

1E8D 8A        TXA                      
1E8E 48        PHA                      
1E8F 98        TYA                      
1E90 48        PHA                      
1E91 A9 13     LDA #13                  
1E93 20 F4 FF  JSR FFF4                 
1E96 A2 00     LDX #00                  
1E98 AC FD 0D  LDY 0DFD                 
1E9B CA        DEX                      
1E9C D0 FD     BNE 1E9B                 
1E9E 88        DEY                      
1E9F D0 FA     BNE 1E9B                 
1EA1 68        PLA                      
1EA2 A8        TAY                      
1EA3 68        PLA                      
1EA4 AA        TAX                      
1EA5 60        RTS                      

		-- new life or new world starts here

1EA6 A9 00     LDA #00                  
1EA8 8D DC 0B  STA 0BDC                 -- indicate that main loop shouldn't end
1EAB 85 8A     STA 8A                   -- indicate that world has not been completed
1EAD 8D C3 0B  STA 0BC3                 -- player will be moving forwards (not being bounced)
1EB0 8D C7 0B  STA 0BC7                 -- reset firing flag
1EB3 20 31 09  JSR 0931                 -- generate room layout
1EB6 AD C6 0B  LDA 0BC6                 -- get current room
1EB9 20 06 26  JSR 2606                 -- get level number
1EBC 20 8A 22  JSR 228A                 -- calculate which sprites to use for wall and floor
1EBF AD 0E 0C  LDA 0C0E                 -- push player energy
1EC2 48        PHA                      
1EC3 AD 01 0C  LDA 0C01                 -- push player tile number
1EC6 48        PHA                      
1EC7 A0 00     LDY #00                  -- initialise loop counter
1EC9 A9 00     LDA #00                  
1ECB 99 00 0C  STA 0C00,Y               -- clear room occupant data
1ECE 88        DEY                      -- decrement loop counter
1ECF D0 FA     BNE 1ECB                 -- continue loop
1ED1 68        PLA                      
1ED2 8D 01 0C  STA 0C01                 -- restore player tile number
1ED5 68        PLA                      
1ED6 8D 0E 0C  STA 0C0E                 -- restore player energy

		-- move any monsters in the player's restart room to an adjacent room

1ED9 AD C6 0B  LDA 0BC6                 -- get current room
1EDC 85 89     STA 89                   -- store it to restore later
1EDE A9 FF     LDA #FF                  
1EE0 8D C6 0B  STA 0BC6                 -- set current room number
1EE3 A9 BF     LDA #BF                  -- initialise loop counter
1EE5 85 88     STA 88                   
1EE7 A4 88     LDY 88                   
1EE9 B9 00 04  LDA 0400,Y               -- get monster room
1EEC C5 89     CMP 89                   -- compare to current room
1EEE D0 04     BNE 1EF4                 -- not equal so branch
1EF0 98        TYA                      
1EF1 20 FE 31  JSR 31FE                 -- possibly change monster's room
1EF4 C6 88     DEC 88                   -- decrement loop counter
1EF6 A5 88     LDA 88                   
1EF8 C9 FF     CMP #FF                  
1EFA D0 EB     BNE 1EE7                 -- continue loop
1EFC A5 89     LDA 89                   -- get current room
1EFE 8D C6 0B  STA 0BC6                 -- restore current room

		-- clear out-of-sight monster list

1F01 A9 FF     LDA #FF                  
1F03 A0 0F     LDY #0F                  -- initialise loop counter
1F05 99 E0 0B  STA 0BE0,Y               -- clear out-of-sight monster list
1F08 88        DEY                      
1F09 10 FA     BPL 1F05                 -- continue loop

		-- fill room contents

1F0B 20 7E 25  JSR 257E                 -- load static objects and crystals into room
1F0E 20 C9 23  JSR 23C9                 -- load monsters into room

		-- check the player is not placed on top of a wall

1F11 AC 01 0C  LDY 0C01                 -- get player tile number
1F14 B9 00 0B  LDA 0B00,Y               -- get contents of tile
1F17 C9 20     CMP #20                  -- is it empty?
1F19 D0 13     BNE 1F2E                 -- not empty, so branch

		-- check that the player is not placed on top of a monster

1F1B A0 10     LDY #10                  -- initialise loop counter
1F1D AD 01 0C  LDA 0C01                 -- get player tile number
1F20 D9 01 0C  CMP 0C01,Y               -- compare to monster slot tile
1F23 F0 09     BEQ 1F2E                 -- match, so branch
1F25 98        TYA                      
1F26 18        CLC                      
1F27 69 10     ADC #10                  -- increment loop counter
1F29 A8        TAY                      
1F2A D0 F1     BNE 1F1D                 -- continue loop

1F2C F0 17     BEQ 1F45                 -- jump over next bit

		-- adjust player tile number by 1 in random direction

1F2E AD 01 0C  LDA 0C01                 -- get player tile number
1F31 20 83 1C  JSR 1C83                 -- separate tile number into x and y
1F34 20 80 1E  JSR 1E80                 -- generate random number
1F37 29 03     AND #03                  -- only first 2 bits for a random direction
1F39 20 67 1C  JSR 1C67                 -- increment/decrement x and y as per direction
1F3C 20 90 1C  JSR 1C90                 -- combine x and y back to a tile number
1F3F 8D 01 0C  STA 0C01                 -- store player tile number
1F42 4C 11 1F  JMP 1F11                 -- retest

1F45 A9 05     LDA #05                  -- initialise first slot for player info
1F47 8D 00 0C  STA 0C00                 
1F4A A9 04     LDA #04                  
1F4C 8D 04 0C  STA 0C04                 -- set current direction to still
1F4F A9 85     LDA #85                  
1F51 8D 0F 0C  STA 0C0F                 -- set movement to invalid
1F54 A9 01     LDA #01                  
1F56 8D 0B 0C  STA 0C0B                 -- time to show each frame = 1
1F59 A9 22     LDA #22                  
1F5B 8D 09 0C  STA 0C09                 -- start facing left
1F5E A9 00     LDA #00                  
1F60 8D 07 0C  STA 0C07                 -- no flitter
1F63 8D C9 0B  STA 0BC9                 -- store 0 in the recent monster list flag
1F66 85 7D     STA 7D                   -- reset keyboard delay
1F68 85 7E     STA 7E                   -- clear last direction required
1F6A A9 00     LDA #00                  
1F6C 8D D9 08  STA 08D9                 -- initialise player's energy countdown timer
1F6F A2 00     LDX #00                  
1F71 20 0F 1D  JSR 1D0F                 -- initialise slot in c00

1F74 A9 43     LDA #43                  
1F76 20 D6 2D  JSR 2DD6                 -- play new life sound
1F79 20 B7 09  JSR 09B7                 -- draw room
1F7C 20 27 38  JSR 3827                 -- set up colour palette
1F7F 4C 9A 1F  JMP 1F9A                 

		-- process shot and block

1F82 20 A9 2B  JSR 2BA9                 -- process shot or block
1F85 4C D6 1F  JMP 1FD6                 

		-- delay loop for empty animation slot

1F88 A9 03     LDA #03                  
1F8A 85 72     STA 72                   
1F8C A9 B0     LDA #B0                  
1F8E 85 73     STA 73                   
1F90 C6 73     DEC 73                   
1F92 D0 FC     BNE 1F90                 
1F94 C6 72     DEC 72                   
1F96 D0 F8     BNE 1F90                 
1F98 F0 3C     BEQ 1FD6                 

		-- initialise main game loop

1F9A 20 7A 34  JSR 347A                 
1F9D 20 6B 36  JSR 366B                 -- get input from keyboard or joystick
1FA0 A2 00     LDX #00                  
1FA2 AD C8 0B  LDA 0BC8                 -- get count of shots before decrementing energy
1FA5 29 03     AND #03                  
1FA7 8D C8 0B  STA 0BC8                 
1FAA A9 05     LDA #05                  
1FAC 8D CE 0B  STA 0BCE                 

		-- main game loop
		-- X will be incremented by 10 each time round to point to each animation slot in turn within 0c00 -> 0cff

1FAF A9 FF     LDA #FF                  -- set initial state for flags
1FB1 85 88     STA 88                   
1FB3 85 89     STA 89                   
1FB5 BD 00 0C  LDA 0C00,X               -- get slot status/occupant
1FB8 F0 CE     BEQ 1F88                 -- slot empty, do delay loop then goto 1FD6
1FBA 30 C6     BMI 1F82                 -- branch if -ve (shot or block) then goto 1FD6
1FBC 20 00 19  JSR 1900                 -- update animation
1FBF BD 04 0C  LDA 0C04,X               -- get direction
1FC2 C9 04     CMP #04                  -- is it still?
1FC4 D0 10     BNE 1FD6                 -- skip delay loop if not

		-- do short delay loop 

1FC6 A9 01     LDA #01                  
1FC8 85 72     STA 72                   
1FCA A9 B0     LDA #B0                  
1FCC 85 73     STA 73                   
1FCE C6 73     DEC 73                   
1FD0 D0 FC     BNE 1FCE                 
1FD2 C6 72     DEC 72                   
1FD4 D0 F8     BNE 1FCE                 

		-- continue sprite update

1FD6 20 6B 36  JSR 366B                 -- get input from keyboard or joystick
1FD9 A5 89     LDA 89                   -- get contents of tile that sprite is moving towards
1FDB 8D FF 0D  STA 0DFF                 
1FDE 20 CD 20  JSR 20CD                 -- collision detection

		-- if X = 0 (which indicates the animation slot for the player)

1FE1 8A        TXA                      
1FE2 D0 03     BNE 1FE7                 -- skip over if not animating player
1FE4 20 8E 20  JSR 208E                 -- tick game clock, update player, move offscreen monsters

		-- if X = 70 (halfway point for animating all the animation slots - player is updated again)

1FE7 E0 70     CPX #70                  
1FE9 D0 20     BNE 200B                 -- skip over animating player

		-- player specific updates within the main loop

1FEB 20 50 1D  JSR 1D50                 -- process playing sounds
1FEE A2 00     LDX #00                  -- temporarily set current animation slot back to 0
1FF0 BD 00 0C  LDA 0C00,X               -- get player status
1FF3 F0 14     BEQ 2009                 -- branch if not alive
1FF5 20 00 19  JSR 1900                 -- update animation, draw sprite and determine new direction
1FF8 A5 89     LDA 89                   
1FFA 8D FE 0D  STA 0DFE                 
1FFD 20 CD 20  JSR 20CD                 -- collision detection
2000 20 94 20  JSR 2094                 -- update player, move offscreen monsters
2003 AD FE 0D  LDA 0DFE                 
2006 20 E9 20  JSR 20E9                 -- check for block movement
2009 A2 70     LDX #70                  -- reset X to the animation slot 70 before continuing

		-- continue sprite update

200B AD FF 0D  LDA 0DFF                 -- get contents of tile
200E 20 E9 20  JSR 20E9                 -- deal with possibility that sprite may now be off screen

		-- deal with sound of player movement

2011 8A        TXA                      
2012 D0 0C     BNE 2020                 -- branch if not animating player
2014 AD 04 0C  LDA 0C04                 -- get player direction
2017 C9 04     CMP #04                  -- is it still?
2019 F0 05     BEQ 2020                 -- branch if so
201B A9 0A     LDA #0A                  
201D 20 D6 2D  JSR 2DD6                 -- play movement sound

		-- continue sprite update

2020 8A        TXA                      
2021 18        CLC                      
2022 69 10     ADC #10                  -- increment loop counter
2024 AA        TAX                      
2025 BD 00 0C  LDA 0C00,X               -- get slot status/occupant
2028 C9 01     CMP #01                  -- is it occupied by a monster?
202A D0 54     BNE 2080                 -- nope, so continue loop

		-- deal with monster activities such as:
		--	controlling cautious behaviour, 
		--	flittering, 
		--	laying eggs and mushrooms, 
		--	firing at player

202C BD 03 0C  LDA 0C03,X               -- get position between tiles
202F D0 4F     BNE 2080                 -- between tiles, so continue loop

		-- should the monster be cautious?

2031 20 37 2B  JSR 2B37                 -- check behaviour when cautious

		-- check if monster is in egg form

2034 BC 06 0C  LDY 0C06,X               -- get monster id
2037 B9 00 07  LDA 0700,Y               -- get monster movement type
203A 30 47     BMI 2083                 -- branch if negative (monster is an egg)

		-- if monster flitters then toggle the flitter flag

203C 48        PHA                      
203D 29 0F     AND #0F                  -- extract basic monster type
203F 0A        ASL A                    -- double it
2040 0A        ASL A                    -- double it again
2041 A8        TAY                      
2042 B9 92 18  LDA 1892,Y               -- get whether the monster "flitters"
2045 10 08     BPL 204F                 -- branch over if not
2047 BD 07 0C  LDA 0C07,X               -- get current double-speed flag
204A 49 FF     EOR #FF                  -- reverse it
204C 9D 07 0C  STA 0C07,X               -- store new double-speed flag

		-- check for laying egg

204F 68        PLA                      
2050 48        PHA                      
2051 29 40     AND #40                  -- extract whether the monster lays eggs
2053 F0 11     BEQ 2066                 -- it doesn't, so branch
2055 AD 00 0C  LDA 0C00                 -- get player status
2058 C9 05     CMP #05                  -- is it alive?
205A D0 0A     BNE 2066                 -- nope, so branch over
205C 20 80 1E  JSR 1E80                 -- get random number
205F 29 1F     AND #1F                  -- only first 5 bits (0 to 31)
2061 D0 03     BNE 2066                 -- not zero, so branch over
2063 20 BA 28  JSR 28BA                 -- lay egg

		-- check for laying mushroom

2066 68        PLA                      
2067 29 20     AND #20                  -- extract whether the monster lays mushrooms
2069 D0 03     BNE 206E                 -- nope, so branch over
206B 20 5B 2B  JSR 2B5B                 -- possibly lay a mushroom

		-- check for firing at player

206E BC 06 0C  LDY 0C06,X               -- get monster id
2071 B9 C0 04  LDA 04C0,Y               -- get type of movement
2074 10 0A     BPL 2080                 -- branch if the monster doesn't shoot
2076 20 80 1E  JSR 1E80                 -- get random number
2079 29 03     AND #03                  -- extract first 2 bits (0 to 3)
207B F0 03     BEQ 2080                 -- if zero, skip over
207D 20 27 27  JSR 2727                 -- possibly fire at player
2080 4C AF 1F  JMP 1FAF                 -- continue loop

		-- deal with hatching monster

2083 BD 0F 0C  LDA 0C0F,X               -- get delay to hatching
2086 D0 03     BNE 208B                 -- not zero, so continue loop
2088 20 41 28  JSR 2841                 -- hatch from egg to monster
208B 4C AF 1F  JMP 1FAF                 -- continue loop

		-- process sound, update game clock, check for getting fruit/mushroom, do player firing, move off-screen monsters

208E 20 50 1D  JSR 1D50                 -- process playing sounds
2091 20 36 35  JSR 3536                 -- call time passes

2094 20 B3 20  JSR 20B3                 -- check whether got fruit/mushroom?
2097 AD D4 0B  LDA 0BD4                 -- get internal key for fire
209A C5 8C     CMP 8C                   -- is it the same as the last key pressed?
209C F0 0F     BEQ 20AD                 -- yes, so branch to fire
209E C5 8D     CMP 8D                   -- is it the same as the first key pressed?
20A0 F0 0B     BEQ 20AD                 -- yes, so branch to fire
20A2 A9 00     LDA #00                  
20A4 8D C7 0B  STA 0BC7                 -- reset firing flag
20A7 20 7A 2A  JSR 2A7A                 -- deal with control key presses
20AA 4C 91 27  JMP 2791                 -- move off-screen monsters between rooms, add acorns

20AD 20 DD 21  JSR 21DD                 -- fire
20B0 4C A7 20  JMP 20A7                 

		-- check for getting fruit/mushroom

20B3 AD 03 0C  LDA 0C03                 -- get position between tiles
20B6 D0 14     BNE 20CC                 -- not directly on tile so RTS
20B8 AC 01 0C  LDY 0C01                 -- get player tile number
20BB B9 00 0B  LDA 0B00,Y               -- get contents of that tile
20BE C9 5A     CMP #5A                  
20C0 90 03     BCC 20C5                 -- skip jump if less than &5A (apple)
20C2 4C 20 26  JMP 2620                 -- goto routine for dealing with occupying tile with static object
20C5 C9 21     CMP #21                  -- is it poison mushroom?
20C7 D0 03     BNE 20CC                 -- nope, so RTS
20C9 4C 20 26  JMP 2620                 -- goto routine for dealing with occupying tile with static object
20CC 60        RTS                      

		-- check for collision between animations

20CD A5 88     LDA 88                   
20CF 30 11     BMI 20E2                 -- RTS if no collision detected
20D1 8A        TXA                      
20D2 F0 03     BEQ 20D7                 -- skip over if animating player
20D4 4C 21 2E  JMP 2E21                 -- sprite hits sprite

		-- collision between player and something else

20D7 A6 84     LDX 84                   -- set loop counter to the animation slot that was connected with
20D9 A9 00     LDA #00                  
20DB 85 84     STA 84                   -- set the thing being affected to the player
20DD 20 21 2E  JSR 2E21                 -- player hits other sprite
20E0 A2 00     LDX #00                  -- reset main loop counter
20E2 60        RTS                      

		-- check if movement pushed block or went outside room

20E3 8A        TXA                      
20E4 D0 FC     BNE 20E2                 -- RTS if not animating player
20E6 4C 95 29  JMP 2995                 -- check for pushing block

		-- something may have gone off-screen
		-- X is animation slot

20E9 85 89     STA 89                   
20EB C9 1F     CMP #1F                  -- is sprite now off-screen?
20ED D0 F4     BNE 20E3                 -- branch if not
20EF 8A        TXA                      
20F0 F0 03     BEQ 20F5                 -- branch if animating player
20F2 4C 84 21  JMP 2184                 -- potentially move monster's room

		-- player leaving room

20F5 20 C7 22  JSR 22C7                 -- store all monster info

		-- draw tiles 0 to 5 and tiles 10 to 15 which is normally where the heads-up info is displayed

20F8 A9 05     LDA #05                  -- initialise loop counter
20FA 85 84     STA 84                   

20FC A5 84     LDA 84                   
20FE 48        PHA                      
20FF 20 9D 1C  JSR 1C9D                 -- get x and y co-ords for tile number
2102 68        PLA                      
2103 48        PHA                      
2104 20 5C 09  JSR 095C                 -- draw the top level sprite for the tile
2107 68        PLA                      
2108 18        CLC                      
2109 69 0A     ADC #0A                  -- add 10 to tile number
210B 48        PHA                      
210C 20 9D 1C  JSR 1C9D                 -- get screen position for tile number
210F 68        PLA                      
2110 20 5C 09  JSR 095C                 -- draw the top level sprite for the tile
2113 C6 84     DEC 84                   
2115 10 E5     BPL 20FC                 -- continue loop

		-- draw empty tile where player was

2117 AD 01 0C  LDA 0C01                 -- get player tile number
211A 20 9D 1C  JSR 1C9D                 -- get screen position for tile number
211D A9 20     LDA #20                  -- select empty tile sprite
211F 20 23 1C  JSR 1C23                 -- calculate sprite number
2122 20 39 1C  JSR 1C39                 -- draw sprite to screen

2125 AD C6 0B  LDA 0BC6                 -- get current room
2128 8D CC 0B  STA 0BCC                 -- store as previous room number
212B 85 70     STA 70                   
212D 20 1B 22  JSR 221B                 -- calculate new room number into 70, and direction of exit into 72
2130 A5 70     LDA 70                   
2132 8D C6 0B  STA 0BC6                 -- store new room number
2135 20 31 09  JSR 0931                 -- generate room layout
2138 20 5C 22  JSR 225C                 -- check if new level
213B 20 7E 25  JSR 257E                 -- load static objects and crystals
213E 20 AC 23  JSR 23AC                 -- determine new tile number and load monsters
2141 A9 00     LDA #00                  
2143 8D C3 0B  STA 0BC3                 -- moving normally
2146 AD 05 0C  LDA 0C05                 -- get underlying contents of tile
2149 C9 20     CMP #20                  
214B B0 03     BCS 2150                 -- branch if not moving towards block
214D 20 62 2A  JSR 2A62                 -- deal with possibility of moving block

2150 78        SEI                      
2151 A5 72     LDA 72                   -- get direction of travel
2153 D0 09     BNE 215E                 

2155 20 8D 1E  JSR 1E8D                 -- wait for vertical sync
2158 20 0F 0A  JSR 0A0F                 -- draw screen for travelling left 
215B 4C 7E 21  JMP 217E                 

215E C9 01     CMP #01                  
2160 D0 09     BNE 216B                 
2162 20 8D 1E  JSR 1E8D                 -- wait for vertical sync
2165 20 E0 09  JSR 09E0                 -- draw screen for travelling right
2168 4C 7E 21  JMP 217E                 

216B C9 02     CMP #02                  
216D D0 09     BNE 2178                 
216F 20 8D 1E  JSR 1E8D                 -- wait for vertical sync
2172 20 B7 09  JSR 09B7                 -- draw screen for travelling up
2175 4C 7E 21  JMP 217E                 

2178 20 8D 1E  JSR 1E8D                 -- wait for vertical sync
217B 20 90 09  JSR 0990                 -- draw screen for travelling down

217E 58        CLI                      
217F 68        PLA                      
2180 68        PLA                      
2181 4C 9A 1F  JMP 1F9A                 -- jump to initialise main loop

		-- Change monster's room
		-- On entry, X is the monster slot

2184 BD 00 0C  LDA 0C00,X               -- get monster slot type
2187 C9 01     CMP #01                  -- is it 1 (i.e. a monster)
2189 D0 12     BNE 219D                 -- nope, so return
218B BD 06 0C  LDA 0C06,X               -- get monster id
218E A8        TAY                      
218F B9 00 07  LDA 0700,Y               -- get monster type
2192 30 09     BMI 219D                 -- return if negative (an egg)
2194 B9 C0 04  LDA 04C0,Y               -- get type of movement
2197 29 08     AND #08                  -- extract monster stays in room flag
2199 D0 02     BNE 219D                 -- if set then return
219B F0 01     BEQ 219E                 -- jump over RTS
219D 60        RTS                      

219E AD C6 0B  LDA 0BC6                 -- get current room
21A1 85 70     STA 70                   
21A3 20 1B 22  JSR 221B                 -- change room
21A6 A5 72     LDA 72                   -- get direction
21A8 48        PHA                      
21A9 A5 70     LDA 70                   -- get new room
21AB 48        PHA                      
21AC 20 06 26  JSR 2606                 -- get level for new room
21AF CD CD 0B  CMP 0BCD                 -- compare to highest level achieved
21B2 F0 05     BEQ 21B9                 -- same, so branch
21B4 90 03     BCC 21B9                 -- less, so branch
21B6 68        PLA                      
21B7 68        PLA                      
21B8 60        RTS                      -- return

21B9 20 28 19  JSR 1928                 -- draw background tiles behind sprite
21BC A9 38     LDA #38                  
21BE 20 5B 23  JSR 235B                 -- add monster to list of recently met
21C1 BD 06 0C  LDA 0C06,X               -- get monster number
21C4 A8        TAY                      
21C5 20 7B 23  JSR 237B                 -- save energy
21C8 68        PLA                      -- restore room
21C9 99 00 04  STA 0400,Y               -- update room number
21CC 68        PLA                      -- restore direction
21CD 85 72     STA 72                   
21CF 20 8F 23  JSR 238F                 -- calculate new co-ordinates when entering room
21D2 20 90 1C  JSR 1C90                 -- combine x & y back to tile number
21D5 99 80 05  STA 0580,Y               -- update tile number
21D8 A9 12     LDA #12                  
21DA 4C D6 2D  JMP 2DD6                 -- play monster leaves room

		-- player fires

21DD AD C7 0B  LDA 0BC7                 -- get firing flag
21E0 D0 38     BNE 221A                 -- can't fire until flag is zero
21E2 AD 0E 0C  LDA 0C0E		            -- get energy
21E5 C9 04     CMP #04                  
21E7 90 31     BCC 221A                 -- less than 4 so RTS
21E9 AD C3 0B  LDA 0BC3                 
21EC D0 2C     BNE 221A                 
21EE A9 01     LDA #01                  
21F0 8D C7 0B  STA 0BC7                 -- set firing flag to prevent another 
21F3 A5 7E     LDA 7E                   -- get direction faced
21F5 85 71     STA 71                   -- set direction parameter
21F7 29 02     AND #02                  -- extract left/right or up/down
21F9 4A        LSR A                    -- halve it
21FA 18        CLC                      
21FB 69 10     ADC #10                  -- add 10 (result will now be 10 or 11)
21FD 85 72     STA 72                   -- set base animation
21FF A9 08     LDA #08                  
2201 85 73     STA 73                   -- set firing sound parameter to player fire
2203 A9 01     LDA #01                  
2205 85 74     STA 74                   -- set identifier parameter
2207 20 C0 26  JSR 26C0                 -- Fire!
220A CE C8 0B  DEC 0BC8                 -- decrement count of shots
220D 10 0B     BPL 221A                 -- not zero, so RTS
220F A9 03     LDA #03                  
2211 8D C8 0B  STA 0BC8                 -- reset count
2214 CE 0E 0C  DEC 0C0E                 -- decrement energy every 4 shots
2217 20 E9 33  JSR 33E9                 -- redraw energy bar
221A 60        RTS                      

		-- calculate new room number
		-- on entry, X is animation slot number, &70 is current room
		-- on exit, &70 is new room number, &72 is &ff for no change, 0 for went left
		--		1 for went right, 2 for up, 3 for down

221B A9 FF     LDA #FF                  
221D 85 72     STA 72                   -- store default result
221F BD 01 0C  LDA 0C01,X               -- get tile number
2222 20 83 1C  JSR 1C83                 -- seperate into x & y co-ordinates

2225 A5 85     LDA 85                   -- get column
2227 F0 0D     BEQ 2236                 -- if zero, then branch
2229 C9 0F     CMP #0F                  -- is it 15?
222B F0 10     BEQ 223D                 -- yes, so branch
222D A5 86     LDA 86                   -- get row
222F F0 13     BEQ 2244                 -- if zero, then branch
2231 C9 09     CMP #09                  -- is it 9?
2233 F0 1B     BEQ 2250                 -- yes, so branch
2235 60        RTS                      

2236 C6 70     DEC 70                   -- decrement room number
2238 A9 00     LDA #00                  
223A 85 72     STA 72                   -- store 0 (left) in 72
223C 60        RTS                      

223D E6 70     INC 70                   -- increment room number
223F A9 01     LDA #01                  
2241 85 72     STA 72                   -- store 1 (right) in 72
2243 60        RTS                      

2244 A5 70     LDA 70                   -- get room number
2246 18        CLC                      
2247 69 10     ADC #10                  -- add 10
2249 85 70     STA 70                   -- store new room number
224B A9 02     LDA #02                  
224D 85 72     STA 72                   -- store 2 (up) in 72
224F 60        RTS                      

2250 A5 70     LDA 70                   -- get room number
2252 38        SEC                      
2253 E9 10     SBC #10                  -- subtract 10
2255 85 70     STA 70                   -- store new room number
2257 A9 03     LDA #03                  
2259 85 72     STA 72                   -- store 3 (down) in 72
225B 60        RTS                      

		-- enter new room

225C AD CC 0B  LDA 0BCC                 -- get previous room number
225F 20 06 26  JSR 2606                 -- get level number from room number
2262 85 73     STA 73                   
2264 AD C6 0B  LDA 0BC6                 -- get new room number
2267 20 06 26  JSR 2606                 -- get level number from room number
226A C5 73     CMP 73                   
226C F0 47     BEQ 22B5                 -- if level numbers are the same then RTS
226E CD CD 0B  CMP 0BCD                 -- compare to highest level achieved
2271 90 17     BCC 228A                 -- lower level, so branch over to next section
2273 F0 15     BEQ 228A                 -- same level, so branch over to next section

		-- player has entered new level

2275 8D CD 0B  STA 0BCD                 -- update highest level achieved
2278 20 E0 2A  JSR 2AE0                 -- load new set of fruit
227B 85 70     STA 70                   
227D C9 04     CMP #04                  -- has entered level number 4?
227F F0 09     BEQ 228A                 -- yes, so branch over playing sound
2281 48        PHA                      
2282 A9 16     LDA #16                  
2284 20 D6 2D  JSR 2DD6                 -- play new level sound
2287 68        PLA                      
2288 85 70     STA 70                   

		-- calculate which sprites to use for wall and floor

228A A5 72     LDA 72                   
228C 48        PHA                      
228D AD CD 0B  LDA 0BCD                 -- get highest level achieved
2290 30 24     BMI 22B6                 -- branch if in the 2nd world

		-- 1st world sprites set up

2292 A5 70     LDA 70                   -- get current level
2294 0A        ASL A                    -- double it
2295 A8        TAY                      

2296 B9 E0 08  LDA 08E0,Y               
2299 20 23 1C  JSR 1C23                 -- calculate sprite number for wall
229C A5 72     LDA 72                   
229E 85 80     STA 80                   
22A0 A5 73     LDA 73                   
22A2 85 81     STA 81                   

22A4 B9 E1 08  LDA 08E1,Y               
22A7 20 23 1C  JSR 1C23                 -- calculate sprite number
22AA A5 72     LDA 72                   
22AC 85 82     STA 82                   
22AE A5 73     LDA 73                   
22B0 85 83     STA 83                   

22B2 68        PLA                      
22B3 85 72     STA 72                   
22B5 60        RTS                      

		-- 2nd world sprites set up

22B6 A9 1F     LDA #1F                  -- hard coded sprite for wall
22B8 20 23 1C  JSR 1C23                 
22BB A5 72     LDA 72                   
22BD 85 80     STA 80                   
22BF A5 73     LDA 73                   
22C1 85 81     STA 81                   
22C3 A9 15     LDA #15                  -- hard coded sprite for floor
22C5 D0 E0     BNE 22A7                 

		-- store all monster info when leave room

22C7 A2 10     LDX #10                  -- initialise loop counter
22C9 BD 00 0C  LDA 0C00,X               -- load in-use flag
22CC C9 01     CMP #01                  -- is slot in use?
22CE F0 0D     BEQ 22DD                 -- yes, so branch to store info
22D0 A9 00     LDA #00                  
22D2 9D 00 0C  STA 0C00,X               -- clear in-use flag
22D5 8A        TXA                      
22D6 18        CLC                      
22D7 69 10     ADC #10                  -- increment loop counter
22D9 AA        TAX                      
22DA D0 ED     BNE 22C9                 -- continue loop
22DC 60        RTS                      

22DD BD 06 0C  LDA 0C06,X               -- get monster id
22E0 A8        TAY                      -- y = monster id
22E1 BD 01 0C  LDA 0C01,X               
22E4 99 80 05  STA 0580,Y               -- store tile number
22E7 20 7B 23  JSR 237B                 -- store monster energy
22EA B9 00 07  LDA 0700,Y               -- get monster type 
22ED 10 0A     BPL 22F9                 -- branch if not an egg
22EF BD 0F 0C  LDA 0C0F,X               -- get time to hatch
22F2 09 80     ORA #80                  
22F4 99 00 07  STA 0700,Y               -- store remaining countdown
22F7 30 D7     BMI 22D0                 -- continue loop

22F9 A9 06     LDA #06                  
22FB 85 72     STA 72                   -- store 6 in &72
22FD B9 C0 04  LDA 04C0,Y               
2300 29 07     AND #07                  -- get type of movement
2302 C9 03     CMP #03                  
2304 90 CA     BCC 22D0                 -- continue loop if < 3

2306 F0 7A     BEQ 2382                 -- branch if placid
2308 C9 07     CMP #07                  
230A F0 76     BEQ 2382                 -- branch if rolling around
230C C9 06     CMP #06                  
230E F0 09     BEQ 2319                 -- branch if cautious
2310 20 80 1E  JSR 1E80                 -- generate random number
2313 29 1F     AND #1F                  -- between 0 and 31
2315 69 0C     ADC #0C                  -- add 12 (12 and 43)
2317 85 72     STA 72                   -- store for later

2319 B9 C0 04  LDA 04C0,Y               -- get type of movement
231C 29 38     AND #38                  -- reduce to StaysInRoom (8), CanChangeRoom (10), MoveTowardsPlayer (20)
231E C9 30     CMP #30                  -- Is it CanChangeRoom + MoveTowardsPlayer and not StaysInRoom
2320 D0 60     BNE 2382                 -- Nope? then branch

2322 AD 01 0C  LDA 0C01                 -- get current player tile number
2325 20 83 1C  JSR 1C83                 -- split into row (&86) and column (&85)
2328 A5 85     LDA 85                   
232A 85 70     STA 70                   -- store player column
232C A5 86     LDA 86                   
232E 85 71     STA 71                   -- store player row
2330 BD 01 0C  LDA 0C01,X               -- get monster tile number
2333 20 83 1C  JSR 1C83                 -- split into row (&86) and column (&85)
2336 A5 70     LDA 70                   
2338 38        SEC                      
2339 E5 85     SBC 85                   
233B 10 05     BPL 2342                 -- branch if player column is greater
233D 49 FF     EOR #FF                  
233F 18        CLC                      
2340 69 01     ADC #01                  -- negate the difference (to make +ve number)

2342 85 70     STA 70                   -- store how far away the monster is (columns)
2344 A5 71     LDA 71                   -- get player row
2346 38        SEC                      
2347 E5 86     SBC 86                   -- deduct monster row
2349 10 05     BPL 2350                 
234B 49 FF     EOR #FF                  
234D 18        CLC                      
234E 69 01     ADC #01                  -- negate the result (to make +ve number)

2350 18        CLC                      
2351 65 70     ADC 70                   -- add the columns distance
2353 65 72     ADC 72                   -- add 6 if cautious or random number between 12 and 43
2355 20 5B 23  JSR 235B                 
2358 4C D0 22  JMP 22D0                 -- continue loop

		-- insert item into monster countdown list

235B 48        PHA                      -- push delay
235C A0 0E     LDY #0E                  -- initialise loop counter
235E B9 E0 0B  LDA 0BE0,Y               
2361 C9 FF     CMP #FF                  
2363 F0 06     BEQ 236B                 -- branch if found free slot
2365 88        DEY                      
2366 88        DEY                      
2367 10 F5     BPL 235E                 -- loop
2369 30 0E     BMI 2379                 -- no free slots
236B 8D C9 0B  STA 0BC9                 -- store &FF in the flag for the recent monster list
236E BD 06 0C  LDA 0C06,X               -- get monster id
2371 99 E0 0B  STA 0BE0,Y               -- store in slot
2374 68        PLA                      -- get delay
2375 48        PHA                      
2376 99 E1 0B  STA 0BE1,Y               -- store in slot
2379 68        PLA                      
237A 60        RTS                      

237B BD 0E 0C  LDA 0C0E,X               -- cache energy
237E 99 40 06  STA 0640,Y               
2381 60        RTS                      

-- delay to use when placid or rolling
2382 20 80 1E  JSR 1E80                 -- generate random number
2385 29 0F     AND #0F                  -- between 0 and 15
2387 69 30     ADC #30                  -- add 48
2389 20 5B 23  JSR 235B                 
238C 4C D0 22  JMP 22D0                 -- continue loop

-------------

		-- calculate new co-ordinates when entering room
		-- on entry X is the animation slot, 72 indicates the direction of exit (0 left, 1 right, 2 up, 3 down)
		-- on exit, 85 and 86 contain the new x and y co-ordinates

238F BD 01 0C  LDA 0C01,X               -- get tile position
2392 20 83 1C  JSR 1C83                 -- seperate out into row and column
2395 A5 72     LDA 72                   
2397 29 02     AND #02                  -- test bit 1 of direction (up or down)
2399 F0 09     BEQ 23A4                 -- branch if left/right
239B A9 09     LDA #09                  -- from 9...
239D 38        SEC                      
239E E5 86     SBC 86                   -- take away the row number
23A0 85 86     STA 86                   -- and store
23A2 B0 07     BCS 23AB                 -- rts

23A4 A9 0F     LDA #0F                  -- from 15
23A6 38        SEC                      
23A7 E5 85     SBC 85                   -- take away the column number
23A9 85 85     STA 85                   -- and store
23AB 60        RTS                      

		-- determine new tile number

23AC A2 00     LDX #00                  -- set x to player's animation slot
23AE 20 8F 23  JSR 238F                 -- calculate new co-ordinates when entering room
23B1 20 90 1C  JSR 1C90                 -- combine x and y
23B4 8D 01 0C  STA 0C01                 -- store player's new tile position
23B7 A8        TAY                      
23B8 B9 00 0B  LDA 0B00,Y               -- get contents of tile
23BB 8D 05 0C  STA 0C05                 -- store the underlying contents of the tile
23BE A9 04     LDA #04                  -- direction = not moving
23C0 8D 04 0C  STA 0C04                 -- store in direction
23C3 8D C4 0B  STA 0BC4                 
23C6 20 0F 1D  JSR 1D0F                 -- initialise player's animation slot

		-- load monsters into room

23C9 A9 BF     LDA #BF                  
23CB 85 73     STA 73                   
23CD A4 73     LDY 73                   -- loop body
23CF AD C6 0B  LDA 0BC6                 -- get current rooom number
23D2 D9 00 04  CMP 0400,Y               -- get room number of monster
23D5 F0 06     BEQ 23DD                 -- branch if the same
23D7 88        DEY                      
23D8 C0 FF     CPY #FF                  
23DA D0 F6     BNE 23D2                 -- loop
23DC 60        RTS                      

23DD 88        DEY                      -- y contains monster id
23DE 84 73     STY 73                   
23E0 C8        INY                      
23E1 A6 74     LDX 74                   
23E3 E0 E0     CPX #E0                  
23E5 F0 F5     BEQ 23DC                 -- rts
23E7 B9 80 05  LDA 0580,Y               -- get tile number
23EA 9D 01 0C  STA 0C01,X               
23ED 48        PHA                      
23EE 20 AE 24  JSR 24AE                 -- load monster from cache
23F1 68        PLA                      
23F2 C9 FF     CMP #FF                  -- is tile number set?
23F4 D0 13     BNE 2409                 -- tile number is set, so branch
23F6 20 80 1E  JSR 1E80                 -- get random number
23F9 48        PHA                      
23FA 29 07     AND #07                  -- 1st 3 bits (between 0 and 7)
23FC 18        CLC                      
23FD 69 04     ADC #04                  -- add 4 (column between 4 and 12)
23FF 85 8F     STA 8F                   -- store temporarily
2401 68        PLA                      
2402 29 30     AND #30                  -- bit 4 and 5 (row is 0 to 3)
2404 18        CLC                      
2405 69 30     ADC #30                  -- add &30 (row is 3 to 6)
2407 65 8F     ADC 8F                   -- add column number
2409 A8        TAY                      
240A B9 00 0B  LDA 0B00,Y               -- get object at that tile position
240D C9 14     CMP #14                  
240F 90 E5     BCC 23F6                 -- can't use that tile, so branch
2411 98        TYA                      
2412 9D 01 0C  STA 0C01,X               -- store new tile position
2415 20 83 1C  JSR 1C83                 -- seperate out row and column
2418 BD 0F 0C  LDA 0C0F,X               -- get character movement
241B C9 83     CMP #83                  
241D 90 16     BCC 2435                 -- branch if patrolling
241F 20 80 1E  JSR 1E80                 -- get random number
2422 29 03     AND #03                  -- from 0 to 3, a random direction
2424 20 F1 1C  JSR 1CF1                 -- get tile at potential new position
2427 C9 14     CMP #14                  
2429 90 0A     BCC 2435                 -- branch if less than 14 (direction not possible)
242B C9 1F     CMP #1F                  
242D F0 06     BEQ 2435                 -- tile is off screen
242F 20 90 1C  JSR 1C90                 -- combine column and row
2432 9D 01 0C  STA 0C01,X               -- store new tile number

2435 BD 01 0C  LDA 0C01,X               -- get tile number
2438 20 83 1C  JSR 1C83                 -- split into column and row
243B A5 72     LDA 72                   
243D 29 02     AND #02                  -- test bit 1 - up/down ?
243F F0 12     BEQ 2453                 
2441 A5 86     LDA 86                   -- get row
2443 85 75     STA 75                   
2445 AD 01 0C  LDA 0C01                 -- get player tile
2448 20 83 1C  JSR 1C83                 -- seperate out into row & column
244B A5 86     LDA 86                   -- get player row
244D C5 75     CMP 75                   -- compare to monster row
244F F0 14     BEQ 2465                 -- branch if same
2451 D0 36     BNE 2489                 -- Jump

2453 A5 85     LDA 85                   -- get column
2455 85 75     STA 75                   
2457 AD 01 0C  LDA 0C01                 -- get player tile
245A 20 83 1C  JSR 1C83                 -- seperate out into row & column
245D A5 85     LDA 85                   -- get player column
245F C5 75     CMP 75                   -- compare to monster column
2461 F0 02     BEQ 2465                 -- branch if same
2463 D0 24     BNE 2489                 -- Jump

2465 BD 0F 0C  LDA 0C0F,X               -- get monster movement
2468 C9 83     CMP #83                  -- static or patrolling?
246A 90 2C     BCC 2498                 -- yes, branch
246C BD 01 0C  LDA 0C01,X               -- get monster tile
246F 20 83 1C  JSR 1C83                 -- separate into row & column
2472 A5 72     LDA 72                   -- get direction
2474 20 67 1C  JSR 1C67                 -- adjust position for direction
2477 20 90 1C  JSR 1C90                 -- combine row & column
247A A8        TAY                      
247B B9 00 0B  LDA 0B00,Y               -- get contents of tile
247E C9 14     CMP #14                  
2480 B0 03     BCS 2485                 -- branch if 14 or more
2482 4C F6 23  JMP 23F6                 -- jump to select a random tile routine
2485 98        TYA                      
2486 9D 01 0C  STA 0C01,X               -- store new tile number

2489 BD 0F 0C  LDA 0C0F,X               -- get monster movement
248C C9 83     CMP #83                  -- static or patrolling?
248E 90 08     BCC 2498                 -- yes, branch
2490 20 80 1E  JSR 1E80                 -- get random number
2493 29 03     AND #03                  -- from 0 to 3
2495 9D 04 0C  STA 0C04,X               -- store direction of travel

2498 20 F6 1A  JSR 1AF6                 -- check direction, change if necessary
249B 20 0F 1D  JSR 1D0F                 -- initialise monster data at 0c00
249E 8A        TXA                      
249F 18        CLC                      
24A0 69 10     ADC #10                  -- increment loop counter
24A2 85 74     STA 74                   
24A4 A5 73     LDA 73                   
24A6 C9 FF     CMP #FF                  
24A8 F0 03     BEQ 24AD                 
24AA 4C CD 23  JMP 23CD                 -- loop
24AD 60        RTS                      

		-- load monster from cache into current room
		-- on entry
		--	X is the slot in c00 to load data into
		--	y is the monster number

24AE A9 04     LDA #04                  
24B0 9D 04 0C  STA 0C04,X               -- set direction to still
24B3 98        TYA                      
24B4 9D 06 0C  STA 0C06,X               -- store monster id
24B7 B9 40 06  LDA 0640,Y               
24BA 9D 0E 0C  STA 0C0E,X               -- store monster energy
24BD A9 01     LDA #01                  
24BF 9D 00 0C  STA 0C00,X               -- set slot to occupied
24C2 9D 0A 0C  STA 0C0A,X               -- set count of animation frames to 2
24C5 B9 00 07  LDA 0700,Y               -- get monster type
24C8 30 6D     BMI 2537                 -- negative, so branch to set up egg animation
24CA 29 0F     AND #0F                  -- get lower nibble
24CC D0 0A     BNE 24D8                 -- if not force field, then skip next bit

24CE BC 01 0C  LDY 0C01,X               -- get tile number
24D1 A9 15     LDA #15                  
24D3 99 00 0B  STA 0B00,Y               -- store in room contents
24D6 A9 00     LDA #00                  

24D8 0A        ASL A                    -- multiply by 4 to get index into lookup table
24D9 0A        ASL A                    
24DA A8        TAY                      
24DB B9 90 18  LDA 1890,Y               
24DE 9D 09 0C  STA 0C09,X               -- store animation base index
24E1 B9 91 18  LDA 1891,Y               
24E4 9D 0A 0C  STA 0C0A,X               -- store count of frames
24E7 B9 92 18  LDA 1892,Y               
24EA 9D 07 0C  STA 0C07,X               -- store double speed flag (for flittering)
24ED B9 93 18  LDA 1893,Y               
24F0 9D 0B 0C  STA 0C0B,X               -- store time to show each frame
24F3 BC 06 0C  LDY 0C06,X               -- get monster id
24F6 B9 C0 04  LDA 04C0,Y               -- get type of movement
24F9 48        PHA                      
24FA 29 07     AND #07                  -- get bits 0, 1 and 2
24FC C9 05     CMP #05                  
24FE 90 03     BCC 2503                 -- if 4 or less then skip
2500 18        CLC                      
2501 69 01     ADC #01                  -- add 1

2503 18        CLC                      
2504 69 80     ADC #80                  -- add &80
2506 9D 0F 0C  STA 0C0F,X               -- store as monster movement type
2509 68        PLA                      -- restore type of movement
250A 48        PHA                      
250B 29 08     AND #08                  -- get bit 3
250D D0 04     BNE 2513                 -- when set, skip next bit
250F 68        PLA                      -- restore monster movement type
2510 09 10     ORA #10                  -- set bit 4 - monster can now move between rooms
2512 48        PHA                      

2513 68        PLA                      
2514 99 C0 04  STA 04C0,Y               -- store revised monster movement type

2517 BD 0F 0C  LDA 0C0F,X               -- get monster movement type
251A C9 84     CMP #84                  -- should it be full pursuit?
251C F0 13     BEQ 2531                 -- yes, so branch
251E C9 83     CMP #83                  
2520 B0 8B     BCS 24AD                 -- 83 or above then RTS     
2522 C9 80     CMP #80                  
2524 F0 87     BEQ 24AD                 -- 80 then RTS

2526 29 02     AND #02                  -- get type of patrol
2528 9D 04 0C  STA 0C04,X               -- store the appropriate direction (left or up)
252B A9 82     LDA #82                  
252D 9D 0F 0C  STA 0C0F,X               -- set type of movement to patrol
2530 60        RTS                      

2531 A9 81     LDA #81                  -- set monster movement to full pursuit
2533 9D 0F 0C  STA 0C0F,X               
2536 60        RTS                      

		-- set up egg animation

2537 29 7F     AND #7F                  -- remove bit 7
2539 09 01     ORA #01                  -- set bit 1 (so will always be at least 1)
253B 9D 0F 0C  STA 0C0F,X               -- store egg as monster movement type
253E A9 52     LDA #52                  
2540 9D 09 0C  STA 0C09,X               -- store animation base index
2543 A9 02     LDA #02                  
2545 9D 0B 0C  STA 0C0B,X               -- store time to show each frame
2548 60        RTS                      

		-- find matching value for tile number y in range 0e80 to 0eff, returning position in y

2549 84 74     STY 74            
254B A0 80     LDY #80                  
254D 20 8B 25  JSR 258B                 
2550 30 07     BMI 2559                 
2552 B9 80 0E  LDA 0E80,Y               
2555 C5 74     CMP 74                   
2557 D0 F4     BNE 254D                 
2559 60        RTS

		-- get type of item at tile number Y
                      
255A 20 49 25  JSR 2549                 -- get item given by y
255D 30 04     BMI 2563                 
255F B9 00 0F  LDA 0F00,Y               -- what type of item is it?
2562 60        RTS                      
2563 A9 20     LDA #20                  -- nothing found,
2565 60        RTS                      

2566 20 49 25  JSR 2549                 
2569 30 2D     BMI 2598                 

		-- clear static object info

256B A9 FF     LDA #FF                  
256D 99 00 0E  STA 0E00,Y               
2570 99 80 0E  STA 0E80,Y               
2573 A4 74     LDY 74                   
2575 20 5A 25  JSR 255A                 -- get object type
2578 A4 74     LDY 74                   
257A 99 00 0B  STA 0B00,Y               -- store object type in map of room
257D 60        RTS

		-- load static objects & crystals into room

257E A0 80     LDY #80                  -- initialise loop counter
2580 20 8B 25  JSR 258B                 -- get next static object in the same room
2583 30 3A     BMI 25BF                 -- -ve so nothing more found, branch
2585 20 99 25  JSR 2599                 -- load static object into room
2588 4C 80 25  JMP 2580                 -- continue loop

		-- find next static object that is located in the current room

258B 88        DEY						
258C 30 0A     BMI 2598                 
258E B9 00 0E  LDA 0E00,Y               -- get room number
2591 CD C6 0B  CMP 0BC6                 -- compare to current room
2594 F0 02     BEQ 2598                 -- match, so RTS
2596 D0 F3     BNE 258B                 -- continue loop
2598 60        RTS                      

	-- load static object from cache
	-- on entry, y indicates index of object
	-- tile number of static object may be altered if already occupied

2599 B9 80 0E  LDA 0E80,Y               -- get tile number for the specified static object
259C C9 FF     CMP #FF                  
259E D0 08     BNE 25A8                 -- if not already occupied then branch
25A0 20 80 1E  JSR 1E80                 -- get random number
25A3 29 7F     AND #7F                  -- from 0 to &7F
25A5 18        CLC                      
25A6 69 08     ADC #08                  -- Add 8 (8 to &87)

25A8 AA        TAX                      
25A9 BD 00 0B  LDA 0B00,X               -- get contents 
25AC C9 13     CMP #13                  
25AE 90 F0     BCC 25A0                 -- less than 13 so continue loop
25B0 C9 20     CMP #20                  
25B2 D0 E4     BNE 2598                 -- not &20 then RTS
25B4 8A        TXA                      
25B5 99 80 0E  STA 0E80,Y               
25B8 B9 00 0F  LDA 0F00,Y               
25BB 9D 00 0B  STA 0B00,X               
25BE 60        RTS                      

		-- check and load crystal if it's in the same room

25BF A2 10     LDX #10                  -- initialise for 1st room slot
25C1 86 74     STX 74                   
25C3 A0 0E     LDY #0E                  -- initialise loop counter
25C5 AD C6 0B  LDA 0BC6                 -- get current room
25C8 D9 F0 0B  CMP 0BF0,Y               -- compare to crystal room
25CB F0 05     BEQ 25D2                 -- match, so branch to load routine
25CD 88        DEY                      
25CE 88        DEY                      
25CF 10 F7     BPL 25C8                 -- continue loop
25D1 60        RTS                      

		-- load crystal details into room
		-- on entry, x is the slot to use, y is the crystal number

25D2 A9 04     LDA #04                  
25D4 9D 00 0C  STA 0C00,X               -- animation slot contains crystal
25D7 9D 04 0C  STA 0C04,X               -- direction is still
25DA B9 F1 0B  LDA 0BF1,Y               -- get tile number
25DD 9D 01 0C  STA 0C01,X               
25E0 9D 02 0C  STA 0C02,X               
25E3 98        TYA                      
25E4 9D 06 0C  STA 0C06,X               -- set id
25E7 A9 58     LDA #58                  
25E9 9D 09 0C  STA 0C09,X               -- set base animation no.
25EC A9 01     LDA #01                  
25EE 9D 0A 0C  STA 0C0A,X               -- animation contains 2 frames
25F1 A9 03     LDA #03                  
25F3 9D 0B 0C  STA 0C0B,X               -- each frame is shown for 4 beats
25F6 A9 80     LDA #80                  
25F8 9D 0F 0C  STA 0C0F,X               
25FB 20 0F 1D  JSR 1D0F                 -- other initialisation for slot
25FE 8A        TXA                      
25FF 18        CLC                      
2600 69 10     ADC #10                  
2602 AA        TAX                      
2603 86 74     STX 74                   
2605 60        RTS                      

		-- Calculate level that room is in
		-- on entry, A is the room number
		-- on exit, A is the level (0 to 7), &70 is the same

2606 48        PHA                      
2607 29 0F     AND #0F					-- extract position on x-axis
2609 4A        LSR A                    -- divide by 2
260A 4A        LSR A                    -- divide by 2 (or 4 in total) leaving a figure between 0 and 3
260B 85 70     STA 70                   -- store
260D 68        PLA                      
260E 29 40     AND #40                  -- extract whether in top half or bottom half of world
2610 4A        LSR A                    -- divide by 2
2611 4A        LSR A                    -- divide by 2 (or 4 in total)
2612 4A        LSR A                    -- divide by 2 (or 8 in total)
2613 4A        LSR A                    -- divide by 2 (or 16 in total) leaving either 0 or 4
2614 18        CLC                      
2615 65 70     ADC 70                   -- add first value, so we have 0 to 3 on bottom half, or 4 to 7 on top half
2617 C9 04     CMP #04                  
2619 90 02     BCC 261D                 -- branch if on bottom half of map
261B 49 03     EOR #03                  -- reverse bits, 4 becomes 7, 5 becomes 6, 6 becomes 5, 7 becomes 4
261D 85 70     STA 70                   
261F 60        RTS                      

		-- on tile with static object

2620 AD 00 0C  LDA 0C00					-- get player status
2623 C9 05     CMP #05                  -- is player alive?
2625 D0 28     BNE 264F                 -- if no then rts
2627 AC 01 0C  LDY 0C01                 -- get player tile number
262A 20 49 25  JSR 2549                 -- get position into y
262D 30 20     BMI 264F                 -- not found then jump to exit
262F B9 00 0F  LDA 0F00,Y               
2632 C9 21     CMP #21                  
2634 F0 1A     BEQ 2650                 
2636 B9 80 0F  LDA 0F80,Y               
2639 18        CLC                      
263A 6D 0E 0C  ADC 0C0E                 -- add fruit energy
263D 90 02     BCC 2641                 
263F A9 FF     LDA #FF                  
2641 8D 0E 0C  STA 0C0E                 
2644 A9 02     LDA #02                  
2646 20 D6 2D  JSR 2DD6                 -- play energy rise sound

2649 20 6B 25  JSR 256B                 -- clear information about fruit/mushroom
264C 20 E9 33  JSR 33E9                 -- update energy bar (probably)
264F 60        RTS                      

		-- poisoned by mushroom, so reduce player's energy to 75% of previous value

2650 AD 0E 0C  LDA 0C0E					-- calculate energy to remove, starting with player's current energy
2653 4A        LSR A                    -- halve it
2654 4A        LSR A                    -- halve it again
2655 38        SEC                      
2656 ED 0E 0C  SBC 0C0E                 -- subtract the player's energy to leave a negative value
2659 49 FF     EOR #FF                  
265B 18        CLC                      
265C 69 01     ADC #01                  -- negate the negative value to give a positive result which is the player's remaining energy
265E F0 0B     BEQ 266B                 -- branch if the player has no energy left
2660 8D 0E 0C  STA 0C0E                 -- store new energy
2663 A9 04     LDA #04                  
2665 20 D6 2D  JSR 2DD6					-- play clang sound               
2668 4C 49 26  JMP 2649                 -- remove the mushroom from the world

266B 20 6B 25  JSR 256B                 -- clear information about fruit/mushroom
266E 4C 82 2E  JMP 2E82					-- player dies

		-- convert value in A to Binary Coded Decimal
		-- on exit, 70 contains low order of score to add, 71 contains high order of score to add

2671 48        PHA                      
2672 29 0F     AND #0F                  
2674 A8        TAY                      
2675 B9 00 44  LDA 4400,Y               
2678 85 70     STA 70                   
267A 68        PLA                      
267B 48        PHA                      
267C 4A        LSR A                    
267D 4A        LSR A                    
267E 4A        LSR A                    
267F 4A        LSR A                    
2680 29 0F     AND #0F                  
2682 A8        TAY                      
2683 B9 10 44  LDA 4410,Y               
2686 F8        SED                      
2687 18        CLC                      
2688 65 70     ADC 70                   
268A 85 70     STA 70                   
268C D8        CLD                      
268D A9 00     LDA #00                  
268F 85 71     STA 71                   
2691 68        PLA                      
2692 C9 64     CMP #64                  
2694 90 08     BCC 269E                 
2696 E6 71     INC 71                   
2698 C9 C8     CMP #C8                  
269A 90 02     BCC 269E                 
269C E6 71     INC 71                   
269E 60        RTS                      

		-- add to player's score
		-- on entry A is the amount to add to the score (divided by 10)

269F 20 71 26  JSR 2671					-- scoring (entry point to convert to bcd)

		-- alternative entry point where amount is already in BCD form

26A2 18        CLC						
26A3 A5 70     LDA 70                  
26A5 F8        SED                      
26A6 6D D5 0B  ADC 0BD5                 
26A9 8D D5 0B  STA 0BD5                 
26AC A5 71     LDA 71                   
26AE 6D D6 0B  ADC 0BD6                 
26B1 8D D6 0B  STA 0BD6                 
26B4 A9 00     LDA #00                  
26B6 6D D7 0B  ADC 0BD7                 
26B9 8D D7 0B  STA 0BD7                 
26BC D8        CLD                      
26BD 4C AC 33  JMP 33AC                 -- redraw score

		-- fire shot
		-- on entry, 
		--	X is the animation slot firing, 
		--	&71 is the direction,
		--	&72 is the base animation,
		--	&73 is the sound to play,
		--	&74 is the identifier

26C0 A0 E0     LDY #E0                  
26C2 20 1A 27  JSR 271A                 -- find an empty animation slot
26C5 98        TYA                      
26C6 F0 5E     BEQ 2726                 -- no free slots, RTS
26C8 85 75     STA 75                   
26CA BD 01 0C  LDA 0C01,X               -- get source tile
26CD 99 01 0C  STA 0C01,Y               
26D0 99 02 0C  STA 0C02,Y               -- store as shot position
26D3 A8        TAY                      
26D4 20 83 1C  JSR 1C83                 -- separate out tile into x & y
26D7 B9 00 0B  LDA 0B00,Y               -- get object at tile 
26DA C9 13     CMP #13                  -- is it block?
26DC F0 48     BEQ 2726                 -- yes, so RTS
26DE A4 75     LDY 75                   
26E0 A5 71     LDA 71                   
26E2 99 04 0C  STA 0C04,Y               -- store direction
26E5 20 F1 1C  JSR 1CF1                 -- get contents of next tile in direction
26E8 C9 13     CMP #13                  -- is it a wall or block?
26EA 90 3A     BCC 2726                 -- yes, so RTS
26EC D0 09     BNE 26F7                 -- not block then branch
26EE A5 71     LDA 71                   
26F0 20 F1 1C  JSR 1CF1                 -- get contents of next tile in direction (2 tiles away)
26F3 C9 13     CMP #13                  -- is it wall?
26F5 90 2F     BCC 2726                 -- yes, so RTS (can't fire at block if it's against a wall)

26F7 A4 75     LDY 75                   
26F9 BD 0E 0C  LDA 0C0E,X               -- get energy of firer
26FC 4A        LSR A                    -- halve it
26FD 4A        LSR A                    -- halve it again
26FE 99 0E 0C  STA 0C0E,Y               -- store the resulting value as the energy of the shot
2701 A9 FF     LDA #FF                  
2703 99 00 0C  STA 0C00,Y               -- set the slot's status/occupant to be a shot
2706 A5 72     LDA 72                   
2708 99 09 0C  STA 0C09,Y               -- set base animation (should be 10 for player or 4d for monster)
270B A9 01     LDA #01                  
270D 99 03 0C  STA 0C03,Y               -- set position between tiles
2710 A5 74     LDA 74                   
2712 99 06 0C  STA 0C06,Y               -- set identifier
2715 A5 73     LDA 73                   
2717 4C D6 2D  JMP 2DD6                 -- play firing sound

		-- Find an empty monster data slot in c00 (moving down in memory)
		-- on entry, Y is the initialised loop counter, e.g. E0 or B0
		-- on exit, Y is the location of the slot, or 0 if nothing available

271A B9 00 0C  LDA 0C00,Y               -- get slot header
271D F0 07     BEQ 2726                 -- if zero then it's empty
271F 98        TYA                      
2720 38        SEC                      
2721 E9 10     SBC #10                  
2723 A8        TAY                      
2724 D0 F4     BNE 271A                 
2726 60        RTS                      

		-- potentially fire at player

2727 8A        TXA                      
2728 48        PHA                      
2729 85 74     STA 74                   -- store identifier parameter
272B BD 0E 0C  LDA 0C0E,X               -- get monster energy
272E C9 04     CMP #04                  
2730 90 46     BCC 2778                 -- less than 4 then RTS
2732 AD 00 0C  LDA 0C00                 -- get player status
2735 C9 05     CMP #05                  
2737 D0 3F     BNE 2778                 -- if not alive, then RTS
2739 AD 01 0C  LDA 0C01                 -- get player's tile
273C 20 83 1C  JSR 1C83                 -- seperate out into x & y
273F 20 7B 27  JSR 277B                 -- get distance to player row
2742 F0 14     BEQ 2758                 -- same row then branch
2744 20 88 27  JSR 2788                 -- get distance to player column
2747 D0 2F     BNE 2778                 -- not equal, so RTS
2749 A9 02     LDA #02                  
274B 85 71     STA 71                   -- set default direction to up
274D 20 7B 27  JSR 277B                 -- get distance to player row
2750 B0 13     BCS 2765                 -- the same or greater, so branch
2752 A9 03     LDA #03                  
2754 85 71     STA 71                   -- set direction to down
2756 D0 0D     BNE 2765                 -- JUMP

2758 A9 01     LDA #01                  
275A 85 71     STA 71                   -- set direction to right
275C 20 88 27  JSR 2788                 -- get distance to player column
275F 90 04     BCC 2765                 -- okay, so branch
2761 A9 00     LDA #00                  
2763 85 71     STA 71                   -- set direction to left

2765 A5 71     LDA 71                   -- get direction
2767 29 02     AND #02                  -- is it up/down or left/right?
2769 4A        LSR A                    -- move to bit 0
276A 18        CLC                      
276B 69 4D     ADC #4D                  -- calculate sprite number
276D 85 72     STA 72                   -- store base animation sprite number parameter
276F A9 09     LDA #09                  
2771 85 73     STA 73                   -- set sound number parameter
2773 A0 D0     LDY #D0                  -- set initial animation slot to search down from
2775 20 C2 26  JSR 26C2                 -- Fire!
2778 68        PLA                      
2779 AA        TAX                      
277A 60        RTS                      

277B BD 01 0C  LDA 0C01,X               -- get tile number
277E 29 F0     AND #F0                  -- just the row number
2780 4A        LSR A                    
2781 4A        LSR A                    
2782 4A        LSR A                    
2783 4A        LSR A                    -- move to bits 0 to 3
2784 38        SEC                      
2785 E5 86     SBC 86                   -- subtract player row
2787 60        RTS                      

2788 BD 01 0C  LDA 0C01,X               -- get tile number
278B 29 0F     AND #0F                  -- just the column number
278D 38        SEC                      
278E E5 85     SBC 85                   -- subtract player column
2790 60        RTS                      

		-- potentially move monsters to other rooms 

2791 20 80 1E  JSR 1E80                 -- get random number
2794 10 03     BPL 2799                 -- if +ve then branch over jump
2796 4C 09 28  JMP 2809                 -- goto add acorn routine

2799 AD C9 0B  LDA 0BC9                 -- get flag which indicates that there's an entry in the recent monster list
279C F0 57     BEQ 27F5                 -- branch when zero (nothing in list) to check countdown

		-- run through list of monsters recently seen, decrement count, when 0 then clear tile number

279E A9 00     LDA #00                  
27A0 8D CA 0B  STA 0BCA                 -- initialise count of occupied slots
27A3 A0 0E     LDY #0E                  -- initialise loop counter

27A5 B9 E0 0B  LDA 0BE0,Y               -- loop body
27A8 C9 FF     CMP #FF                  
27AA F0 3C     BEQ 27E8                 -- continue loop if slot unoccupied

27AC EE CA 0B  INC 0BCA                 -- increment count of occupied slots
27AF B9 E1 0B  LDA 0BE1,Y               -- get delay counter
27B2 38        SEC                      
27B3 E9 01     SBC #01                  -- decrement delay
27B5 99 E1 0B  STA 0BE1,Y               -- store new value
27B8 10 2E     BPL 27E8                 -- not zero then continue loop

27BA B9 E0 0B  LDA 0BE0,Y               -- get monster id
27BD 48        PHA                      
27BE A9 FF     LDA #FF                  
27C0 99 E0 0B  STA 0BE0,Y               -- mark slot unoccupied
27C3 68        PLA                      
27C4 A8        TAY                      
27C5 B9 C0 04  LDA 04C0,Y               -- get monster movement type
27C8 29 07     AND #07                  -- first 3 bits
27CA C9 07     CMP #07                  
27CC F0 13     BEQ 27E1                 -- if rolling movement then branch to set imprecise tile number
27CE C9 03     CMP #03                  
27D0 F0 0F     BEQ 27E1                 -- if placid then branch to set imprecise tile number
27D2 90 34     BCC 2808					-- static or patrolling then end routine

27D4 B9 C0 04  LDA 04C0,Y               -- get monster movement type
27D7 29 38     AND #38                  -- masking
27D9 C9 30     CMP #30                  -- is monster not staying in room, able to move rooms, and following player?
27DB D0 04     BNE 27E1                 -- nope, so branch to set as imprecise tile number
27DD 98        TYA                      
27DE 4C 05 28  JMP 2805                 -- change room number and end routine

27E1 A9 FF     LDA #FF                  -- indicates imprecise tile
27E3 99 80 05  STA 0580,Y               -- store as tile number
27E6 30 20     BMI 2808                 -- RTS

27E8 88        DEY                      -- update loop counter
27E9 88        DEY                      
27EA 10 B9     BPL 27A5                 -- continue looping

27EC AD CA 0B  LDA 0BCA                 -- how long was the list?
27EF D0 17     BNE 2808                 -- RTS if not zero
27F1 8D C9 0B  STA 0BC9                 -- store zero in the flag
27F4 60        RTS                      

		-- check countdown

27F5 AD CE 0B  LDA 0BCE                 -- get countdown
27F8 30 04     BMI 27FE                 -- branch when negative to choose random monster
27FA CE CE 0B  DEC 0BCE                 -- decrement countdown
27FD 60        RTS                      

		-- select a random monster to change rooms

27FE 20 80 1E  JSR 1E80                 -- get random number
2801 C9 C0     CMP #C0                  
2803 B0 F9     BCS 27FE                 -- must be below C0 to be a valid monster number

2805 20 FE 31  JSR 31FE                 -- possibly change the monster's room
2808 60        RTS                      

		-- try to add an acorn to a random room

2809 AD CD 0B  LDA 0BCD                 -- get highest level achieved
280C 10 32     BPL 2840                 -- if 1st world then RTS

		-- continue only in 2nd world

280E AD D9 0B  LDA 0BD9                 -- get current game ticks
2811 29 7F     AND #7F                  -- clear top bit leaving a number between decimal 0 and 127
2813 C9 78     CMP #78                  
2815 B0 29     BCS 2840                 -- if decimal 120 or more than RTS
2817 A8        TAY                      
2818 B9 00 0E  LDA 0E00,Y               -- get static content room for slot Y
281B C9 FF     CMP #FF                  -- is it already occupied?
281D D0 21     BNE 2840                 -- yes, so RTS
281F 20 80 1E  JSR 1E80                 -- get random number 
2822 29 7F     AND #7F                  -- between 0 and &7F (room number)
2824 CD C6 0B  CMP 0BC6                 -- is it the same as the current room?
2827 F0 17     BEQ 2840                 -- yes, so RTS
2829 CD CC 0B  CMP 0BCC                 -- is it the same as the last room?
282C F0 12     BEQ 2840                 -- yes, so RTS
282E 99 00 0E  STA 0E00,Y               -- store the room number
2831 A9 FF     LDA #FF                  
2833 99 80 0E  STA 0E80,Y               -- store indeterminate tile number for object
2836 A9 5F     LDA #5F                  
2838 99 00 0F  STA 0F00,Y               -- store &5F (acorn) in type of object list
283B A9 20     LDA #20                  
283D 99 80 0F  STA 0F80,Y               -- store &20 in amount of energy list (twice as much energy as an acorn has in 1st world)
2840 60        RTS                      

		-- monster hatches
		-- on entry, X is the monster slot

2841 8A        TXA                      
2842 48        PHA                      
2843 A8        TAY                      
2844 48        PHA                      
2845 B9 06 0C  LDA 0C06,Y               -- get monster id for the egg
2848 AA        TAX                      
2849 BC C0 04  LDY 04C0,X               -- get movement/behaviour template for hatched monster
284C B9 00 07  LDA 0700,Y               -- get monster type from the template
284F 10 10     BPL 2861                 -- branch if monster type is not egg (which it shouldn't be)

2851 A9 FF     LDA #FF                  
2853 9D 00 04  STA 0400,X               -- set room number to invalid to clear egg data
2856 68        PLA                      
2857 48        PHA                      
2858 AA        TAX                      
2859 20 28 19  JSR 1928                 -- draw background over monster position
285C A9 11     LDA #11                  
285E 4C 7D 28  JMP 287D                 -- play shot egg sound

2861 29 3F     AND #3F                  -- mask monster type - first 6 bits so don't lay eggs, don't be an egg
2863 9D 00 07  STA 0700,X               -- store type
2866 B9 C0 04  LDA 04C0,Y               -- get movement type
2869 9D C0 04  STA 04C0,X               -- store type
286C 8A        TXA                      
286D A8        TAY                      
286E 68        PLA                      
286F 48        PHA                      
2870 AA        TAX                      
2871 20 AE 24  JSR 24AE                 -- load monster from cache into room
2874 A9 FF     LDA #FF                  
2876 85 73     STA 73                   
2878 20 89 24  JSR 2489                 -- set initial direction
287B A9 05     LDA #05                  
287D 20 D6 2D  JSR 2DD6                 -- hatch sound
2880 68        PLA                      
2881 A8        TAY                      
2882 68        PLA                      
2883 8A        TXA                      
2884 60        RTS                      

		-- find a free place to put new monster details in
		-- returns success with Y in the range 0 to BF, or Y = FF for failure

2885 86 76     STX 76                   
2887 A0 BF     LDY #BF                  
2889 B9 00 04  LDA 0400,Y               
288C C9 FF     CMP #FF                  
288E F0 06     BEQ 2896                 
2890 88        DEY                      
2891 C0 FF     CPY #FF                  
2893 D0 F4     BNE 2889                 
2895 60        RTS                      

2896 B9 00 07  LDA 0700,Y               -- get dead monster type 
2899 29 40     AND #40                  -- extract whether it laid eggs
289B F0 F8     BEQ 2895                 -- RTS if not
289D 98        TYA                      
289E 48        PHA                      
289F A0 BF     LDY #BF                  
28A1 B9 00 07  LDA 0700,Y               -- get monster type
28A4 10 07     BPL 28AD                 -- branch if +ve (not an egg)
28A6 68        PLA                      
28A7 48        PHA                      
28A8 D9 C0 04  CMP 04C0,Y               -- compare our free id number to the id of the monster the egg will hatch into
28AB F0 08     BEQ 28B5                 -- skip the slot if equal
28AD 88        DEY                      
28AE C0 FF     CPY #FF                  
28B0 D0 EF     BNE 28A1                 
28B2 68        PLA                      
28B3 A8        TAY                      
28B4 60        RTS                      
28B5 68        PLA                      
28B6 A8        TAY                      
28B7 4C 90 28  JMP 2890                 

		-- lay egg

28BA 20 85 28  JSR 2885                 -- find a free monster id
28BD C0 FF     CPY #FF                  
28BF D0 01     BNE 28C2                 -- branch if found one
28C1 60        RTS                      

28C2 8A        TXA                      
28C3 48        PHA                      -- push monster slot
28C4 98        TYA                      
28C5 48        PHA                      -- push available monster id
28C6 A0 B0     LDY #B0                  -- initialise start point for subroutine
28C8 20 1A 27  JSR 271A                 -- get a free animation slot
28CB 98        TYA                      
28CC F0 3E     BEQ 290C                 -- RTS if nothing available
28CE 84 75     STY 75                   -- store id of free animation slot
28D0 A4 76     LDY 76                   -- get animation slot of monster laying egg
28D2 B9 06 0C  LDA 0C06,Y               -- get source monster id
28D5 A8        TAY                      -- store in Y for later
28D6 B9 00 07  LDA 0700,Y               -- get monster type
28D9 30 31     BMI 290C                 -- RTS if egg (an egg can't lay an egg)
28DB 68        PLA                      -- pop available monster id
28DC 48        PHA                      -- push it again
28DD AA        TAX                      
28DE B9 00 04  LDA 0400,Y               
28E1 9D 00 04  STA 0400,X               -- copy room number from laying monster to available slot
28E4 B9 40 06  LDA 0640,Y               
28E7 9D 40 06  STA 0640,X               -- copy cached energy (not current energy) from laying monster to available slot
28EA 20 80 1E  JSR 1E80                 -- get random number
28ED 29 1F     AND #1F                  -- extract first 5 bits
28EF 18        CLC                      
28F0 69 08     ADC #08                  -- add 8
28F2 09 80     ORA #80                  -- set bit 7
28F4 9D 00 07  STA 0700,X               -- set monster type (egg + delay)
28F7 98        TYA                      
28F8 9D C0 04  STA 04C0,X               -- set the template monster for the egg to be the laying monster
28FB 8A        TXA                      
28FC A8        TAY                      -- set Y to the available monster id
28FD A6 75     LDX 75                   -- set X to the id of free animation slot
28FF 20 83 29  JSR 2983                 -- load monster into room
2902 A9 0E     LDA #0E                  
2904 20 D6 2D  JSR 2DD6                 -- play "glub"
2907 A9 0E     LDA #0E                  
2909 20 D6 2D  JSR 2DD6                 -- play "glub"
290C 68        PLA                      
290D 68        PLA                      
290E AA        TAX                      
290F 60        RTS                      

		-- create a new diamond demon
		-- on successful exit, Y will return the monster ID assigned

2910 8A        TXA                      
2911 48        PHA                      
2912 48        PHA                      
2913 20 85 28  JSR 2885                 -- get free monster id
2916 C0 FF     CPY #FF                  
2918 F0 F2     BEQ 290C                 -- RTS if didn't find one
291A 84 75     STY 75                   -- store monster id - this will be the return value
291C A2 16     LDX #16                  -- monster 22 is the template to use
291E BD 40 06  LDA 0640,X               -- get 30 
2921 99 40 06  STA 0640,Y               -- store energy
2924 BD 00 07  LDA 0700,X               -- get type : diamond demon, lays eggs
2927 99 00 07  STA 0700,Y               -- store type
292A BD C0 04  LDA 04C0,X               -- get type of movement: attracted, follows player, can shoot
292D 99 C0 04  STA 04C0,Y               -- store movement
2930 A4 74     LDY 74                   
2932 B9 00 04  LDA 0400,Y               -- get room number
2935 CD C6 0B  CMP 0BC6                 -- is it the current room?
2938 F0 1B     BEQ 2955                 -- branch if yes

293A 85 70     STA 70                   
293C B9 80 05  LDA 0580,Y               -- get tile number
293F 85 71     STA 71                   
2941 A4 75     LDY 75                   
2943 A5 70     LDA 70                   
2945 99 00 04  STA 0400,Y               -- store room
2948 A5 71     LDA 71                   
294A 99 80 05  STA 0580,Y               -- store tile

294D A9 18     LDA #18                  
294F 20 D6 2D  JSR 2DD6                 -- play spawn sound
2952 4C 0C 29  JMP 290C                 -- RTS

2955 A4 75     LDY 75                   -- sets return value
2957 AD C6 0B  LDA 0BC6                 -- get current room
295A 99 00 04  STA 0400,Y               -- store room
295D A9 FF     LDA #FF                  
295F 99 80 05  STA 0580,Y               -- store unspecific tile
2962 4C 4D 29  JMP 294D                 -- play sound and RTS

		-- ??? adds the specified monster to the current room

2965 8A        TXA                      
2966 48        PHA                      
2967 98        TYA                      
2968 48        PHA                      
2969 C9 FF     CMP #FF                  
296B F0 9F     BEQ 290C                 -- RTS
296D A0 B0     LDY #B0                  
296F 20 1A 27  JSR 271A                 -- get empty animation slot
2972 98        TYA                      
2973 F0 97     BEQ 290C                 -- nothing available then RTS
2975 AA        TAX                      
2976 A5 84     LDA 84                   
2978 85 76     STA 76                   
297A 68        PLA                      
297B 48        PHA                      
297C A8        TAY                      
297D 20 83 29  JSR 2983                 -- load monster to room
2980 4C 0C 29  JMP 290C                 -- RTS

2983 20 AE 24  JSR 24AE                 -- load monster from cache into current room
2986 A4 76     LDY 76                   
2988 B9 01 0C  LDA 0C01,Y               
298B 9D 01 0C  STA 0C01,X               -- copy tile number
298E A9 FF     LDA #FF                  
2990 85 73     STA 73                   
2992 4C 89 24  JMP 2489                 -- set direction

		-- is player pushing block

2995 A5 89     LDA 89                   
2997 C9 13     CMP #13                  
2999 D0 65     BNE 2A00                 -- not block then RTS
299B AD 01 0C  LDA 0C01                 -- get player tile number
299E 20 83 1C  JSR 1C83                 -- separate into x & y
29A1 AD 04 0C  LDA 0C04                 -- get player direction
29A4 20 67 1C  JSR 1C67                 -- adjust tile according to direction
29A7 20 90 1C  JSR 1C90                 -- combine x & y back to tile number
29AA 85 76     STA 76                   
29AC AD 04 0C  LDA 0C04                 -- get player direction

		-- move block

29AF 85 70     STA 70                   
29B1 AD F0 0C  LDA 0CF0                 -- get occupant of final monster slot
29B4 F0 09     BEQ 29BF                 -- branch if empty slot
29B6 C9 FE     CMP #FE                  
29B8 D0 46     BNE 2A00                 -- branch if not occupied by block
29BA A9 00     LDA #00                  
29BC 8D F0 0C  STA 0CF0                 -- mark slot empty

29BF A5 70     LDA 70                   
29C1 8D F4 0C  STA 0CF4                 -- store direction
29C4 48        PHA                      
29C5 A5 76     LDA 76                   
29C7 8D F1 0C  STA 0CF1                 -- store new tile number
29CA 8D F2 0C  STA 0CF2                 
29CD A9 03     LDA #03                  
29CF 8D F6 0C  STA 0CF6                 -- store id as block
29D2 A9 FF     LDA #FF                  
29D4 8D FE 0C  STA 0CFE                 -- store maximum energy
29D7 68        PLA                      
29D8 20 F1 1C  JSR 1CF1                 -- get contents of tile
29DB C9 1F     CMP #1F                  -- is it wall?
29DD B0 48     BCS 2A27                 -- branch if space

29DF AD F4 0C  LDA 0CF4                 -- get direction
29E2 49 01     EOR #01                  -- reverse it
29E4 8D F4 0C  STA 0CF4                 -- store new direction
29E7 48        PHA                      
29E8 20 67 1C  JSR 1C67                 -- adjust row & column according to direction
29EB 68        PLA                      
29EC 48        PHA                      
29ED 20 67 1C  JSR 1C67                 -- adjust row & column according to direction
29F0 68        PLA                      
29F1 20 F1 1C  JSR 1CF1                 -- get contents of tile
29F4 C9 1F     CMP #1F                  -- is it off screen
29F6 B0 09     BCS 2A01                 -- branch if space
29F8 A9 04     LDA #04                  
29FA 8D 04 0C  STA 0C04                 -- set direction to still
29FD 8D C4 0B  STA 0BC4                 
2A00 60        RTS                      

2A01 08        PHP                      
2A02 A9 17     LDA #17                  
2A04 20 D6 2D  JSR 2DD6                 -- play bounce block sound
2A07 28        PLP                      
2A08 D0 0B     BNE 2A15                 -- branch if still on same screen

2A0A AD 01 0C  LDA 0C01                 -- get player tile number
2A0D 8D FF 0E  STA 0EFF                 -- store block tile
2A10 A9 1F     LDA #1F                  
2A12 4C E9 20  JMP 20E9                 

2A15 A9 01     LDA #01                  
2A17 8D C3 0B  STA 0BC3                 -- set block bounce-back status
2A1A AD F4 0C  LDA 0CF4                 -- get block direction
2A1D 8D 04 0C  STA 0C04                 -- store as player direction
2A20 A9 FD     LDA #FD                  
2A22 8D F0 0C  STA 0CF0                 -- set block slot status
2A25 D0 05     BNE 2A2C                 -- jump always

2A27 A9 FF     LDA #FF                  -- unused code?
2A29 8D F0 0C  STA 0CF0                 -- unused code?

2A2C AD 7F 0E  LDA 0E7F                 -- get block room
2A2F 48        PHA                      
2A30 A9 FF     LDA #FF                  
2A32 8D 7F 0E  STA 0E7F                 -- mark static data area unused
2A35 A4 76     LDY 76                   
2A37 20 5A 25  JSR 255A                 -- get item at tile number Y
2A3A AC F1 0C  LDY 0CF1                 -- get block tile number
2A3D 99 00 0B  STA 0B00,Y               -- store the type of item in the room map
2A40 98        TYA                      
2A41 20 83 1C  JSR 1C83                 -- separate tile into x & y
2A44 68        PLA                      
2A45 8D 7F 0E  STA 0E7F                 -- restore block's room number
2A48 AD F4 0C  LDA 0CF4                 -- get block direction
2A4B 20 F1 1C  JSR 1CF1                 -- get contents of tile in the direction indicated
2A4E C9 1F     CMP #1F                  
2A50 F0 0F     BEQ 2A61                 -- RTS if off-screen
2A52 20 90 1C  JSR 1C90                 -- combine x & y back to tile number
2A55 85 76     STA 76                   
2A57 8D FF 0E  STA 0EFF                 -- store new block tile number
2A5A A4 76     LDY 76                   
2A5C A9 13     LDA #13                  
2A5E 99 00 0B  STA 0B00,Y               -- store block type into room map
2A61 60        RTS                      

		-- deal with possibility of moving block

2A62 AD 01 0C  LDA 0C01                 -- get player tile number
2A65 85 76     STA 76                   
2A67 20 83 1C  JSR 1C83                 -- separate into x & y
2A6A A5 72     LDA 72                   
2A6C 20 AF 29  JSR 29AF                 -- move block
2A6F A9 01     LDA #01                  
2A71 8D C3 0B  STA 0BC3                 -- set block moving status
2A74 A9 FC     LDA #FC                  
2A76 8D F0 0C  STA 0CF0                 -- set animation slot status/occupant
2A79 60        RTS                      

		-- deal with control key presses

2A7A A5 EC     LDA EC                   -- get last key pressed
2A7C C9 E9     CMP #E9                  
2A7E F0 0D     BEQ 2A8D                 -- pause pressed
2A80 C9 F0     CMP #F0                  
2A82 F0 13     BEQ 2A97                 -- escape pressed
2A84 C9 90     CMP #90                  
2A86 F0 16     BEQ 2A9E                 
2A88 C9 D1     CMP #D1                  
2A8A F0 1F     BEQ 2AAB                 
2A8C 60        RTS                      

		-- pause game

2A8D 20 CD 2D  JSR 2DCD                 -- reset sound channels
2A90 A5 EC     LDA EC                   
2A92 C9 D9     CMP #D9                  
2A94 D0 F7     BNE 2A8D                 -- wait for pause to be released
2A96 60        RTS                      

		-- abandon game

2A97 68        PLA                      
2A98 68        PLA                      -- discard return address from stack
2A99 68        PLA                      
2A9A 68        PLA                      -- discard return address from stack
2A9B A9 FF     LDA #FF                  
2A9D 60        RTS                      -- quit main loop, indicating escape pressed

		-- quiet 

2A9E A9 10     LDA #10                  
2AA0 8D CD 08  STA 08CD                 -- set to quiet
2AA3 20 50 1D  JSR 1D50                 -- process playing sounds
2AA6 A5 EC     LDA EC                   
2AA8 D0 FC     BNE 2AA6                 -- pause until key released
2AAA 60        RTS                      

		-- sound

2AAB A9 00     LDA #00                  
2AAD 8D CD 08  STA 08CD                 -- set to play sound
2AB0 F0 F4     BEQ 2AA6                 

		-- subroutine to the determine the base room number for the specified level
		-- on entry A is the level number
		-- on exit A is the base room number

2AB2 48        PHA                      
2AB3 29 03     AND #03                  -- level 0 -> 0, 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 0, 5 -> 1, 6 -> 2, 7 -> 3
2AB5 85 70     STA 70                   
2AB7 68        PLA                      
2AB8 48        PHA                      
2AB9 29 04     AND #04                  -- level 0 -> 0, 1 -> 0, 2 -> 0, 3 -> 0, 4 -> 4, 5 -> 4, 6 -> 4, 7 -> 4
2ABB F0 02     BEQ 2ABF                 -- branch if on levels 0 to 3 with a = 0
2ABD A9 03     LDA #03                  -- levels 4 to 7 load a = 3

2ABF 45 70     EOR 70                   -- level 0 -> 0, 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 3, 5 -> 2, 6 -> 1, 7 -> 0
2AC1 0A        ASL A                    -- level 0 -> 0, 1 -> 2, 2 -> 4, 3 -> 6, 4 -> 6, 5 -> 4, 6 -> 2, 7 -> 0
2AC2 0A        ASL A                    -- level 0 -> 0, 1 -> 4, 2 -> 8, 3 -> 12, 4 -> 12, 5 -> 8, 6 -> 4, 7 -> 0
2AC3 85 70     STA 70                   
2AC5 68        PLA                      
2AC6 29 04     AND #04                  -- level 0 -> 0, 1 -> 0, 2 -> 0, 3 -> 0, 4 -> 4, 5 -> 4, 6 -> 4, 7 -> 4
2AC8 0A        ASL A                    -- level 0 -> 0, 1 -> 0, 2 -> 0, 3 -> 0, 4 -> 8, 5 -> 8, 6 -> 8, 7 -> 8
2AC9 0A        ASL A                    -- level 0 -> 0, 1 -> 0, 2 -> 0, 3 -> 0, 4 -> 16, 5 -> 16, 6 -> 16, 7 -> 16
2ACA 0A        ASL A                    -- level 0 -> 0, 1 -> 0, 2 -> 0, 3 -> 0, 4 -> 32, 5 -> 32, 6 -> 32, 7 -> 32
2ACB 0A        ASL A                    -- level 0 -> 0, 1 -> 0, 2 -> 0, 3 -> 0, 4 -> 64, 5 -> 64, 6 -> 64, 7 -> 64
2ACC 05 70     ORA 70                   
2ACE 85 70     STA 70                   -- level 0 -> 0, 1 -> 4, 2 -> 8, 3 -> 12, 4 -> 76, 5 -> 72, 6 -> 68, 8 -> 64
2AD0 60        RTS                      

		-- subroutine that calculates the room number within a 4x4 level
		-- on entry A is a random number between 0 and 15
		-- on exit A is the same number with bits 2 and 3 shifted to 4 and 5

2AD1 48        PHA                      
2AD2 29 03     AND #03                  -- get two lowest bits
2AD4 85 70     STA 70                   
2AD6 68        PLA                      
2AD7 29 0C     AND #0C                  -- get next two bits
2AD9 0A        ASL A                    -- shift bits left
2ADA 0A        ASL A                    -- shift bits left again
2ADB 05 70     ORA 70                   -- combine with previous mask
2ADD 85 70     STA 70                   -- bits that could now be set are 00xx00xx
2ADF 60        RTS                      

		-- load fruit for level A

2AE0 48        PHA                      
2AE1 0A        ASL A					-- a is now 0, 2, 4, 6, 8, 10, 12, 14
2AE2 0A        ASL A					-- a is now 0, 4, 8, 12, 16, 20, 24, 28
2AE3 0A        ASL A                    -- a is now 0, 8, 16, 24, 32, 40, 48, 56
2AE4 69 07     ADC #07                  -- a is now 7, 15, 23, 31, 39, 47, 55, 63
2AE6 A8        TAY                      -- y takes the value of a, and is the loop counter
2AE7 68        PLA                      
2AE8 48        PHA                      
2AE9 20 B2 2A  JSR 2AB2                 -- get base room number for level A
2AEC 8D C5 0B  STA 0BC5                 

2AEF B9 00 0E  LDA 0E00,Y               -- get room number for the static object in slot Y
2AF2 C9 FF     CMP #FF                  
2AF4 D0 3C     BNE 2B32                 -- continue loop if room slot occupied

2AF6 20 80 1E  JSR 1E80					-- get random number 
2AF9 29 0F     AND #0F                  -- between 0 and 15
2AFB 20 D1 2A  JSR 2AD1                 -- calculate the respective room number within the level
2AFE 0D C5 0B  ORA 0BC5                 -- combine with the base room number for the level
2B01 99 00 0E  STA 0E00,Y               -- set room number for fruit
2B04 A9 FF     LDA #FF                  
2B06 99 80 0E  STA 0E80,Y               -- set unfixed tile number for fruit
2B09 20 80 1E  JSR 1E80                 -- get random number
2B0C 29 01     AND #01                  -- between 0 and 1
2B0E 85 70     STA 70                   -- store for later

2B10 68        PLA                      -- retrieve level number
2B11 48        PHA                      
2B12 F0 0F     BEQ 2B23                 -- if level 0, branch and always use apple
2B14 C9 04     CMP #04                  
2B16 90 02     BCC 2B1A                 -- branch over next line if levels 0 to 3
2B18 E6 70     INC 70                   -- 70 is now 1 or 2
2B1A 38        SEC                      
2B1B E5 70     SBC 70                   -- level 1 -> 0 or 1, 2 -> 1 or 2, 3 -> 2 or 3, 4 -> 2 or 3, 5 -> 3 or 4, 6 -> 4 or 5, 7 -> 5 or 6
2B1D C9 06     CMP #06                  
2B1F 90 02     BCC 2B23                 -- if result was less than 6 then we have answer, so branch and act on it
2B21 A9 05     LDA #05					-- use fruit type of acorn
                 
2B23 48        PHA                      -- push fruit type 
2B24 18        CLC                      
2B25 69 5A     ADC #5A                  -- 5A is the sprite number for the apple
2B27 99 00 0F  STA 0F00,Y               -- set type of object

2B2A 68        PLA                      -- retrieve fruit type 
2B2B 0A        ASL A                    -- double value
2B2C 18        CLC                      
2B2D 69 06     ADC #06                  -- add 6
2B2F 99 80 0F  STA 0F80,Y               -- set energy of fruit (apple = 6, Watermelon = 8, Pineapple = 10, Strawberry = 12, Cherries = 14, Acorn = 16)

2B32 88        DEY                      -- decrement loop counter
2B33 10 BA     BPL 2AEF                 -- loop whilst 0 or above

2B35 68        PLA                      
2B36 60        RTS                      

		-- Check monster movement type is correct when cautious

2B37 BD 0F 0C  LDA 0C0F,X               -- get movement type
2B3A C9 84     CMP #84                  -- is it cautious and in pursuit?
2B3C F0 04     BEQ 2B42                 -- yes, so skip next bit
2B3E C9 87     CMP #87                  -- is it cautious and running away?
2B40 D0 18     BNE 2B5A                 -- nope, so RTS
2B42 A9 84     LDA #84                  
2B44 9D 0F 0C  STA 0C0F,X               -- set not afraid by default
2B47 BD 0E 0C  LDA 0C0E,X               -- get monster energy
2B4A 0A        ASL A                    -- double it
2B4B B0 0D     BCS 2B5A                 -- if above 255 then RTS
2B4D 0A        ASL A                    -- double it
2B4E B0 0A     BCS 2B5A                 -- if above 255 then RTS
2B50 CD 0E 0C  CMP 0C0E                 -- compare to player energy
2B53 B0 05     BCS 2B5A                 -- RTS unless the player energy is greater
2B55 A9 87     LDA #87                  -- set afraid
2B57 9D 0F 0C  STA 0C0F,X               
2B5A 60        RTS                      

		-- possibly lay a mushroom

2B5B AD E0 0C  LDA 0CE0                 -- get status/occupant of animation slot at CE0
2B5E 10 FA     BPL 2B5A                 -- if +ve then it's not a shot so RTS
2B60 BD 04 0C  LDA 0C04,X               -- get monster's direction of travel
2B63 4D 04 0C  EOR 0C04                 -- find differences with player's direction of travel
2B66 29 02     AND #02                  -- extract bit 1 
2B68 D0 F0     BNE 2B5A                 -- if not zero then rts (when player and monster are travelling on different axis)
2B6A 20 80 1E  JSR 1E80                 -- get random number
2B6D 29 01     AND #01                  -- extract 1st bit
2B6F D0 E9     BNE 2B5A                 -- rts if not zero
2B71 A0 78     LDY #78                  -- initialise loop counter
2B73 20 B4 31  JSR 31B4                 -- get free static data slot
2B76 98        TYA                      
2B77 30 E1     BMI 2B5A                 -- rts if nothing free
2B79 C0 40     CPY #40                  
2B7B 90 DD     BCC 2B5A                 -- don't use a slot numbered less than 40 (so that new fruit can still be added)
2B7D 84 70     STY 70                   -- store slot number
2B7F BC 01 0C  LDY 0C01,X               -- get tile number
2B82 B9 00 0B  LDA 0B00,Y               -- get contents of tile
2B85 C9 21     CMP #21                  -- is there already a mushroom?
2B87 F0 D1     BEQ 2B5A                 -- rts if there is
2B89 A9 21     LDA #21                  
2B8B 99 00 0B  STA 0B00,Y               -- store a mushroom to the room layout
2B8E 98        TYA                      
2B8F A4 70     LDY 70                   -- get the static data slot number
2B91 99 80 0E  STA 0E80,Y               -- store the tile number
2B94 AD C6 0B  LDA 0BC6                 -- get the current room number
2B97 99 00 0E  STA 0E00,Y               -- store it
2B9A A9 40     LDA #40                  
2B9C 99 80 0F  STA 0F80,Y               -- store energy
2B9F A9 21     LDA #21                  
2BA1 99 00 0F  STA 0F00,Y               -- store object type
2BA4 A9 0E     LDA #0E                  
2BA6 4C D6 2D  JMP 2DD6                 -- play "glub" sound

		-- process shot and block

2BA9 A9 FF     LDA #FF                  
2BAB 85 88     STA 88                   -- reset flag. This can be used later to indicate that someone/thing has been shot
2BAD BD 06 0C  LDA 0C06,X               -- get identifier (will be 1 for player shot, 3 for block, otherwise the animation slot of the monster firing)
2BB0 C9 03     CMP #03                  -- are we dealing with the block?
2BB2 D0 73     BNE 2C27                 -- if not, branch to process shot

2BB4 BD 00 0C  LDA 0C00,X               -- get status/occupant of slot
2BB7 C9 FE     CMP #FE                  -- get status of block
2BB9 D0 0E     BNE 2BC9                 -- 
2BBB 20 91 38  JSR 3891                 -- has block crushed anything?
2BBE DE 0F 0C  DEC 0C0F,X               -- decrement counter
2BC1 D0 05     BNE 2BC8                 -- RTS if not zero
2BC3 A9 00     LDA #00                  
2BC5 9D 00 0C  STA 0C00,X               -- reset slot 
2BC8 60        RTS                      

2BC9 C9 FC     CMP #FC                  
2BCB F0 03     BEQ 2BD0                 
2BCD 20 17 2C  JSR 2C17                 -- draw room content at position of specified animation slot

2BD0 BD 01 0C  LDA 0C01,X               -- get tile number
2BD3 20 EB 1C  JSR 1CEB                 -- get contents of tile in direction of movement
2BD6 C9 1F     CMP #1F                  -- is it off-screen?
2BD8 D0 03     BNE 2BDD                 -- nope, then branch over
2BDA 4C AE 2C  JMP 2CAE                 

2BDD 20 90 1C  JSR 1C90                 -- recombine x & y into tile number
2BE0 9D 01 0C  STA 0C01,X               -- store new position
2BE3 9D 02 0C  STA 0C02,X               -- store new position
2BE6 20 9D 1C  JSR 1C9D                 -- get screen position for tile
2BE9 BD 00 0C  LDA 0C00,X               -- get status
2BEC C9 FD     CMP #FD                  
2BEE F0 10     BEQ 2C00                 -- skip draw if FD
2BF0 A9 13     LDA #13                  
2BF2 20 23 1C  JSR 1C23                 -- get sprite number
2BF5 20 39 1C  JSR 1C39                 -- draw non-wall sprite
2BF8 20 91 38  JSR 3891                 -- has block crushed anything?
2BFB A9 FE     LDA #FE                  
2BFD 9D 00 0C  STA 0C00,X               -- store updated status

2C00 A9 00     LDA #00                  
2C02 8D C3 0B  STA 0BC3                 -- set block bounce status 
2C05 A9 02     LDA #02                  
2C07 9D 0F 0C  STA 0C0F,X               -- set movement 
2C0A BD 00 0C  LDA 0C00,X               -- get animation slot status
2C0D C9 FE     CMP #FE                  
2C0F F0 05     BEQ 2C16                 -- RTS if FE
2C11 A9 00     LDA #00                  
2C13 9D 00 0C  STA 0C00,X               -- clear animation slot
2C16 60        RTS                      

		-- draw room content at position of specified animation slot

2C17 BD 01 0C  LDA 0C01,X               
2C1A A8        TAY                      
2C1B 20 9D 1C  JSR 1C9D                 -- get screen position for tile number
2C1E B9 00 0B  LDA 0B00,Y               -- get contents of tile
2C21 20 23 1C  JSR 1C23                 -- get sprite number
2C24 4C 39 1C  JMP 1C39                 -- draw non-wall sprite to screen

		-- process shot

2C27 BD 03 0C  LDA 0C03,X               -- get position between tiles
2C2A D0 03     BNE 2C2F                 -- skip over redrawing tile if not zero
2C2C 20 17 2C  JSR 2C17					-- draw tile
2C2F BD 01 0C  LDA 0C01,X               -- get tile number
2C32 A8        TAY                      
2C33 B9 00 0B  LDA 0B00,Y               -- get contents of tile
2C36 C9 13     CMP #13                  -- is it the block?
2C38 F0 54     BEQ 2C8E                 -- branch if so, clearing shot animation and RTS
2C3A 98        TYA                      
2C3B 20 EB 1C  JSR 1CEB                 -- get contents of tile in direction of travel
2C3E C9 1F     CMP #1F                  -- is it off-screen?
2C40 F0 6C     BEQ 2CAE                 -- branch if so
2C42 C9 14     CMP #14                  
2C44 90 3E     BCC 2C84                 -- branch if 13 or less (wall is 12 or less, 13 is block)
2C46 9D 05 0C  STA 0C05,X               -- get previous contents of tile
2C49 20 90 1C  JSR 1C90                 -- combine x & y back to tile number
2C4C 9D 01 0C  STA 0C01,X               -- store new position
2C4F 9D 02 0C  STA 0C02,X               -- store new position
2C52 A9 00     LDA #00                  
2C54 9D 03 0C  STA 0C03,X               -- set position to be dead-on tile
2C57 20 1F 1B  JSR 1B1F                 -- has shot collided with another animation?
2C5A A5 88     LDA 88                   
2C5C 30 07     BMI 2C65                 -- branch if nothing found
2C5E A4 84     LDY 84                   
2C60 B9 0F 0C  LDA 0C0F,Y               -- get type of movement for thing being shot
2C63 30 28     BMI 2C8D                 -- RTS if -ve (normal monster)
2C65 BD 05 0C  LDA 0C05,X               -- get previous contents of tile
2C68 C9 20     CMP #20                  -- is it empty?
2C6A D0 0F     BNE 2C7B                 -- branch if not
2C6C BD 01 0C  LDA 0C01,X               
2C6F 20 9D 1C  JSR 1C9D                 -- get screen position for specified tile
2C72 BD 09 0C  LDA 0C09,X               -- get sprite number
2C75 20 23 1C  JSR 1C23                 -- calculate sprite to draw
2C78 4C 39 1C  JMP 1C39                 -- draw non-wall sprite to screen

2C7B A9 00     LDA #00                  
2C7D 85 88     STA 88                   -- set something's been hit
2C7F A9 FF     LDA #FF                  
2C81 85 84     STA 84                   -- set nothing important
2C83 60        RTS                      

		-- hit wall or block

2C84 48        PHA                      
2C85 20 8E 2C  JSR 2C8E                 -- clear shot animation
2C88 68        PLA                      
2C89 C9 13     CMP #13                  
2C8B F0 07     BEQ 2C94                 
2C8D 60        RTS                      

2C8E A9 00     LDA #00                  
2C90 9D 00 0C  STA 0C00,X               
2C93 60        RTS                      

		-- block has been shot

2C94 20 90 1C  JSR 1C90                 -- combine x & y to tile number
2C97 85 76     STA 76                   
2C99 BD 04 0C  LDA 0C04,X               -- get direction of travel
2C9C 20 F1 1C  JSR 1CF1                 -- get contents of tile in direction of travel
2C9F C9 1F     CMP #1F                  
2CA1 90 EA     BCC 2C8D                 -- RTS if wall
2CA3 A5 76     LDA 76                   
2CA5 20 83 1C  JSR 1C83                 -- separate out tile number
2CA8 BD 04 0C  LDA 0C04,X               -- get direction
2CAB 4C AF 29  JMP 29AF                 -- move block

		-- shot heads off-screen

2CAE 20 D6 2C  JSR 2CD6                 -- check if hit monster or static object that's off screen
2CB1 BD 06 0C  LDA 0C06,X               -- get id
2CB4 C9 03     CMP #03                  -- is it the block?
2CB6 F0 03     BEQ 2CBB                 -- branch if so
2CB8 4C 25 2D  JMP 2D25                 

2CBB A9 00     LDA #00                  
2CBD 8D C3 0B  STA 0BC3                 -- set block bounce status
2CC0 A5 70     LDA 70                   
2CC2 8D 7F 0E  STA 0E7F                 
2CC5 AD F4 0C  LDA 0CF4                 
2CC8 20 97 23  JSR 2397                 -- calculate new co-ordinates of block in the off-screen room
2CCB 20 90 1C  JSR 1C90                 -- combine the co-ordinates back to a tile number
2CCE 8D FF 0E  STA 0EFF                 -- store the block's position
2CD1 A5 73     LDA 73                   
2CD3 4C 30 2D  JMP 2D30                 

		-- check if hit monster or static object that's off screen

2CD6 A9 00     LDA #00                  
2CD8 9D 00 0C  STA 0C00,X               -- clear animation slot
2CDB BD 01 0C  LDA 0C01,X               -- get tile number
2CDE 20 83 1C  JSR 1C83                 -- separate out into co-ordinates
2CE1 AD C6 0B  LDA 0BC6                 -- get current room number
2CE4 85 70     STA 70                   
2CE6 20 25 22  JSR 2225                 -- calculate new room number
2CE9 A9 0D     LDA #0D                  
2CEB 85 71     STA 71                   
2CED A9 07     LDA #07                  
2CEF 85 72     STA 72                   
2CF1 BD 06 0C  LDA 0C06,X               -- get id
2CF4 C9 03     CMP #03                  -- is it the block?
2CF6 D0 08     BNE 2D00                 -- branch if not
2CF8 A9 0F     LDA #0F                  
2CFA 85 71     STA 71                   
2CFC A9 09     LDA #09                  
2CFE 85 72     STA 72                   

2D00 A9 00     LDA #00                  
2D02 85 73     STA 73                   
2D04 85 75     STA 75                   
2D06 A0 BF     LDY #BF                  -- initialise loop counter
2D08 A5 70     LDA 70                   -- get new room number
2D0A D9 00 04  CMP 0400,Y               -- compare to room number of monster
2D0D D0 03     BNE 2D12                 -- skip over if not the same
2D0F 20 4B 2D  JSR 2D4B                 
2D12 98        TYA                      
2D13 30 0A     BMI 2D1F                 -- skip check on static objects where Y >= &80
2D15 A5 70     LDA 70                   -- get new room number
2D17 D9 00 0E  CMP 0E00,Y               -- compare to room number of static object
2D1A D0 03     BNE 2D1F                 -- skip over if not the same
2D1C 20 5E 2D  JSR 2D5E                 
2D1F 88        DEY                      -- decrement loop counter
2D20 C0 FF     CPY #FF                  
2D22 D0 E4     BNE 2D08                 -- continue loop
2D24 60        RTS                      

		-- off-screen shot - did it hit anything?

2D25 A5 73     LDA 73                   -- compare distance to monster with distance to static object
2D27 C5 75     CMP 75                   
2D29 B0 05     BCS 2D30                 -- branch if monster closer
2D2B A4 76     LDY 76                   
2D2D 4C DE 2D  JMP 2DDE                 

		-- off-screen shot/block - did it hit anything?

2D30 C9 00     CMP #00                  
2D32 F0 16     BEQ 2D4A                 -- if nothing hit, RTS
2D34 A4 74     LDY 74                   
2D36 B9 00 07  LDA 0700,Y               -- get monster type
2D39 30 0C     BMI 2D47                 -- branch if -ve (egg)
2D3B B9 C0 04  LDA 04C0,Y               -- get type of movement
2D3E 29 07     AND #07                  -- extract base movement
2D40 F0 05     BEQ 2D47                 -- if zero (static) branch
2D42 20 80 1E  JSR 1E80                 -- get random number
2D45 30 03     BMI 2D4A                 -- if -ve then branch
2D47 20 12 30  JSR 3012                 -- hit and injure monster
2D4A 60        RTS                      

		-- deal with off screen shot and monster in same room
		-- on entry, Y is the monster id

2D4B B9 80 05  LDA 0580,Y               -- get tile number
2D4E C9 FF     CMP #FF                  -- is it unspecific?
2D50 F0 0B     BEQ 2D5D                 -- RTS if so
2D52 20 71 2D  JSR 2D71                 -- check if monster will be intercepted by shot (if not, routine will not return here)
2D55 C5 73     CMP 73                   -- if here, it found something. compare to anything found previously
2D57 90 04     BCC 2D5D                 
2D59 85 73     STA 73                   -- save details of found monster
2D5B 84 74     STY 74                   
2D5D 60        RTS                      

		-- deal with off screen shot and static object in the same room
		-- on entry, Y is the static object id

2D5E B9 80 0E  LDA 0E80,Y               -- get tile number
2D61 C9 FF     CMP #FF                  -- is it unspecific?
2D63 F0 F8     BEQ 2D5D                 -- RTS if so
2D65 20 71 2D  JSR 2D71                 -- check if object will be intercepted by shot (if not, routine will not return here)
2D68 C5 75     CMP 75                   -- if here, it found something. compare to anything found previously
2D6A 90 F1     BCC 2D5D                 
2D6C 85 75     STA 75                   -- save details of found item
2D6E 84 76     STY 76                   
2D70 60        RTS                      

		-- check if item will be intercepted by shot
		-- on entry, A is the tile number of the object, X is the animation slot

2D71 85 77     STA 77                   
2D73 BD 04 0C  LDA 0C04,X               -- get direction of travel
2D76 29 02     AND #02                  -- extract bit 1 (to give left or up)
2D78 F0 2B     BEQ 2DA5                 -- branch if left

		-- vertical travelling shot
2D7A A5 77     LDA 77                   
2D7C 29 0F     AND #0F                  -- get column of object
2D7E C5 85     CMP 85                   -- compare to column number of shot
2D80 D0 20     BNE 2DA2                 -- if not on same column, RTS
2D82 A5 77     LDA 77                   -- get tile number of object
2D84 29 F0     AND #F0                  -- extract row
2D86 4A        LSR A                    
2D87 4A        LSR A                    
2D88 4A        LSR A                    
2D89 4A        LSR A                    -- shift to bits 0 to 3
2D8A 38        SEC                      
2D8B E5 86     SBC 86                   -- subtract shot row
2D8D 48        PHA                      
2D8E BD 04 0C  LDA 0C04,X               -- get direction of travel
2D91 29 01     AND #01                  -- going left or right?
2D93 F0 07     BEQ 2D9C                 
2D95 68        PLA                      
2D96 49 FF     EOR #FF                  -- negate result
2D98 18        CLC                      
2D99 69 01     ADC #01                  
2D9B 48        PHA                      

2D9C 68        PLA                      
2D9D C5 72     CMP 72                   -- compare with 7 (shot) 
2D9F 90 01     BCC 2DA2                 
2DA1 60        RTS                      -- in range

2DA2 68        PLA                      -- discard return address
2DA3 68        PLA                      -- discard return address
2DA4 60        RTS                      

		-- horizontal travelling shot
2DA5 A5 77     LDA 77                   
2DA7 29 F0     AND #F0                  -- get row of object
2DA9 4A        LSR A                    
2DAA 4A        LSR A                    
2DAB 4A        LSR A                    
2DAC 4A        LSR A                    -- shift to bits 0 to 3
2DAD C5 86     CMP 86                   -- compare to row number of shot
2DAF D0 F1     BNE 2DA2                 -- if not on same row, RTS
2DB1 A5 77     LDA 77                   -- get tile number of object
2DB3 29 0F     AND #0F                  -- extract column
2DB5 38        SEC                      
2DB6 E5 85     SBC 85                   -- subtract shot column
2DB8 48        PHA                      
2DB9 BD 04 0C  LDA 0C04,X               -- get direction of travel
2DBC 29 01     AND #01                  -- going up or down?
2DBE F0 07     BEQ 2DC7                 
2DC0 68        PLA                      
2DC1 49 FF     EOR #FF                  -- negate result
2DC3 18        CLC                      
2DC4 69 01     ADC #01                  
2DC6 48        PHA                      

2DC7 68        PLA                      
2DC8 C5 71     CMP 71                   -- compare with 13 (shot)
2DCA 90 D6     BCC 2DA2                 
2DCC 60        RTS                      -- in range

		-- reset all sound channels

2DCD A0 03     LDY #03                  
2DCF 20 5E 1D  JSR 1D5E                 -- reset sound channel
2DD2 88        DEY                      
2DD3 10 FA     BPL 2DCF                 
2DD5 60        RTS                      

		-- play a sound

2DD6 84 8F     STY 8F                   
2DD8 20 1D 1E  JSR 1E1D                 
2DDB A4 8F     LDY 8F                   
2DDD 60        RTS                      

		-- hit static object

2DDE B9 00 0F  LDA 0F00,Y               -- get type of object
2DE1 C9 20     CMP #20                  
2DE3 B0 02     BCS 2DE7                 -- branch if 20 or more
2DE5 38        SEC                      
2DE6 60        RTS                      

2DE7 B9 80 0F  LDA 0F80,Y               -- get static object's energy
2DEA 38        SEC                      
2DEB FD 0E 0C  SBC 0C0E,X               -- remove energy from shot object
2DEE 99 80 0F  STA 0F80,Y               -- store remaining energy
2DF1 20 B5 2F  JSR 2FB5                 -- examine result of doing calculation - does the object have remaining energy?
2DF4 08        PHP                      
2DF5 B0 05     BCS 2DFC                 -- branch if energy remains
2DF7 A9 FF     LDA #FF                  
2DF9 99 00 0E  STA 0E00,Y               -- remove static object
2DFC A9 0B     LDA #0B                  
2DFE 20 D6 2D  JSR 2DD6                 -- play high pip sound
2E01 28        PLP                      
2E02 60        RTS                      

		-- collision with static object

2E03 BC 01 0C  LDY 0C01,X               -- get tile number
2E06 20 49 25  JSR 2549                 -- get type of item
2E09 30 15     BMI 2E20                 -- RTS if nothing found
2E0B 20 DE 2D  JSR 2DDE                 -- static object shot
2E0E B0 0B     BCS 2E1B                 -- branch if object survived
2E10 A9 20     LDA #20                  
2E12 9D 05 0C  STA 0C05,X               -- set item under animation to empty tile
2E15 20 6B 25  JSR 256B                 -- clear static object data
2E18 4C 36 2F  JMP 2F36                 -- turn shot into small bang
2E1B A9 00     LDA #00                  
2E1D 9D 00 0C  STA 0C00,X               -- clear animation slot
2E20 60        RTS                      

		-- process collision between sprites
		-- on entry, X is the animation slot (not the player though), 84 the other participant (could be FF for static object)

2E21 BD 00 0C  LDA 0C00,X               -- get status/occupant of slot
2E24 30 5F     BMI 2E85                 -- branch if negative (shot?)
2E26 C9 04     CMP #04                  
2E28 D0 03     BNE 2E2D                 -- if not 4 then skip over
2E2A 4C 04 2F  JMP 2F04                 -- get crystal
2E2D 90 18     BCC 2E47                 -- if 3 or less (must be monster) than jump to next bit

		-- probably collision with bang

2E2F A5 84     LDA 84                   -- get what collided with
2E31 D0 13     BNE 2E46                 -- RTS if not player
2E33 AD 04 0C  LDA 0C04                 -- get player direction
2E36 C9 04     CMP #04                  -- is it still?
2E38 D0 0C     BNE 2E46                 -- in motion, then RTS
2E3A BD 0F 0C  LDA 0C0F,X               -- get delay until item removed from slot
2E3D C9 0A     CMP #0A                  
2E3F B0 05     BCS 2E46                 -- 10 or more then RTS
2E41 A9 00     LDA #00                  
2E43 9D 0F 0C  STA 0C0F,X               -- set delay to 0
2E46 60        RTS                      

		-- collision with monster

2E47 A5 84     LDA 84                   -- get thing collided with
2E49 D0 FB     BNE 2E46                 -- RTS if not player
2E4B AD 00 0C  LDA 0C00                 -- get player status
2E4E C9 05     CMP #05                  -- is it alive?
2E50 D0 F4     BNE 2E46                 -- nope, then RTS
2E52 BD 06 0C  LDA 0C06,X               -- get monster id
2E55 A8        TAY                      
2E56 B9 00 07  LDA 0700,Y               -- get monster type
2E59 30 04     BMI 2E5F                 -- if egg then skip over
2E5B 29 0F     AND #0F                  -- extract basic type
2E5D F0 0A     BEQ 2E69                 -- branch if zero (forcefield)
2E5F A9 FF     LDA #FF                  
2E61 99 00 04  STA 0400,Y               -- set monster room to out of range
2E64 8A        TXA                      
2E65 A8        TAY                      
2E66 20 5B 2F  JSR 2F5B                 -- set up long bang
2E69 AD 0E 0C  LDA 0C0E                 -- get player energy
2E6C 38        SEC                      
2E6D FD 0E 0C  SBC 0C0E,X               -- subtract monster energy
2E70 8D 0E 0C  STA 0C0E                 -- store remaining player energy
2E73 90 0D     BCC 2E82                 -- branch if less than 0 (player is dead)
2E75 A9 06     LDA #06                  
2E77 20 D6 2D  JSR 2DD6                 -- play poo downward slide
2E7A A9 00     LDA #00                  
2E7C 20 D6 2D  JSR 2DD6                 -- play bang
2E7F 4C E9 33  JMP 33E9                 -- redraw energy bar

2E82 4C 4D 31  JMP 314D                 -- player dies

		-- collision involving shot/block

2E85 BD 06 0C  LDA 0C06,X               -- get id of slot
2E88 C9 03     CMP #03                  -- is it the block
2E8A F0 BA     BEQ 2E46                 -- RTS if so
2E8C A4 84     LDY 84                   -- get item collided with
2E8E F0 4F     BEQ 2EDF                 -- branch if it's the player
2E90 C0 FF     CPY #FF                  -- is it a static object?
2E92 D0 03     BNE 2E97                 -- branch if not
2E94 4C 03 2E  JMP 2E03                 

2E97 B9 00 0C  LDA 0C00,Y               -- get status/occupant of thing being shot
2E9A 30 6E     BMI 2F0A                 -- branch if shot hitting shot
2E9C C9 04     CMP #04                  -- is it crystal?
2E9E B0 22     BCS 2EC2                 -- RTS if so
2EA0 BD 06 0C  LDA 0C06,X               -- get originator of shot
2EA3 85 70     STA 70                   
2EA5 C4 70     CPY 70                   -- does the shot originate from the same monster?
2EA7 F0 19     BEQ 2EC2                 -- rts if so
2EA9 A4 84     LDY 84                   -- get thing being shot
2EAB B9 06 0C  LDA 0C06,Y               -- get monster id
2EAE A8        TAY                      
2EAF B9 00 07  LDA 0700,Y               -- get type of monster
2EB2 30 08     BMI 2EBC                 -- branch over if egg
2EB4 29 0F     AND #0F                  -- extract basic type
2EB6 F0 0B     BEQ 2EC3                 -- if force-field then branch
2EB8 C9 0E     CMP #0E                  -- is it butterfly or deathcube?
2EBA B0 07     BCS 2EC3                 -- branch if so
2EBC 20 36 2F  JSR 2F36                 -- turn shot into small bang
2EBF 4C 7D 2F  JMP 2F7D                 -- injure monster
2EC2 60        RTS                      

		-- possibly rebound shot

2EC3 BD 06 0C  LDA 0C06,X               -- get shot id
2EC6 C9 02     CMP #02                  -- has it already rebounded?
2EC8 F0 F8     BEQ 2EC2                 -- RTS if so
2ECA BD 04 0C  LDA 0C04,X               -- get the direction of travel
2ECD 49 01     EOR #01                  -- reverse direction
2ECF 9D 04 0C  STA 0C04,X               -- store new direction
2ED2 A9 02     LDA #02                  
2ED4 9D 06 0C  STA 0C06,X               -- mark shot as a rebound
2ED7 A9 03     LDA #03                  
2ED9 9D 03 0C  STA 0C03,X               -- set position between tiles
2EDC 4C D6 2D  JMP 2DD6                 -- play shot bounce sound

		-- player getting shot
		-- on entry, X identifies the shot

2EDF AD 00 0C  LDA 0C00                 -- get player status
2EE2 C9 05     CMP #05                  -- is it alive?
2EE4 D0 DC     BNE 2EC2                 -- RTS if not
2EE6 BD 06 0C  LDA 0C06,X               -- get the id of the shot
2EE9 C9 01     CMP #01                  -- is it the players before rebounding?
2EEB F0 D5     BEQ 2EC2                 -- RTS if so
2EED 20 36 2F  JSR 2F36                 -- turn animation from shot into small bang
2EF0 AD 0E 0C  LDA 0C0E                 -- get player energy
2EF3 38        SEC                      
2EF4 FD 0E 0C  SBC 0C0E,X               -- deduct the shot energy
2EF7 8D 0E 0C  STA 0C0E                 -- store the remaining energy
2EFA 90 86     BCC 2E82                 -- branch if player dies
2EFC A9 04     LDA #04                  
2EFE 20 D6 2D  JSR 2DD6                 -- play player shot and injured sound
2F01 4C E9 33  JMP 33E9                 -- redraw energy bar

		-- collision with crystal 

2F04 4C 95 30  JMP 3095                 -- get crystal

2F07 4C BD 31  JMP 31BD                 -- not used

		-- shot hitting shot - only if one or more of the shots is monster originated without rebounding will the shots interact

2F0A BD 06 0C  LDA 0C06,X               -- get shot id
2F0D 29 03     AND #03                  -- extract first two bits
2F0F F0 0C     BEQ 2F1D                 -- branch if monster originated (and not a rebound)
2F11 C9 03     CMP #03                  -- is it the block?
2F13 F0 07     BEQ 2F1C                 -- rts if so
2F15 B9 06 0C  LDA 0C06,Y               -- get 2nd shot id
2F18 29 03     AND #03                  -- extract first two bits
2F1A F0 01     BEQ 2F1D                 -- branch if monster originated (and not a rebound)
2F1C 60        RTS                      

2F1D A9 0B     LDA #0B                  
2F1F 20 D6 2D  JSR 2DD6                 -- play high pip sound
2F22 BD 0E 0C  LDA 0C0E,X               -- get energy of first shot
2F25 38        SEC                      
2F26 F9 0E 0C  SBC 0C0E,Y               -- subtract energy of 2nd shot
2F29 9D 0E 0C  STA 0C0E,X               -- store remaining energy
2F2C B0 0A     BCS 2F38                 -- did the first shot survive? branch and convert the 2nd shot to a bang if so
2F2E 49 FF     EOR #FF                  -- negate the remaining energy to return it to a +ve value
2F30 18        CLC                      
2F31 69 01     ADC #01                  
2F33 99 0E 0C  STA 0C0E,Y               -- store the 2nd shots remaining energy. the 1st shot will be converted to a bang.

		-- turn animation slot from being a shot to being a short bang
		-- on entry, X is the slot to convert

2F36 8A        TXA                      
2F37 A8        TAY                      

		-- turn animation slot from being a shot to being a short bang
		-- on entry, Y is the slot to convert

2F38 A9 02     LDA #02                  
2F3A 99 0F 0C  STA 0C0F,Y               -- set time span
2F3D A9 54     LDA #54                  
2F3F 99 09 0C  STA 0C09,Y               -- set animation base sprite
2F42 A9 04     LDA #04                  
2F44 99 04 0C  STA 0C04,Y               -- set direction to still
2F47 A9 00     LDA #00                  
2F49 99 0A 0C  STA 0C0A,Y               
2F4C 99 0B 0C  STA 0C0B,Y               
2F4F 99 0C 0C  STA 0C0C,Y               
2F52 99 0D 0C  STA 0C0D,Y               -- set no changes to the animation
2F55 A9 05     LDA #05                  
2F57 99 00 0C  STA 0C00,Y               -- set slot type
2F5A 60        RTS                      

		-- set up long bang
		-- on entry, Y is the monster slot

2F5B A9 0B     LDA #0B                  
2F5D 99 0F 0C  STA 0C0F,Y               -- set delay before removal
2F60 A9 54     LDA #54                  
2F62 99 09 0C  STA 0C09,Y               -- set base sprite
2F65 A9 03     LDA #03                  
2F67 99 0A 0C  STA 0C0A,Y               -- set number of frames
2F6A A9 02     LDA #02                  
2F6C 99 0B 0C  STA 0C0B,Y               -- set time to show each frame
2F6F A9 00     LDA #00                  
2F71 99 0C 0C  STA 0C0C,Y               -- set initial frame index
2F74 99 0D 0C  STA 0C0D,Y               -- set count before changing frame
2F77 A9 05     LDA #05                  
2F79 99 00 0C  STA 0C00,Y               -- set type of slot
2F7C 60        RTS                      

		-- monster being injured
		-- on entry, &84 contains the slot number of the monster being injured

2F7D A4 84     LDY 84                   
2F7F B9 06 0C  LDA 0C06,Y               -- get monster id
2F82 A8        TAY                      
2F83 20 12 30  JSR 3012                 -- hit and possibly kill monster, 
										-- A will be 0 if monster died, 1 if monster died and spawned, and FF if it survived

2F86 30 16     BMI 2F9E                 -- branch if it's still alive
2F88 D0 05     BNE 2F8F                 -- branch if it died and split
2F8A A4 84     LDY 84                   -- standard death
2F8C 4C 5B 2F  JMP 2F5B                 -- set up long bang

		-- display the two new diamond demons

2F8F A4 89     LDY 89                   -- get the previously created id of the 1st monster
2F91 20 65 29  JSR 2965                 -- add the newly spawned diamond demon to room
2F94 A4 88     LDY 88                   -- get the previously created id of the 2nd monster
2F96 20 65 29  JSR 2965                 -- add the newly spawned diamond demon to room
2F99 A4 84     LDY 84                   
2F9B 4C 5B 2F  JMP 2F5B                 -- set up long bang

		-- continue dealing with survival of monster

2F9E A4 74     LDY 74                   
2FA0 B9 40 06  LDA 0640,Y               -- get energy from cache
2FA3 A4 84     LDY 84                   
2FA5 99 0E 0C  STA 0C0E,Y               -- store energy into animation slot
2FA8 B9 0F 0C  LDA 0C0F,Y               -- get type of movement
2FAB C9 82     CMP #82                  -- is it patrolling?
2FAD D0 05     BNE 2FB4                 -- rts if not
2FAF A9 88     LDA #88                  
2FB1 99 0F 0C  STA 0C0F,Y               -- set movement to rolling
2FB4 60        RTS                      

		-- examine result of subtracting energy
		-- on entry, C and Z indicate the result of the calculation
		-- on exit, the carry flag is clear if the result is zero or less (the monster is dead)

2FB5 90 FD     BCC 2FB4                 -- RTS if result is -ve (carry flag remains clear)
2FB7 D0 FB     BNE 2FB4                 -- if +ve then RTS (carry flag remains set)
2FB9 18        CLC                      -- result is 0
2FBA 60        RTS                      

		-- adjust energy and score after meeting shot or block
		-- on entry, X is the animation slot containing the shot or block, Y is the monster being affected
		-- on exit, carry is set if the monster survives, or clear if it has been killed

2FBB BD 0E 0C  LDA 0C0E,X               -- get energy of thing hitting object in slot Y
2FBE C9 FF     CMP #FF                  
2FC0 F0 0D     BEQ 2FCF                 -- skip over if it has maximum energy (can only be block)
2FC2 B9 00 07  LDA 0700,Y               -- get monster type being hit
2FC5 30 08     BMI 2FCF                 -- branch if -ve (an egg)
2FC7 29 0F     AND #0F                  -- extract just the basic type
2FC9 F0 45     BEQ 3010                 -- if zero (force-field) then RTS
2FCB C9 0E     CMP #0E                  -- is it butterfly or deathcube?
2FCD B0 41     BCS 3010                 -- RTS if so

2FCF B9 40 06  LDA 0640,Y               -- get energy of monster being hit/crushed
2FD2 38        SEC                      
2FD3 FD 0E 0C  SBC 0C0E,X               -- subtract energy of shot/block
2FD6 99 40 06  STA 0640,Y               -- store remaining energy
2FD9 20 B5 2F  JSR 2FB5                 -- check result
2FDC 08        PHP                      -- push result
2FDD 98        TYA                      
2FDE 48        PHA                      
2FDF BD 0E 0C  LDA 0C0E,X               -- get energy of shot/block
2FE2 B0 04     BCS 2FE8                 -- branch if the monster is still alive
2FE4 18        CLC                      
2FE5 79 40 06  ADC 0640,Y               -- add the remaining energy (a -ve number) to give how much energy the block/shot removed

2FE8 4A        LSR A                    -- halve it
2FE9 18        CLC                      
2FEA 69 01     ADC #01                  -- add 1
2FEC 48        PHA                      
2FED B9 00 07  LDA 0700,Y               -- get monster type
2FF0 29 0F     AND #0F                  -- get basic type
2FF2 C9 0F     CMP #0F                  -- is it a deathcube?
2FF4 F0 15     BEQ 300B                 -- skip scoring if so 
2FF6 BD 06 0C  LDA 0C06,X               -- get id of shot/block
2FF9 C9 01     CMP #01                  
2FFB F0 09     BEQ 3006                 -- jump to single scoring for id 1 (shot)
2FFD C9 03     CMP #03                  
2FFF D0 0A     BNE 300B                 -- skip scoring if not 3 (which indicates crushing by block)
3001 68        PLA                      
3002 48        PHA                      
3003 20 9F 26  JSR 269F                 -- call scoring (for the first time) for block
3006 68        PLA                      
3007 48        PHA                      
3008 20 9F 26  JSR 269F                 -- call scoring for the second time for block, for the first time for a shot
300B 68        PLA                      
300C 68        PLA                      
300D A8        TAY                      
300E 28        PLP                      
300F 60        RTS                      
3010 38        SEC                      
3011 60        RTS                      

		-- hit and injure/kill monster subroutine
		-- returns 0 if monster died, 1 if monster died and spawned, and FF if it survived

3012 A9 0B     LDA #0B                  
3014 20 D6 2D  JSR 2DD6                 -- play high pip

3017 20 BB 2F  JSR 2FBB                 -- deduct energy and adjust score
301A B0 24     BCS 3040                 -- branch if monster still alive

		-- monster has been killed

301C 84 74     STY 74                   
301E A9 00     LDA #00                  
3020 20 D6 2D  JSR 2DD6                 -- play bang
3023 B9 00 07  LDA 0700,Y               -- get monster type
3026 30 20     BMI 3048                 -- branch if -ve (an egg)
3028 29 10     AND #10                  -- extract flag for split upon death
302A F0 1C     BEQ 3048                 -- skip over if it doesn't

302C 20 10 29  JSR 2910                 -- create a new diamond demon
302F 84 88     STY 88                   -- store its ID for later
3031 20 10 29  JSR 2910                 -- create a new diamond demon
3034 84 89     STY 89                   -- store its ID for later
3036 A4 74     LDY 74                   -- restore monster id
3038 A9 FF     LDA #FF                  
303A 99 00 04  STA 0400,Y               -- mark monster as expired
303D A9 01     LDA #01                  -- return 1 (monster died and split)
303F 60        RTS                      

		-- indicate that monster survived back to caller

3040 84 74     STY 74                   
3042 20 50 30  JSR 3050                 -- shot monster without killing it
3045 A9 FF     LDA #FF                  -- return FF (monster survived)
3047 60        RTS                      

		-- mark room data free for killed monster

3048 A9 FF     LDA #FF                  
304A 99 00 04  STA 0400,Y               -- clear monster data slot
304D A9 00     LDA #00                  -- return 0 (standard death)
304F 60        RTS                      

		-- shot monster without killing it

3050 B9 00 07  LDA 0700,Y               -- get monster type
3053 30 24     BMI 3079                 -- if -ve (egg) then branch
3055 B9 C0 04  LDA 04C0,Y               -- get type of movement
3058 29 40     AND #40                  -- extract bit 6 (does the monster shoot back, only after it's been shot)
305A F0 08     BEQ 3064                 -- branch if it doesn't
305C B9 C0 04  LDA 04C0,Y               -- get type of movement
305F 09 80     ORA #80                  -- set bit 7 (this enables the monster to shoot at the player)
3061 99 C0 04  STA 04C0,Y               -- save new type of movement

3064 B9 C0 04  LDA 04C0,Y               -- get type of movement
3067 29 07     AND #07                  -- extract first 3 bits (base movement)
3069 F0 0E     BEQ 3079                 -- if zero (still) then branch
306B C9 03     CMP #03                  
306D B0 0A     BCS 3079                 -- branch if 3 or more (so continue if patrolling)
306F B9 C0 04  LDA 04C0,Y               -- get movement type
3072 29 F8     AND #F8                  -- extract everything but the base movement type
3074 09 07     ORA #07                  -- set base movement type to rolling
3076 99 C0 04  STA 04C0,Y               -- store new movement type

3079 B9 00 07  LDA 0700,Y               -- get monster type
307C 30 0D     BMI 308B                 -- if -ve (egg) branch over
307E 29 0F     AND #0F                  -- extract base type
3080 F0 0E     BEQ 3090                 -- branch if zero (forcefield)
3082 C9 0E     CMP #0E                  -- is it butterfly or deathcube?
3084 B0 0A     BCS 3090                 -- branch if so
3086 A9 07     LDA #07                  
3088 4C D6 2D  JMP 2DD6			        -- play poo downward slide

308B A9 11     LDA #11                  
308D 4C D6 2D  JMP 2DD6                 -- play shot egg

3090 A9 03     LDA #03                  -- this code not used!!!
3092 4C D6 2D  JMP 2DD6                 -- play bounce shot

		-- player gets crystal

3095 A5 84     LDA 84                   
3097 F0 01     BEQ 309A                 
3099 60        RTS                      

309A A9 00     LDA #00                  -- got crystal
309C 9D 00 0C  STA 0C00,X               -- clear monster slot
309F BD 06 0C  LDA 0C06,X               -- get id
30A2 A8        TAY                      
30A3 A9 FF     LDA #FF                  
30A5 99 F0 0B  STA 0BF0,Y               -- mark crystal as got in list
30A8 B9 20 44  LDA 4420,Y               -- get score
30AB 85 70     STA 70                   
30AD B9 21 44  LDA 4421,Y               
30B0 85 71     STA 71                   
30B2 20 A2 26  JSR 26A2			        -- add score
30B5 98        TYA                      
30B6 4A        LSR A                    
30B7 A8        TAY                      
30B8 B9 38 44  LDA 4438,Y               -- get energy to add
30BB 18        CLC                      
30BC 6D 0E 0C  ADC 0C0E                 -- add energy
30BF 90 02     BCC 30C3                 -- total below ff?
30C1 A9 FF     LDA #FF                  
30C3 8D 0E 0C  STA 0C0E                 -- store new energy
30C6 20 E9 33  JSR 33E9                 -- redraw energy bar
30C9 A9 0C     LDA #0C                  
30CB 20 D6 2D  JSR 2DD6                 -- play got crystal
30CE A9 0D     LDA #0D                  
30D0 20 D6 2D  JSR 2DD6                 -- play got crystal

		-- remove forcefield for the level containing the crystal

30D3 AD C6 0B  LDA 0BC6                 -- get current room (which contained the crystal)
30D6 20 06 26  JSR 2606                 -- calculate corresponding level
30D9 85 71     STA 71                   -- store the level corresponding to the crystal
30DB A0 BF     LDY #BF                  -- initialise loop counter
30DD B9 00 04  LDA 0400,Y               -- get monster room number
30E0 30 15     BMI 30F7                 -- if &ff then not occupied, branch
30E2 20 06 26  JSR 2606                 -- calculate corresponding level
30E5 C5 71     CMP 71                   -- compare to level of the crystal
30E7 D0 0E     BNE 30F7                 -- not equal so branch
30E9 B9 00 07  LDA 0700,Y               -- get monster type
30EC 30 09     BMI 30F7                 -- skip over if egg
30EE 29 0F     AND #0F                  -- extract basic type
30F0 D0 05     BNE 30F7                 -- skip if not zero (forcefield)
30F2 A9 FF     LDA #FF                  
30F4 99 00 04  STA 0400,Y               -- remove forcefield
30F7 88        DEY                      -- decrement loop counter
30F8 C0 FF     CPY #FF                  -- end of loop?
30FA D0 E1     BNE 30DD                 -- continue loop

		-- check if all crystals have been got

30FC A0 0E     LDY #0E                  -- initialise loop counter
30FE A9 FF     LDA #FF                  -- set result to true
3100 39 F0 0B  AND 0BF0,Y               -- result = result & crystal got (&FF)
3103 88        DEY                      
3104 88        DEY                      
3105 10 F9     BPL 3100                 -- continue loop
3107 C9 FF     CMP #FF                  -- have all crystals been got?
3109 D0 3D     BNE 3148                 -- rts if not

		-- end world stuff

310B A9 80     LDA #80                  
310D 8D DC 0B  STA 0BDC                 -- start delay counter for game loop end
3110 A9 06     LDA #06                  
3112 85 8A     STA 8A                   -- set world complete flag
3114 8D 00 0C  STA 0C00                 -- set player status to inactive
3117 A9 10     LDA #10                  
3119 20 D6 2D  JSR 2DD6                 -- play end of world sound

		-- Set counter to hatching/type of movement property of each animation slot to 1
		-- This will cause them to be removed by the hatching code as they are not eggs

311C A0 10     LDY #10                  -- initialise loop counter
311E A9 01     LDA #01                  
3120 99 0F 0C  STA 0C0F,Y               -- set delay to hatching
3123 98        TYA                      
3124 18        CLC                      
3125 69 10     ADC #10                  -- increment counter
3127 A8        TAY                      
3128 D0 F4     BNE 311E                 -- continue loop


312A 8D CD 0B  STA 0BCD                 -- store 0 as highest level achieved
312D 8A        TXA                      
312E 48        PHA                      

312F A2 03     LDX #03                  -- initialise loop counter
3131 A9 13     LDA #13                  
3133 20 EE FF  JSR FFEE                 -- vdu 19
3136 8A        TXA                      
3137 20 EE FF  JSR FFEE                 -- set logical colour
313A BD 49 31  LDA 3149,X               
313D 20 EE FF  JSR FFEE                 -- set actual colour
3140 20 E7 37  JSR 37E7                 -- set 0s
3143 CA        DEX                      
3144 10 EB     BPL 3131                 -- continue loop
3146 68        PLA                      
3147 AA        TAX                      
3148 60        RTS                      

3149 0B                                 -- 0 = flashing yellow/blue (was black)
314A 01                                 -- 1 = red (was red)
314B 02                                 -- 2 = green (was green)
314C 00                                 -- 3 = black (was blue)

		-- player dies

314D EA        NOP                      
314E A9 B0     LDA #B0                  
3150 8D DC 0B  STA 0BDC                 -- set delay counter before main loop exits
3153 A0 00     LDY #00                  
3155 20 5B 2F  JSR 2F5B                 -- replace player with long bang
3158 A9 06     LDA #06                  
315A 8D 00 0C  STA 0C00                 -- set player status
315D A9 00     LDA #00                  
315F 8D 0E 0C  STA 0C0E                 -- set energy to 0
3162 20 E9 33  JSR 33E9                 
3165 A9 13     LDA #13                  
3167 20 D6 2D  JSR 2DD6                 -- play death sound 1
316A A9 14     LDA #14                  
316C 20 D6 2D  JSR 2DD6                 -- play death sound 2
316F A9 15     LDA #15                  
3171 20 D6 2D  JSR 2DD6                 -- play death sound 3
3174 A9 01     LDA #01                  
3176 20 D6 2D  JSR 2DD6                 -- play death sound on channel 0

		-- add grave to world

3179 20 B2 31  JSR 31B2                 -- get free static slot
317C 98        TYA                      
317D 30 32     BMI 31B1                 -- no slot free, RTS
317F AD C6 0B  LDA 0BC6                 -- get current room number
3182 99 00 0E  STA 0E00,Y               -- set static object room
3185 A9 4F     LDA #4F                  
3187 99 00 0F  STA 0F00,Y               -- set static object type to grave
318A A9 FF     LDA #FF                  
318C 99 80 0F  STA 0F80,Y               -- set static object energy to maximum
318F AD 02 0C  LDA 0C02                 -- get previous tile number
3192 20 83 1C  JSR 1C83                 -- separate out into x & y
3195 AD 03 0C  LDA 0C03                 -- get tile moving towards
3198 C9 01     CMP #01                  
319A D0 06     BNE 31A2                 -- not 1 so skip next bit
319C AD 04 0C  LDA 0C04                 -- get direction
319F 20 67 1C  JSR 1C67                 -- apply direction to x & y
31A2 20 90 1C  JSR 1C90                 -- amalgamate x & y to tile number
31A5 99 80 0E  STA 0E80,Y               -- store static object tile number
31A8 A8        TAY                      
31A9 20 5A 25  JSR 255A                 -- get object type
31AC A4 74     LDY 74                   
31AE 99 00 0B  STA 0B00,Y               -- store grave into current room map
31B1 60        RTS                      

		-- Find a free static slot to store the grave

31B2 A0 7F     LDY #7F                  
31B4 B9 00 0E  LDA 0E00,Y               
31B7 30 03     BMI 31BC                 
31B9 88        DEY                      
31BA 10 F8     BPL 31B4                 
31BC 60        RTS                      

		-- determine outcome of block movement upon animated item
		-- on entry, &84 indicates which slot is being affected by the block

31BD A4 84     LDY 84                   -- get saved slot number
31BF D0 12     BNE 31D3                 -- branch if not the player
31C1 AD 00 0C  LDA 0C00                 -- get player status
31C4 C9 05     CMP #05                  -- is player alive?
31C6 D0 0B     BNE 31D3                 -- branch if not alive
31C8 AD C3 0B  LDA 0BC3                 -- is bouncing backward?
31CB D0 06     BNE 31D3                 -- branch if so
31CD 9D 00 0C  STA 0C00,X               -- clear block slot status/occupant
31D0 4C 82 2E  JMP 2E82                 -- player dies

31D3 C0 FF     CPY #FF                  -- is slot number valid?
31D5 F0 0A     BEQ 31E1                 -- RTS if not
31D7 B9 00 0C  LDA 0C00,Y               -- get slot status/occupant
31DA 10 06     BPL 31E2                 -- branch if +ve
31DC A9 00     LDA #00                  
31DE 99 00 0C  STA 0C00,Y               -- clear slot status/occupant
31E1 60        RTS                      

31E2 C9 04     CMP #04                  -- is slot occupied by crystal?
31E4 B0 FB     BCS 31E1                 -- RTS if so
31E6 A9 FF     LDA #FF                  
31E8 9D 0E 0C  STA 0C0E,X               -- set energy of block to maximum
31EB A4 84     LDY 84                   
31ED B9 06 0C  LDA 0C06,Y               -- get monster identifier 
31F0 A8        TAY                      
31F1 B9 00 07  LDA 0700,Y               -- get monster type
31F4 30 05     BMI 31FB                 -- if -ve (an egg) then skip over
31F6 29 EF     AND #EF                  -- remove bit 4 (so monster won't split upon death)
31F8 99 00 07  STA 0700,Y               -- store new monster type
31FB 4C 7D 2F  JMP 2F7D                 -- kill monster

		-- Possibly change the room that the specified monster is in
		-- on entry, A is the monster index

31FE A8        TAY                      
31FF B9 00 04  LDA 0400,Y               -- get monster's room
3202 30 0F     BMI 3213                 -- if -ve then it's dead so RTS
3204 CD C6 0B  CMP 0BC6                 -- compare with current room
3207 F0 0A     BEQ 3213                 -- if equal then RTS
3209 20 06 26  JSR 2606                 -- get monster's current level into A
320C CD CD 0B  CMP 0BCD                 -- compare with highest level achieved by player
320F F0 21     BEQ 3232                 -- branch over if same level
3211 90 1F     BCC 3232                 -- branch over if monster level is less than player's level
3213 60        RTS                      

		-- modify monster's room changing behaviour if it's behaving cautiously
		-- on entry, Y is the monster index, 73 has the monster's suggested direction

3214 B9 C0 04  LDA 04C0,Y               -- get movement type
3217 29 07     AND #07                  -- test first 3 bits
3219 C9 06     CMP #06                  -- is it cautious?
321B D0 F6     BNE 3213                 -- nope, so RTS
321D B9 40 06  LDA 0640,Y               -- get monster's energy
3220 0A        ASL A                    -- double it
3221 B0 F0     BCS 3213                 -- RTS if overflow
3223 0A        ASL A                    -- double it
3224 B0 ED     BCS 3213                 -- RTS if overflow
3226 CD 0E 0C  CMP 0C0E                 -- compare to player's energy
3229 B0 E8     BCS 3213                 -- RTS if monster's energy the same or greater
322B A5 73     LDA 73                   -- get current result
322D 49 01     EOR #01                  -- toggle bit 0 to reverse direction
322F 85 73     STA 73                   -- set current result
3231 60        RTS                      

		-- check monster movement attributes

3232 B9 C0 04  LDA 04C0,Y               -- get monster movement type
3235 29 10     AND #10                  -- check is moving between rooms bit (the active flag)
3237 F0 DA     BEQ 3213                 -- not set, so RTS
3239 B9 00 07  LDA 0700,Y               -- get monster type
323C 30 D5     BMI 3213                 -- if an egg, then RTS

323E 8A        TXA                      
323F 48        PHA                      
3240 B9 00 04  LDA 0400,Y               -- get monster's room number
3243 84 72     STY 72                   
3245 20 00 09  JSR 0900                 -- get information about room (updates 0ba0 to 0ba5)
3248 A4 72     LDY 72                   
324A B9 C0 04  LDA 04C0,Y               -- get monster movement type
324D 29 20     AND #20                  -- test bit 5 which is set if the monster follows the player
324F F0 42     BEQ 3293                 -- branch if clear and the monster should move in a random direction

3251 A9 00     LDA #00                  
3253 85 73     STA 73                   -- set initial result to up (directions: 0 is up, 1 is down, 2 is right, 3 is left)
3255 B9 00 04  LDA 0400,Y               -- get room number of monster
3258 29 F0     AND #F0                  -- calculate y co-ord of monster (which row of world)
325A 85 70     STA 70                   
325C AD C6 0B  LDA 0BC6                 -- get current room
325F 29 F0     AND #F0                  -- calculate y co-ord of player
3261 C5 70     CMP 70                   -- compare
3263 F0 0E     BEQ 3273                 -- if the same then branch to next section

3265 B0 02     BCS 3269                 -- branch over next instruction if y co-ord of player > y co-ord of monster
3267 E6 73     INC 73                   -- set result to down
3269 20 14 32  JSR 3214                 -- modify for cautious behaviour (if scared, then toggle bit 0)
326C A5 73     LDA 73                   -- get result
326E 20 2C 33  JSR 332C                 -- is there an exit in that direction?
3271 D0 32     BNE 32A5                 -- branch if there is to update the monster

3273 A9 02     LDA #02                  
3275 85 73     STA 73                   -- now set result to Right

3277 AD C6 0B  LDA 0BC6                 
327A 29 0F     AND #0F                  -- get x co-ord of player
327C 85 70     STA 70                   
327E B9 00 04  LDA 0400,Y               
3281 29 0F     AND #0F                  -- get x co-ord of monster
3283 C5 70     CMP 70                   
3285 90 02     BCC 3289                 -- branch if monster x co-ord < x co-ord of player
3287 E6 73     INC 73                   -- set result to Left
3289 20 14 32  JSR 3214                 -- modify for cautious behaviour (if scared, then toggle bit 0)
328C A5 73     LDA 73                   -- get result
328E 20 2C 33  JSR 332C                 -- check if move possible
3291 D0 12     BNE 32A5                 -- branch if move is possible, otherwise fall through

		-- move the monster in a random direction

3293 20 80 1E  JSR 1E80                 -- get random number
3296 29 03     AND #03                  -- only want the lowest 2 bits
3298 85 73     STA 73                   -- store
329A 20 2C 33  JSR 332C                 -- check whether we can move in that direction
329D D0 06     BNE 32A5                 -- if yes, then branch
329F E6 73     INC 73                   -- increment result
32A1 A5 73     LDA 73                   -- get new result
32A3 D0 F1     BNE 3296                 -- jump to check next direction

		-- direction chosen so moving monster 

32A5 A9 FF     LDA #FF                  -- randomise tile position
32A7 99 80 05  STA 0580,Y               
32AA B9 00 04  LDA 0400,Y               -- get current room
32AD 85 70     STA 70                   
32AF 20 3A 33  JSR 333A                 -- get new room and tile position according to direction chosen
32B2 A5 70     LDA 70                   -- get new room number
32B4 99 00 04  STA 0400,Y               -- store updated room number
32B7 CD CC 0B  CMP 0BCC                 -- compare to player's last room
32BA D0 05     BNE 32C1                 -- branch if not the same
32BC A5 71     LDA 71                   -- get new tile position
32BE 99 80 05  STA 0580,Y               -- update tile position 

32C1 B9 00 04  LDA 0400,Y               -- get new room
32C4 CD C6 0B  CMP 0BC6                 -- is it the same as the player?
32C7 D0 60     BNE 3329                 -- no, then rts
32C9 A0 E0     LDY #E0                  
32CB 20 1A 27  JSR 271A                 -- get empty monster slot in c00
32CE 98        TYA                      
32CF F0 58     BEQ 3329                 -- none available, so exit
32D1 20 80 1E  JSR 1E80                 -- get random number
32D4 29 01     AND #01                  -- first bit only 
32D6 45 73     EOR 73                   -- merge with chosen direction
32D8 99 04 0C  STA 0C04,Y               -- store new direction

32DB A5 71     LDA 71                   -- get new tile position
32DD 20 83 1C  JSR 1C83                 -- seperate out into row and column
32E0 B9 04 0C  LDA 0C04,Y               -- get selected direction
32E3 20 67 1C  JSR 1C67                 -- update row and column with direction
32E6 20 90 1C  JSR 1C90                 -- combine row and column
32E9 AA        TAX                      
32EA BD 00 0B  LDA 0B00,X               -- get tile contents at that tile number
32ED C9 14     CMP #14                  
32EF B0 13     BCS 3304                 -- 14 or higher then branch
32F1 A6 71     LDX 71                   -- get new tile position
32F3 BD 00 0B  LDA 0B00,X               -- get tile contents 
32F6 C9 20     CMP #20                  
32F8 B0 0A     BCS 3304                 -- if 20 or more then branch
32FA B9 04 0C  LDA 0C04,Y               -- get direction
32FD 49 01     EOR #01                  -- reverse it
32FF 99 04 0C  STA 0C04,Y               -- store it
3302 10 D7     BPL 32DB                 -- jump back

3304 8A        TXA                      
3305 99 01 0C  STA 0C01,Y               -- store new tile number
3308 98        TYA                      
3309 AA        TAX                      
330A A4 72     LDY 72                   -- get monster number
330C A5 73     LDA 73                   -- get chosen direction
330E 49 02     EOR #02                  -- toggle 2nd bit
3310 C9 02     CMP #02                  
3312 B0 02     BCS 3316                 
3314 49 01     EOR #01                  
3316 48        PHA                      
3317 20 AE 24  JSR 24AE                 -- load monster details 
331A 68        PLA                      
331B 9D 04 0C  STA 0C04,X               -- store direction
331E 20 0F 1D  JSR 1D0F                 -- initialise monster slot
3321 20 F6 1A  JSR 1AF6                 -- verify direction of travel
3324 A9 0F     LDA #0F                  
3326 20 D6 2D  JSR 2DD6                 -- play monster entry sound

3329 68        PLA                      
332A AA        TAX                      
332B 60        RTS                      

		-- test if there's an exit in the direction indicated
		-- on entry, A is the exit from the room
		--		0 is up, 1 is down, 2 is right, 3 is left
		-- on exit, A is non-zero when can move in the specified direction

332C AA        TAX                      
332D A9 03     LDA #03                  -- bit mask for testing exits
332F CA        DEX                      
3330 30 04     BMI 3336                 -- end loop when X negative
3332 0A        ASL A                    -- move mask left
3333 0A        ASL A                    -- move mask left
3334 D0 F9     BNE 332F                 

3336 2D A5 0B  AND 0BA5                 -- compare with room exits
3339 60        RTS                      

		-- change room
		-- on entry, &73 is direction to go in, &70 is the current room
		-- on exit, &70 is the new room number, &71 is the new tile number

333A A5 73     LDA 73                   -- get direction
333C D0 0C     BNE 334A                 
333E A5 70     LDA 70                   
3340 18        CLC                      
3341 69 10     ADC #10                  -- go up
3343 85 70     STA 70                   
3345 A9 97     LDA #97                  -- new tile number at middle bottom
3347 85 71     STA 71                   
3349 60        RTS                      

334A C9 01     CMP #01                  
334C D0 0C     BNE 335A                 
334E A5 70     LDA 70                   
3350 38        SEC                      
3351 E9 10     SBC #10                  -- go down
3353 85 70     STA 70                   
3355 A9 07     LDA #07                  -- new tile number at middle top
3357 85 71     STA 71                   
3359 60        RTS                      

335A C9 03     CMP #03                  
335C D0 07     BNE 3365                 
335E C6 70     DEC 70                   -- go left
3360 A9 4F     LDA #4F                  -- new tile number at middle right
3362 85 71     STA 71                   
3364 60        RTS                      

3365 E6 70     INC 70                   -- go right
3367 A9 40     LDA #40                  -- new tile number at middle left
3369 85 71     STA 71                   
336B 60        RTS                      

336C 29 0F     AND #0F                  
336E 0A        ASL A                    
336F 0A        ASL A                    
3370 0A        ASL A                    
3371 85 72     STA 72                   
3373 A9 53     LDA #53                  
3375 85 73     STA 73                   
3377 A0 03     LDY #03                  
3379 B1 72     LDA (72),Y               
337B 91 74     STA (74),Y               
337D 88        DEY                      
337E 10 F9     BPL 3379                 
3380 A5 72     LDA 72                   
3382 18        CLC                      
3383 69 04     ADC #04                  
3385 85 72     STA 72                   
3387 A0 03     LDY #03                  
3389 B1 72     LDA (72),Y               
338B 91 70     STA (70),Y               
338D 88        DEY                      
338E 10 F9     BPL 3389                 
3390 4C 13 35  JMP 3513                 
3393 20 00 11  JSR 1100                 
3396 A5 71     LDA 71                   
3398 38        SEC                      
3399 E9 02     SBC #02                  
339B C9 58     CMP #58                  
339D B0 03     BCS 33A2                 
339F 18        CLC                      
33A0 69 28     ADC #28                  
33A2 85 75     STA 75                   
33A4 A5 70     LDA 70                   
33A6 18        CLC                      
33A7 69 04     ADC #04                  
33A9 85 74     STA 74                   
33AB 60        RTS                      

		-- redraw score?

33AC 8A        TXA                      
33AD 48        PHA                      
33AE 98        TYA                      
33AF 48        PHA                      
33B0 A2 2D     LDX #2D                  
33B2 A0 01     LDY #01                  
33B4 20 93 33  JSR 3393                 
33B7 A9 00     LDA #00                  
33B9 85 76     STA 76                   
33BB A2 02     LDX #02                  
33BD BD D5 0B  LDA 0BD5,X               
33C0 48        PHA                      
33C1 4A        LSR A                    
33C2 4A        LSR A                    
33C3 4A        LSR A                    
33C4 4A        LSR A                    
33C5 20 D9 33  JSR 33D9                 
33C8 68        PLA                      
33C9 20 D9 33  JSR 33D9                 
33CC CA        DEX                      
33CD 10 EE     BPL 33BD                 
33CF A9 00     LDA #00                  
33D1 20 6C 33  JSR 336C                 
33D4 68        PLA                      
33D5 A8        TAY                      
33D6 68        PLA                      
33D7 AA        TAX                      
33D8 60        RTS                      

33D9 A4 76     LDY 76                   
33DB D0 8F     BNE 336C                 
33DD C9 00     CMP #00                  
33DF F0 04     BEQ 33E5                 
33E1 E6 76     INC 76                   
33E3 D0 87     BNE 336C                 
33E5 A9 0B     LDA #0B                  
33E7 D0 83     BNE 336C                 

		-- redraw energy bar

33E9 8A        TXA                      
33EA 48        PHA                      
33EB 98        TYA                      
33EC 48        PHA                      
33ED A2 04     LDX #04                  
33EF A0 01     LDY #01                  
33F1 20 93 33  JSR 3393                 
33F4 A5 74     LDA 74                   
33F6 18        CLC                      
33F7 69 02     ADC #02                  
33F9 85 74     STA 74                   
33FB A9 F0     LDA #F0                  
33FD 85 88     STA 88                   
33FF AD 0E 0C  LDA 0C0E                 -- get player energy
3402 C9 04     CMP #04                  
3404 B0 1E     BCS 3424                 -- branch if energy greater or equal to 4

3406 C9 00     CMP #00                  
3408 D0 09     BNE 3413                 -- branch if player has at least some energy

340A AD 00 0C  LDA 0C00                 -- get player's status
340D C9 05     CMP #05                  
340F D0 13     BNE 3424                 -- branch if dead/inactive

		-- draw for no energy

3411 A9 00     LDA #00                  

		-- draw for some energy: 
			0 will be drawn as 25%, 
			1 will be drawn as 50%, 
			2 will be drawn as 75%,
			3 will be drawn as 100%

3413 18        CLC                      
3414 69 01     ADC #01                  -- add 1 to energy amount
3416 0A        ASL A                    -- double it
3417 0A        ASL A                    -- double it again
3418 85 77     STA 77                   
341A A9 0F     LDA #0F                  
341C 85 88     STA 88                   
341E A9 00     LDA #00                  
3420 85 76     STA 76                   
3422 F0 0F     BEQ 3433                 

		-- draw for when energy green (4 or above)

3424 AD 0E 0C  LDA 0C0E                 -- get player energy
3427 4A        LSR A                    -- divide by 2
3428 4A        LSR A                    -- divide by 2
3429 48        PHA                      
342A 29 03     AND #03                  
342C 85 76     STA 76                   
342E 68        PLA                      
342F 4A        LSR A                    
3430 4A        LSR A                    
3431 85 77     STA 77                   

3433 A2 10     LDX #10                  
3435 A5 77     LDA 77                   
3437 F0 0F     BEQ 3448                 
3439 A5 88     LDA 88                   
343B 20 70 34  JSR 3470                 
343E 20 13 35  JSR 3513                 
3441 C6 77     DEC 77                   
3443 CA        DEX                      
3444 D0 EF     BNE 3435                 
3446 F0 23     BEQ 346B                 
3448 A5 76     LDA 76                   
344A F0 14     BEQ 3460                 
344C A8        TAY                      
344D A9 0F     LDA #0F                  
344F 4A        LSR A                    
3450 88        DEY                      
3451 D0 FC     BNE 344F                 
3453 09 F0     ORA #F0                  
3455 20 70 34  JSR 3470                 
3458 20 13 35  JSR 3513                 
345B CA        DEX                      
345C D0 02     BNE 3460                 
345E F0 0B     BEQ 346B                 
3460 A9 FF     LDA #FF                  
3462 20 70 34  JSR 3470                 
3465 20 13 35  JSR 3513                 
3468 CA        DEX                      
3469 D0 F5     BNE 3460                 
346B 68        PLA                      
346C A8        TAY                      
346D 68        PLA                      
346E AA        TAX                      
346F 60        RTS                      
3470 A0 01     LDY #01                  
3472 91 70     STA (70),Y               
3474 91 74     STA (74),Y               
3476 88        DEY                      
3477 10 F9     BPL 3472                 
3479 60        RTS                      

347A A2 02     LDX #02                  
347C A0 01     LDY #01                  
347E A9 12     LDA #12                  
3480 85 76     STA 76                   
3482 20 C8 34  JSR 34C8                 
3485 A2 2A     LDX #2A                  
3487 A0 01     LDY #01                  
3489 A9 12     LDA #12                  
348B 85 76     STA 76                   
348D 20 C8 34  JSR 34C8                 
3490 20 AC 33  JSR 33AC                 
3493 20 E9 33  JSR 33E9                 
3496 A2 34     LDX #34                  
3498 A0 01     LDY #01                  
349A 20 93 33  JSR 3393                 
349D AD C2 0B  LDA 0BC2                 
34A0 85 76     STA 76                   
34A2 A2 04     LDX #04                  
34A4 A5 76     LDA 76                   
34A6 C9 04     CMP #04                  
34A8 B0 10     BCS 34BA                 
34AA A9 0B     LDA #0B                  
34AC 20 6C 33  JSR 336C                 
34AF A9 0B     LDA #0B                  
34B1 20 6C 33  JSR 336C                 
34B4 E6 76     INC 76                   
34B6 CA        DEX                      
34B7 D0 EB     BNE 34A4                 
34B9 60        RTS                      
34BA A9 0A     LDA #0A                  
34BC 20 6C 33  JSR 336C                 
34BF A9 0C     LDA #0C                  
34C1 20 6C 33  JSR 336C                 
34C4 CA        DEX                      
34C5 D0 F3     BNE 34BA                 
34C7 60        RTS                      
34C8 20 93 33  JSR 3393                 
34CB A5 74     LDA 74                   
34CD 38        SEC                      
34CE E9 01     SBC #01                  
34D0 85 74     STA 74                   
34D2 A0 04     LDY #04                  
34D4 B1 70     LDA (70),Y               
34D6 09 11     ORA #11                  
34D8 91 70     STA (70),Y               
34DA B1 74     LDA (74),Y               
34DC 09 11     ORA #11                  
34DE 91 74     STA (74),Y               
34E0 88        DEY                      
34E1 10 F1     BPL 34D4                 
34E3 20 13 35  JSR 3513                 
34E6 A0 04     LDY #04                  
34E8 A9 00     LDA #00                  
34EA 91 70     STA (70),Y               
34EC 91 74     STA (74),Y               
34EE 88        DEY                      
34EF 10 F9     BPL 34EA                 
34F1 C8        INY                      
34F2 A9 FF     LDA #FF                  
34F4 91 74     STA (74),Y               
34F6 A0 04     LDY #04                  
34F8 91 70     STA (70),Y               
34FA 20 13 35  JSR 3513                 
34FD C6 76     DEC 76                   
34FF D0 E5     BNE 34E6                 
3501 A0 04     LDY #04                  
3503 B1 70     LDA (70),Y               
3505 09 88     ORA #88                  
3507 91 70     STA (70),Y               
3509 B1 74     LDA (74),Y               
350B 09 88     ORA #88                  
350D 91 74     STA (74),Y               
350F 88        DEY                      
3510 10 F1     BPL 3503                 
3512 60        RTS                      
3513 A5 70     LDA 70                   
3515 18        CLC                      
3516 69 08     ADC #08                  
3518 85 70     STA 70                   
351A 90 08     BCC 3524                 
351C E6 71     INC 71                   
351E 10 04     BPL 3524                 
3520 A9 58     LDA #58                  
3522 85 71     STA 71                   
3524 A5 74     LDA 74                   
3526 18        CLC                      
3527 69 08     ADC #08                  
3529 85 74     STA 74                   
352B 90 08     BCC 3535                 
352D E6 75     INC 75                   
352F 10 04     BPL 3535                 
3531 A9 58     LDA #58                  
3533 85 75     STA 75                   
3535 60        RTS                      

		-- time passes

3536 EE D9 0B  INC 0BD9                 -- increment game clock
3539 D0 0D     BNE 3548                 
353B EE DA 0B  INC 0BDA                 
353E D0 08     BNE 3548                 
3540 AD DB 0B  LDA 0BDB                 
3543 30 03     BMI 3548                 
3545 EE DB 0B  INC 0BDB                 

3548 AD DA 0B  LDA 0BDA                 -- get clock
354B 29 E0     AND #E0                  -- only top 3 bits
354D 4A        LSR A                    
354E 4A        LSR A                    
354F 4A        LSR A                    
3550 4A        LSR A                    
3551 4A        LSR A                    -- shift to bits 0 to 2
3552 CD CD 0B  CMP 0BCD                 -- compare to highest level achieved
3555 F0 32     BEQ 3589                 -- equal, so skip next section
3557 90 30     BCC 3589                 -- less, so skip next section

		-- unlock level

3559 8D CD 0B  STA 0BCD                 -- update highest level achieved
355C 20 E0 2A  JSR 2AE0                 -- load fruit
355F A0 BF     LDY #BF                  -- initialise loop counter
3561 B9 00 07  LDA 0700,Y               -- get monster type
3564 30 1E     BMI 3584                 -- skip eggs
3566 B9 00 04  LDA 0400,Y               -- get room number
3569 C9 FF     CMP #FF                  -- is it dead?
356B F0 17     BEQ 3584                 -- yes, so skip
356D 20 06 26  JSR 2606                 -- get corresponding level
3570 CD CD 0B  CMP 0BCD                 -- compare to player's highest level achieved
3573 B0 0F     BCS 3584                 -- it's the same or greater so skip
3575 B9 C0 04  LDA 04C0,Y               -- get monster movement type
3578 29 08     AND #08                  -- get the stay in same room bit
357A D0 08     BNE 3584                 -- it does, so skip
357C B9 C0 04  LDA 04C0,Y               -- get monster movement type
357F 09 10     ORA #10                  -- add the can move room bit
3581 99 C0 04  STA 04C0,Y               -- store new movement type
3584 88        DEY                      -- decrement loop counter
3585 C0 FF     CPY #FF                  -- finish loop?
3587 D0 D8     BNE 3561                 -- go around

		-- continue time passes with regular player energy reduction

3589 AD 00 0C  LDA 0C00                 -- get player status
358C C9 05     CMP #05                  
358E D0 21     BNE 35B1                 -- branch if not alive

3590 CE D9 08  DEC 08D9                 -- decrement counter 
3593 10 1C     BPL 35B1                 -- not zero, so branch

3595 AD 0E 0C  LDA 0C0E                 -- get current energy
3598 4A        LSR A                    -- multiply by 2
3599 49 FF     EOR #FF                  -- reverse bits
359B 29 7F     AND #7F                  -- top 7 bits
359D 8D D9 08  STA 08D9                 -- store new counter value
35A0 AD 0E 0C  LDA 0C0E                 -- get energy
35A3 D0 06     BNE 35AB                 -- still alive so branch
35A5 20 82 2E  JSR 2E82                 -- deal with player death
35A8 4C B1 35  JMP 35B1                 -- skip over next bit

35AB CE 0E 0C  DEC 0C0E                 -- decrement energy due to time
35AE 20 E9 33  JSR 33E9                 -- redraw energy bar

		-- continue time passes, possibly end main loop

35B1 AD DC 0B  LDA 0BDC                 -- get delay to end of main loop
35B4 10 18     BPL 35CE                 -- +ve so RTS
35B6 AD 00 0C  LDA 0C00                 -- get player status
35B9 D0 08     BNE 35C3                 -- branch if still alive
35BB 20 80 1E  JSR 1E80                 -- get random number
35BE 29 7F     AND #7F                  -- first 7 bits only
35C0 8D 01 0C  STA 0C01                 -- store new tile number so that player's position is random
35C3 EE DC 0B  INC 0BDC                 -- increment delay counter
35C6 30 07     BMI 35CF                 -- not zero, skip next bit
35C8 68        PLA                      
35C9 68        PLA                      -- remove and discard return address from stack
35CA 68        PLA                      
35CB 68        PLA                      -- remove and discard return address from stack
35CC A9 00     LDA #00                  
35CE 60        RTS                      -- end main loop, indicating death

35CF A5 8A     LDA 8A                   -- get world completed flag
35D1 F0 FB     BEQ 35CE                 -- RTS if not completed
35D3 AD DC 0B  LDA 0BDC                 -- get delay to end main loop
35D6 C9 90     CMP #90                  
35D8 F0 0C     BEQ 35E6                 -- play finish world sound
35DA C9 B0     CMP #B0                  
35DC F0 08     BEQ 35E6                 -- play finish world sound
35DE C9 D0     CMP #D0                  
35E0 F0 04     BEQ 35E6                 -- play finish world sound
35E2 C9 E0     CMP #E0                  
35E4 D0 E8     BNE 35CE                 -- rts 
35E6 A9 10     LDA #10                  
35E8 4C D6 2D  JMP 2DD6                 -- jump to play sound

		-- analyse joystick input

35EB 8A        TXA                      
35EC 48        PHA                      
35ED A9 80     LDA #80                  
35EF AE E0 18  LDX 18E0                 
35F2 20 F4 FF  JSR FFF4                 -- osbyte &80: read adc channel 
35F5 84 70     STY 70                   
35F7 AE E0 18  LDX 18E0                 
35FA CA        DEX                      
35FB 20 F4 FF  JSR FFF4                 -- osbyte &80: read adc channel 
35FE 84 71     STY 71                   
3600 98        TYA                      
3601 20 57 36  JSR 3657                 
3604 85 73     STA 73                   
3606 A5 70     LDA 70                   
3608 20 57 36  JSR 3657                 
360B C9 3C     CMP #3C                  
360D 90 15     BCC 3624                 
360F C5 73     CMP 73                   
3611 B0 1D     BCS 3630                 
3613 AD D0 0B  LDA 0BD0                 
3616 85 8C     STA 8C                   
3618 A5 71     LDA 71                   
361A 30 22     BMI 363E                 
361C AD D1 0B  LDA 0BD1                 
361F 85 8C     STA 8C                   
3621 4C 3E 36  JMP 363E                 
3624 A5 73     LDA 73                   
3626 C9 3C     CMP #3C                  
3628 B0 E9     BCS 3613                 
362A A9 00     LDA #00                  
362C 85 8C     STA 8C                   
362E F0 0E     BEQ 363E                 
3630 AD D2 0B  LDA 0BD2                 
3633 85 8C     STA 8C                   
3635 A5 70     LDA 70                   
3637 30 05     BMI 363E                 
3639 AD D3 0B  LDA 0BD3                 
363C 85 8C     STA 8C                   
363E A9 00     LDA #00                  
3640 85 8D     STA 8D                   
3642 A9 80     LDA #80                  
3644 A2 00     LDX #00                  
3646 20 F4 FF  JSR FFF4                 
3649 8A        TXA                      
364A 2D E1 18  AND 18E1                 
364D F0 05     BEQ 3654                 
364F AD D4 0B  LDA 0BD4                 
3652 85 8D     STA 8D                   
3654 68        PLA                      
3655 AA        TAX                      
3656 60        RTS                      

3657 38        SEC                      
3658 E9 80     SBC #80                  
365A 10 05     BPL 3661                 
365C 49 FF     EOR #FF                  -- negate result
365E 18        CLC                      
365F 69 01     ADC #01                  
3661 60        RTS                      

		-- clear input variables so that no direction is recorded

3662 A9 00     LDA #00                  
3664 85 8C     STA 8C                   
3666 85 8D     STA 8D                   
3668 4C 3C 0A  JMP 0A3C                 

		-- get input from keyboard or joystick

366B AD C3 0B  LDA 0BC3                 
366E D0 F2     BNE 3662                 
3670 AD 00 0C  LDA 0C00                 -- get player status
3673 C9 05     CMP #05                  
3675 D0 EB     BNE 3662                 -- branch if not alive
3677 AD CF 0B  LDA 0BCF                 -- get input source
367A 30 0B     BMI 3687                 -- branch if joystick input
367C A5 EC     LDA EC                   -- get last key pressed
367E 85 8C     STA 8C                   
3680 A5 ED     LDA ED                   -- get first key pressed
3682 85 8D     STA 8D                   
3684 4C 3C 0A  JMP 0A3C                 

3687 20 EB 35  JSR 35EB                 -- get joystick input
368A 4C 3C 0A  JMP 0A3C                 

		-- initialise new game

368D 20 F2 37  JSR 37F2                 -- setup screen for game and blank colours
3690 A9 00     LDA #00                  
3692 8D C0 0B  STA 0BC0                 
3695 8D C1 0B  STA 0BC1                 
3698 8D CD 0B  STA 0BCD                 -- highest level achieved
369B 8D C6 0B  STA 0BC6                 -- current room
369E A2 0A     LDX #0A                  
36A0 9D D5 0B  STA 0BD5,X               -- score, game timer
36A3 CA        DEX                      
36A4 10 FA     BPL 36A0                 
36A6 A2 0F     LDX #0F                  -- initialise list of crystals
36A8 BD F0 08  LDA 08F0,X               
36AB 9D F0 0B  STA 0BF0,X               
36AE CA        DEX                      
36AF 10 F7     BPL 36A8                 
36B1 AD 30 44  LDA 4430                 -- initial energy
36B4 8D 0E 0C  STA 0C0E                 
36B7 A9 02     LDA #02                  
36B9 8D C2 0B  STA 0BC2                 
36BC 8D A6 0B  STA 0BA6                 -- world 1
36BF A2 00     LDX #00                  
36C1 A9 FF     LDA #FF                  
36C3 9D 00 0E  STA 0E00,X               -- clear static data
36C6 9D 00 0F  STA 0F00,X               
36C9 CA        DEX                      
36CA D0 F7     BNE 36C3                 
36CC 8A        TXA                      
36CD 20 E0 2A  JSR 2AE0                 -- load fruit for level 0
36D0 A9 00     LDA #00                  
36D2 8D 7F 0E  STA 0E7F                 -- set block room number to 0
36D5 A9 5A     LDA #5A                  
36D7 8D FF 0E  STA 0EFF                 -- set block tile number
36DA A9 13     LDA #13                  
36DC 8D 7F 0F  STA 0F7F                 -- block type
36DF A2 BF     LDX #BF					-- get initial monster states at start of game
36E1 BD 00 3B  LDA 3B00,X               
36E4 9D 00 04  STA 0400,X               -- copy room numbers
36E7 BD C0 3B  LDA 3BC0,X               
36EA 9D C0 04  STA 04C0,X               -- copy behaviour
36ED BD 80 3C  LDA 3C80,X               
36F0 9D 80 05  STA 0580,X               -- copy tile position
36F3 BD 40 3D  LDA 3D40,X               
36F6 9D 40 06  STA 0640,X               -- copy energy
36F9 BD 00 57  LDA 5700,X               
36FC 9D 00 07  STA 0700,X               -- copy type
36FF CA        DEX                      
3700 E0 FF     CPX #FF                  
3702 D0 DD     BNE 36E1                 

		-- initialise new life

3704 20 10 38  JSR 3810                 -- blank palette colours
3707 A9 FF     LDA #FF                  
3709 8D CC 0B  STA 0BCC                 -- set last room number
370C A9 58     LDA #58                  
370E 8D 01 0C  STA 0C01                 -- start tile for player
3711 20 A6 1E  JSR 1EA6                 -- start new life

3714 48        PHA                      
3715 A5 8A     LDA 8A                   
3717 D0 03     BNE 371C                 -- skip next line if completed world
3719 20 CD 2D  JSR 2DCD                 -- reset all sounds channels

371C 68        PLA                      
371D D0 2C     BNE 374B	                -- branch if escape pressed
371F A5 8A     LDA 8A                   
3721 D0 33     BNE 3756                 -- branch if completed world
3723 AD C2 0B  DEC 0BC2                 -- decrement lives
3726 30 2B     BMI 3753                 -- branch if no more lives

3728 AD A6 0B  LDA 0BA6                 -- get world number
372B F0 16     BEQ 3743                 -- branch if 2nd world

		-- 1st world restart

372D AD C6 0B  LDA 0BC6                 -- get current room number of player
3730 20 06 26  JSR 2606                 -- calculate corresponding level
3733 AA        TAX                      
3734 BD BB 38  LDA 38BB,X               -- get start room number for level
3737 8D C6 0B  STA 0BC6                 -- set player's room number
373A BD 30 44  LDA 4430,X               -- get start energy for level
373D 8D 0E 0C  STA 0C0E                 -- set player's energy level
3740 4C 04 37  JMP 3704                 -- jump to new life

		-- 2nd world restart

3743 A9 FF     LDA #FF                  -- set energy to maximum
3745 8D 0E 0C  STA 0C0E                 
3748 4C 04 37  JMP 3704                 -- jump to new life

		-- escape pressed in order to end game

374B A9 00     LDA #00                  -- set score to 0 (don't want to trigger high score)
374D 8D D6 0B  STA 0BD6                 
3750 8D D7 0B  STA 0BD7                 

		-- end game loop

3753 4C 48 38  JMP 3848                 -- game ended - jump to high scores

		-- set up for second world

3756 AD A6 0B  LDA 0BA6                 -- get world number
3759 F0 00     BEQ 375B                 
375B EE C2 0B  INC 0BC2                 -- extra life won
375E A9 00     LDA #00                  
3760 8D C6 0B  STA 0BC6                 -- reset player room number to 0
3763 8D 7F 0E  STA 0E7F                 -- reset block room number to 0
3766 A9 FF     LDA #FF                  
3768 8D 0E 0C  STA 0C0E                 -- maximum energy for player
376B 8D CD 0B  STA 0BCD                 -- set highest level achieved
376E A9 1C     LDA #1C                  
3770 8D FE 0B  STA 0BFE                 -- set crystal room in crystal list
3773 A9 5A     LDA #5A                  
3775 8D FF 0B  STA 0BFF                 -- set tile number in crystal list
3778 8D FF 0E  STA 0EFF                 -- set tile number for block in static object list

377B A0 BF     LDY #BF                  -- initialise loop counter (C0 being the number of monsters)
377D C0 16     CPY #16                  
377F F0 39     BEQ 37BA                 -- skip setting monster number 22 as this is the diamond demon template
3781 20 80 1E  JSR 1E80                 -- get random number
3784 29 7F     AND #7F                  -- only lowest 7 bits
3786 F0 F5     BEQ 377D                 -- but not 0 - try again if zero
3788 99 00 04  STA 0400,Y               -- store monster room number

378B 4A        LSR A                    -- divide room number by 2
378C 29 07     AND #07                  -- keep only the 3 lowest bits (so A is between 0 and 7)
378E 85 70     STA 70                   -- store the number for later

3790 AD 44 FE  LDA FE44                 -- get random number
3793 29 07     AND #07                  -- only lowest 3 bits (between 0 and 7)
3795 18        CLC                      
3796 65 70     ADC 70                   -- add together to give a number between 0 and 14 to index into data at 57c0

3798 0A        ASL A                    -- multiply by 2 (number now equals 0, 2, 4 ... 28)
3799 0A        ASL A                    -- multiply by 2 (number now equals 0, 4, 8 ... 56)
379A AA        TAX                      -- store the result

379B A9 FF     LDA #FF                  
379D 99 80 05  STA 0580,Y               -- store unset monster tile number
37A0 99 40 06  STA 0640,Y               -- set maximum energy (which may be overwritten in a moment)

37A3 BD C0 57  LDA 57C0,X               
37A6 99 C0 04  STA 04C0,Y               -- set monster movement & behaviour 

37A9 BD C1 57  LDA 57C1,X               
37AC 99 00 07  STA 0700,Y               -- set monster type

37AF AD A6 0B  LDA 0BA6                 -- get world number
37B2 F0 06     BEQ 37BA                 -- branch over setting energy if already on world 2
37B4 BD C2 57  LDA 57C2,X               
37B7 99 40 06  STA 0640,Y               -- set monster energy

37BA 88        DEY                      -- decrement loop counter
37BB C0 FF     CPY #FF                  -- end of loop?
37BD D0 BE     BNE 377D                 -- continue loop
37BF A9 00     LDA #00                  
37C1 8D A6 0B  STA 0BA6                 -- set world 2
37C4 4C 04 37  JMP 3704                 -- jump to initialise life

		-- change screen mode

37C7 48        PHA                      
37C8 20 10 38  JSR 3810                 
37CB 20 7E 38  JSR 387E                 
37CE A9 13     LDA #13                  
37D0 20 F4 FF  JSR FFF4                 -- osbyte &13: wait for vertical sync
37D3 A9 16     LDA #16                  
37D5 20 EE FF  JSR FFEE                 -- vdu 22: select screen mode
37D8 68        PLA                      
37D9 20 EE FF  JSR FFEE                 -- vdu <entry param>: which screen mode
37DC A9 0B     LDA #0B                  
37DE 8D 00 FE  STA FE00                 
37E1 A9 00     LDA #00                  
37E3 8D 01 FE  STA FE01                 -- turn off cursor
37E6 60        RTS                      

		-- send series of zero bytes to vdu drivers

37E7 A9 00     LDA #00                  
37E9 A0 07     LDY #07                  
37EB 20 EE FF  JSR FFEE                 
37EE 88        DEY                      
37EF 10 FA     BPL 37EB                 
37F1 60        RTS                      

		-- setup screen for game

37F2 A9 05     LDA #05                  
37F4 20 C7 37  JSR 37C7                 -- Set mode 5
37F7 A2 0E     LDX #0E                  
37F9 BD D0 18  LDA 18D0,X               -- set 6845 video parameters
37FC 8D 00 FE  STA FE00                 
37FF BD D1 18  LDA 18D1,X               
3802 8D 01 FE  STA FE01                 
3805 CA        DEX                      
3806 CA        DEX                      
3807 10 F0     BPL 37F9                 

3809 A9 9A     LDA #9A                  
380B A2 D8     LDX #D8                  
380D 20 F4 FF  JSR FFF4                 -- set video ula control register (40 chars per line, high clock frequency)

3810 A9 13     LDA #13                  
3812 20 F4 FF  JSR FFF4                 -- wait for screen refresh

		-- set all logical colours in palette to black

3815 A2 03     LDX #03                  -- initialise loop counter
3817 A9 13     LDA #13                  
3819 20 EE FF  JSR FFEE                 -- vdu 19
381C 8A        TXA                      
381D 20 EE FF  JSR FFEE                 -- logical colour 
3820 20 E7 37  JSR 37E7                 -- send lots of vdu 0s
3823 CA        DEX                      
3824 10 F1     BPL 3817                 
3826 60        RTS                      

		-- set colour palette to 1 = red, 2 = green and 3 = blue

3827 A9 13     LDA #13                  
3829 20 F4 FF  JSR FFF4                 -- wait for vertical sync
382C A2 03     LDX #03                  
382E A9 13     LDA #13                  
3830 20 EE FF  JSR FFEE                 -- vdu 19
3833 8A        TXA                      
3834 20 EE FF  JSR FFEE                 -- vdu <logical colour>
3837 8A        TXA                      
3838 C9 03     CMP #03                  
383A D0 02     BNE 383E                 
383C A9 04     LDA #04                  
383E 20 EE FF  JSR FFEE                 -- vdu <actual colour>
3841 20 E7 37  JSR 37E7                 -- send lots of vdu 0s
3844 CA        DEX                      
3845 D0 E7     BNE 382E                 -- continue loop
3847 60        RTS                      

		-- high scores

3848 A9 0F     LDA #0F                  
384A 20 C7 37  JSR 37C7                 -- change screen mode to 15
384D 20 7E 38  JSR 387E                 -- clear screen memory
3850 20 7E 38  JSR 387E                 -- clear screen memory
3853 20 7E 38  JSR 387E                 -- clear screen memory
3856 20 C4 38  JSR 38C4                 -- ??? generate screen of high scores ???

		-- outside game, wait for trigger to start new game

3859 20 CD 2D  JSR 2DCD                 -- reset all sound channels
385C A9 00     LDA #00                  
385E 8D CF 0B  STA 0BCF                 -- set default to keyboard input
3861 A5 EC     LDA EC                   -- get last key pressed
3863 C9 E2     CMP #E2                  
3865 F0 14     BEQ 387B                 -- space pressed, so branch
3867 A2 00     LDX #00                  
3869 A9 80     LDA #80                  
386B 20 F4 FF  JSR FFF4                 -- osbyte &80 - read adc channel 
386E 8A        TXA                      
386F F0 E8     BEQ 3859                 -- nothing pressed? then loop
3871 8D E1 18  STA 18E1                 
3874 0A        ASL A                    
3875 8D E0 18  STA 18E0                 
3878 CE CF 0B  DEC 0BCF                 -- set joystick input
387B 4C 8D 36  JMP 368D                 -- jump to initialise game

		-- clear screen memory

387E A9 58     LDA #58                  
3880 85 71     STA 71                   
3882 A9 00     LDA #00                  
3884 85 70     STA 70                   
3886 A8        TAY                      
3887 91 70     STA (70),Y               
3889 C8        INY                      
388A D0 FB     BNE 3887                 
388C E6 71     INC 71                   
388E 10 F7     BPL 3887                 
3890 60        RTS                      

		-- has block crushed anything?

3891 A0 E0     LDY #E0                  -- initialise loop counter
3893 B9 00 0C  LDA 0C00,Y               -- get slot status/occupant
3896 F0 0D     BEQ 38A5                 -- branch if slot free
3898 BD 01 0C  LDA 0C01,X               -- get tile number of whatever is doing the pushing
389B D9 01 0C  CMP 0C01,Y               -- is it the same as the slot tile number?
389E F0 0F     BEQ 38AF                 -- branch if equal
38A0 D9 02 0C  CMP 0C02,Y               -- is it the same as the slot tile number before/after?
38A3 F0 0A     BEQ 38AF                 -- branch if equal

38A5 98        TYA                      
38A6 38        SEC                      
38A7 E9 10     SBC #10                  -- adjust loop counter
38A9 A8        TAY                      
38AA C9 F0     CMP #F0                  
38AC D0 E5     BNE 3893                 -- continue loop
38AE 60        RTS                      

38AF 98        TYA                      
38B0 48        PHA                      
38B1 85 84     STA 84                   -- save the matching slot number
38B3 20 BD 31  JSR 31BD                 -- determine outcome for crushed sprite
38B6 68        PLA                      
38B7 A8        TAY                      
38B8 4C A5 38  JMP 38A5                 

		-- start room numbers per level

38BB 00
38BC 34
38BD 08
38BE 1C
38BF 1C
38C0 6B
38C1 47
38C2 73
38C3 00

38C4 20 B5 39  JSR 39B5                 
38C7 20 C3 39  JSR 39C3                 
38CA AD 08 10  LDA 1008                 
38CD 85 70     STA 70                   
38CF A9 10     LDA #10                  
38D1 85 71     STA 71                   
38D3 85 73     STA 73                   
38D5 A0 02     LDY #02                  
38D7 B9 D5 0B  LDA 0BD5,Y               
38DA 91 70     STA (70),Y               
38DC 88        DEY                      
38DD 10 F8     BPL 38D7                 
38DF A2 08     LDX #08                  
38E1 BD FF 0F  LDA 0FFF,X               
38E4 85 72     STA 72                   
38E6 A0 02     LDY #02                  
38E8 B1 70     LDA (70),Y               
38EA D1 72     CMP (72),Y               
38EC 90 15     BCC 3903                 
38EE D0 05     BNE 38F5                 
38F0 88        DEY                      
38F1 10 F5     BPL 38E8                 
38F3 30 0E     BMI 3903                 
38F5 BD FF 0F  LDA 0FFF,X               
38F8 9D 00 10  STA 1000,X               
38FB A5 70     LDA 70                   
38FD 9D FF 0F  STA 0FFF,X               
3900 CA        DEX                      
3901 D0 DE     BNE 38E1                 
3903 86 78     STX 78                   
3905 E0 08     CPX #08                  
3907 F0 20     BEQ 3929                 
3909 A2 EE     LDX #EE                  
390B A0 39     LDY #39                  
390D 20 9F 39  JSR 399F                 
3910 A6 70     LDX 70                   
3912 E8        INX                      
3913 E8        INX                      
3914 E8        INX                      
3915 8E 94 39  STX 3994                 
3918 A9 00     LDA #00                  
391A A2 94     LDX #94                  
391C A0 39     LDY #39                  
391E 20 F1 FF  JSR FFF1                 
3921 90 06     BCC 3929                 
3923 A0 03     LDY #03                  
3925 A9 0D     LDA #0D                  
3927 91 70     STA (70),Y               
3929 A2 75     LDX #75                  
392B A0 3A     LDY #3A                  
392D 20 9F 39  JSR 399F                 
3930 A2 00     LDX #00                  
3932 A9 05     LDA #05                  
3934 85 77     STA 77                   
3936 A9 1F     LDA #1F                  
3938 20 EE FF  JSR FFEE                 
393B A9 04     LDA #04                  
393D 20 EE FF  JSR FFEE                 
3940 A5 77     LDA 77                   
3942 20 EE FF  JSR FFEE                 
3945 A9 20     LDA #20                  
3947 E4 78     CPX 78                   
3949 D0 02     BNE 394D                 
394B A9 88     LDA #88                  
394D 20 EE FF  JSR FFEE                 
3950 8A        TXA                      
3951 18        CLC                      
3952 69 31     ADC #31                  
3954 20 EE FF  JSR FFEE                 
3957 A9 2E     LDA #2E                  
3959 20 EE FF  JSR FFEE                 
395C BD 00 10  LDA 1000,X               
395F 85 72     STA 72                   
3961 A9 10     LDA #10                  
3963 85 73     STA 73                   
3965 A0 02     LDY #02                  
3967 A9 00     LDA #00                  
3969 85 79     STA 79                   
396B B1 72     LDA (72),Y               
396D 20 CC 39  JSR 39CC                 
3970 88        DEY                      
3971 10 F8     BPL 396B                 
3973 8A        TXA                      
3974 48        PHA                      
3975 A2 99     LDX #99                  
3977 A0 39     LDY #39                  
3979 20 9F 39  JSR 399F                 
397C 68        PLA                      
397D AA        TAX                      
397E A0 03     LDY #03                  
3980 B1 72     LDA (72),Y               
3982 20 EE FF  JSR FFEE                 
3985 C8        INY                      
3986 C9 0D     CMP #0D                  
3988 D0 F6     BNE 3980                 
398A E6 77     INC 77                   
398C E6 77     INC 77                   
398E E8        INX                      
398F E0 08     CPX #08                  
3991 D0 A3     BNE 3936                 
3993 60        RTS                      
3994 00        BRK                      
3995 10 13     BPL 39AA                 
3997 20 FF 06  JSR 06FF                 
399A 30 20     BMI 39BC                 
399C 2E 2E 20  ROL 202E                 
399F 86 74     STX 74                   
39A1 84 75     STY 75                   
39A3 A0 00     LDY #00                  
39A5 B1 74     LDA (74),Y               
39A7 85 76     STA 76                   
39A9 C8        INY                      
39AA B1 74     LDA (74),Y               
39AC 20 EE FF  JSR FFEE                 
39AF C8        INY                      
39B0 C4 76     CPY 76                   
39B2 D0 F6     BNE 39AA                 
39B4 60        RTS                      
39B5 A9 0F     LDA #0F                  
39B7 A2 01     LDX #01                  
39B9 4C C7 39  JMP 39C7                 
39BC A9 04     LDA #04                  
39BE A2 01     LDX #01                  
39C0 4C C7 39  JMP 39C7                 
39C3 A9 04     LDA #04                  
39C5 A2 00     LDX #00                  
39C7 A0 00     LDY #00                  
39C9 4C F4 FF  JMP FFF4                 
39CC 48        PHA                      
39CD 4A        LSR A                    
39CE 4A        LSR A                    
39CF 4A        LSR A                    
39D0 4A        LSR A                    
39D1 20 DB 39  JSR 39DB                 
39D4 68        PLA                      
39D5 29 0F     AND #0F                  
39D7 C0 00     CPY #00                  
39D9 F0 0E     BEQ 39E9                 
39DB 48        PHA                      
39DC 05 79     ORA 79                   
39DE 85 79     STA 79                   
39E0 D0 06     BNE 39E8                 
39E2 68        PLA                      
39E3 A9 20     LDA #20                  
39E5 4C EE FF  JMP FFEE                 
39E8 68        PLA                      
39E9 09 30     ORA #30                  
39EB 4C EE FF  JMP FFEE                 
39EE 87        ?87                      
39EF 16 07     ASL 07,X                 
39F1 1F        ?1F                      
39F2 06 05     ASL 05                   
39F4 8D 86 9D  STA 9D86                 
39F7 84 43     STY 43                   
39F9 6F        ?6F                      

		-- Instructions page

5D00 A9 E5     LDA #E5                  
5D02 A2 01     LDX #01                  
5D04 20 F4 FF  JSR FFF4                 -- disable escape key
5D07 A9 C8     LDA #C8                  
5D09 A2 03     LDX #03                  
5D0B 20 F4 FF  JSR FFF4                 -- escape key disabled, clear memory on break
5D0E A9 09     LDA #09                  
5D10 A2 04     LDX #04                  
5D12 20 F4 FF  JSR FFF4                 -- set duration of 1st flashing colour to 4 * 20ms
5D15 A9 0A     LDA #0A                  
5D17 A2 04     LDX #04                  
5D19 20 F4 FF  JSR FFF4                 -- set duration of 2nd flashing colour to 4 * 20ms

5D1C A9 09     LDA #09                  -- reallocate code from &5800 to &0900
5D1E 85 71     STA 71                   
5D20 A9 58     LDA #58                  
5D22 85 73     STA 73                   
5D24 20 AF 5D  JSR 5DAF                 

5D27 A9 0A     LDA #0A                  -- reallocate code from &5900 to &0A00
5D29 85 71     STA 71                   
5D2B A9 59     LDA #59                  
5D2D 85 73     STA 73                   
5D2F 20 AF 5D  JSR 5DAF                 

5D32 A9 08     LDA #08                  -- copy memory from &5A00 to &0800
5D34 85 71     STA 71                   
5D36 A9 5A     LDA #5A                  
5D38 85 73     STA 73                   
5D3A 20 AF 5D  JSR 5DAF                 

5D3D A9 10     LDA #10                  -- copy memory from &5B00 to &1000
5D3F 85 71     STA 71                   
5D41 A9 5B     LDA #5B                  
5D43 85 73     STA 73                   
5D45 20 AF 5D  JSR 5DAF                 

5D48 A9 0D     LDA #0D                  -- copy memory from &5C00 to &0D00
5D4A 85 71     STA 71                   
5D4C A9 5C     LDA #5C                  
5D4E 85 73     STA 73                   
5D50 20 AF 5D  JSR 5DAF                 

5D53 A9 E1     LDA #E1                  
5D55 8D D0 0B  STA 0BD0                 
5D58 A9 C2     LDA #C2                  
5D5A 8D D1 0B  STA 0BD1                 
5D5D A9 C8     LDA #C8                  
5D5F 8D D2 0B  STA 0BD2                 
5D62 A9 E8     LDA #E8                  
5D64 8D D3 0B  STA 0BD3                 
5D67 A9 D8     LDA #D8                  
5D69 8D D4 0B  STA 0BD4                 

5D6C A9 81     LDA #81                  
5D6E 8D 24 02  STA 0224                 
5D71 A9 0D     LDA #0D                  
5D73 8D 25 02  STA 0225                 

5D76 A9 D0     LDA #D0                  
5D78 A2 FF     LDX #FF                  
5D7A 20 F4 FF  JSR FFF4                 -- write econet character interception status
5D7D A9 16     LDA #16                  
5D7F 20 EE FF  JSR FFEE                 -- vdu 22 : select screen mode
5D82 A9 07     LDA #07                  
5D84 20 EE FF  JSR FFEE                 -- vdu 7

5D87 A9 0B     LDA #0B                  
5D89 8D 00 FE  STA FE00                 -- select cursor end register
5D8C A9 00     LDA #00                  
5D8E 8D 01 FE  STA FE01                 -- set to 0
5D91 A9 0C     LDA #0C                  
5D93 20 EE FF  JSR FFEE                 -- vdu 12 : clear text area

5D96 A9 7C     LDA #7C                  
5D98 85 71     STA 71                   -- set destination
5D9A A9 5E     LDA #5E                  
5D9C 85 73     STA 73                   -- set source

5D9E 20 AF 5D  JSR 5DAF                 -- copy memory (display instructions)
5DA1 E6 73     INC 73                   
5DA3 E6 71     INC 71                   
5DA5 10 F7     BPL 5D9E                 -- continue loop

5DA7 A9 09     LDA #09                  
5DA9 8D FD 0D  STA 0DFD                 
5DAC 4C 59 38  JMP 3859                 

		-- copy memory 

5DAF A9 00     LDA #00                  
5DB1 85 70     STA 70                   
5DB3 85 72     STA 72                   
5DB5 A8        TAY                      
5DB6 B1 72     LDA (72),Y               
5DB8 91 70     STA (70),Y               
5DBA 88        DEY                      
5DBB D0 F9     BNE 5DB6                 
5DBD 60        RTS                      

6249 A5 70     LDA 70
624B 4C 6E 62  JMP 626E

		-- ENTRY POINT

624E A9 E5     LDA #E5                  
6250 A2 01     LDX #01                  
6252 20 F4 FF  JSR FFF4                 -- escape key to return ascii code
6255 A9 16     LDA #16                  3w
6257 20 EE FF  JSR FFEE                 -- set screen mode
625A A9 07     LDA #07                  
625C 20 EE FF  JSR FFEE                 -- set mode 7

625F A9 91     LDA #91                  -- graphics red
6261 85 70     STA 70                   
6263 A2 04     LDX #04                  -- initialise outer loop counter
6265 A0 00     LDY #00                  -- initialise inner loop counter
6267 B9 FF 62  LDA 62FF,Y               -- get data from memory
626A C9 40     CMP #40                  
626C F0 DB     BEQ 6249                 -- get control character instead
626E 20 EE FF  JSR FFEE                 -- vdu
6271 C8        INY                      
6272 C0 C7     CPY #C7                  -- check for end of inner loop
6274 D0 F1     BNE 6267                 -- continue inner loop
6276 E6 70     INC 70                   -- next colour for graphics
6278 E0 01     CPX #01                  
627A F0 16     BEQ 6292                 

627C A9 0D     LDA #0D                  
627E 20 EE FF  JSR FFEE                 -- carriage return
6281 A9 0A     LDA #0A                  
6283 20 EE FF  JSR FFEE                 -- new line
6286 A9 0A     LDA #0A                  
6288 20 EE FF  JSR FFEE                 -- new line
628B E0 03     CPX #03                  
628D F0 68     BEQ 62F7                 -- another new line
628F CA        DEX                      
6290 D0 D3     BNE 6265                 -- continue outer loop

6292 A9 1C     LDA #1C                  
6294 20 EE FF  JSR FFEE                 -- vdu 28 : define text window
6297 A9 0D     LDA #0D                  
6299 20 EE FF  JSR FFEE                 
629C A9 0D     LDA #0D                  
629E 20 EE FF  JSR FFEE                 
62A1 A9 1B     LDA #1B                  
62A3 20 EE FF  JSR FFEE                 
62A6 A9 0A     LDA #0A                  
62A8 20 EE FF  JSR FFEE                 

62AB A9 0C     LDA #0C                  
62AD 20 EE FF  JSR FFEE                 -- CLS
62B0 A9 0A     LDA #0A                  
62B2 20 EE FF  JSR FFEE                 -- new line

62B5 A2 00     LDX #00                  
62B7 BD F0 63  LDA 63F0,X               
62BA 20 EE FF  JSR FFEE                 -- output "Labyrinth" double height
62BD E8        INX                      
62BE E0 0E     CPX #0E                  
62C0 D0 F5     BNE 62B7                 

62C2 A9 0D     LDA #0D                  
62C4 20 EE FF  JSR FFEE                 -- carriage return
62C7 A9 0A     LDA #0A                  
62C9 20 EE FF  JSR FFEE                 -- new line

62CC A2 00     LDX #00                  
62CE BD F0 63  LDA 63F0,X               
62D1 20 EE FF  JSR FFEE                 -- output "Labyrinth" double height
62D4 E8        INX                      
62D5 E0 0E     CPX #0E                  
62D7 D0 F5     BNE 62CE                 

62D9 A2 00     LDX #00                  
62DB BD C6 63  LDA 63C6,X               
62DE 20 EE FF  JSR FFEE                 -- turn cursor off, define text window
62E1 E8        INX                      -- output "Press return..."
62E2 E0 2A     CPX #2A                  
62E4 D0 F5     BNE 62DB                 

62E6 20 E0 FF  JSR FFE0                 -- Read character
62E9 C9 0D     CMP #0D                  -- is it return?
62EB D0 F9     BNE 62E6                 -- nope, try again

62ED A9 0F     LDA #0F                  
62EF A2 01     LDX #01                  
62F1 20 F4 FF  JSR FFF4                 -- flush keyboard buffer
62F4 4C 00 5D  JMP 5D00                 

62F7 A9 0A     LDA #0A                  
62F9 20 EE FF  JSR FFEE                 -- new line
62FC 4C 8F 62  JMP 628F                 
